
mcp794xx_rtc_L432KCU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008470  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001724  08008600  08008600  00018600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d24  08009d24  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08009d24  08009d24  00019d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d2c  08009d2c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d2c  08009d2c  00019d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d30  08009d30  00019d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08009d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200001f0  08009f24  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  08009f24  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b06b  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f7e  00000000  00000000  0003b28b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000114db  00000000  00000000  0003e209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  0004f6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001408  00000000  00000000  00050658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021da7  00000000  00000000  00051a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000189ef  00000000  00000000  00073807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c73ae  00000000  00000000  0008c1f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001535a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000416c  00000000  00000000  001535f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080085e8 	.word	0x080085e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	080085e8 	.word	0x080085e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eac:	b500      	push	{lr}
 8000eae:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb0:	2244      	movs	r2, #68	; 0x44
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	a805      	add	r0, sp, #20
 8000eb6:	f004 fb85 	bl	80055c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eba:	2214      	movs	r2, #20
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4668      	mov	r0, sp
 8000ec0:	f004 fb80 	bl	80055c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ec4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ec8:	f003 fac8 	bl	800445c <HAL_PWREx_ControlVoltageScaling>
 8000ecc:	b108      	cbz	r0, 8000ed2 <SystemClock_Config+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ece:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <SystemClock_Config+0x24>
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ed2:	2210      	movs	r2, #16
 8000ed4:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ed8:	2008      	movs	r0, #8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eda:	e9cd 1208 	strd	r1, r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ede:	2207      	movs	r2, #7
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ee0:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ee2:	e9cd 0212 	strd	r0, r2, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee6:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ee8:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000eec:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef0:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000ef2:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef4:	f003 fb78 	bl	80045e8 <HAL_RCC_OscConfig>
 8000ef8:	b108      	cbz	r0, 8000efe <SystemClock_Config+0x52>
 8000efa:	b672      	cpsid	i
  while (1)
 8000efc:	e7fe      	b.n	8000efc <SystemClock_Config+0x50>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000efe:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f02:	220f      	movs	r2, #15
 8000f04:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f06:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f08:	2101      	movs	r1, #1
 8000f0a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0c:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f10:	f003 fe0e 	bl	8004b30 <HAL_RCC_ClockConfig>
 8000f14:	b108      	cbz	r0, 8000f1a <SystemClock_Config+0x6e>
 8000f16:	b672      	cpsid	i
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <SystemClock_Config+0x6c>
}
 8000f1a:	b017      	add	sp, #92	; 0x5c
 8000f1c:	f85d fb04 	ldr.w	pc, [sp], #4

08000f20 <main>:
{
 8000f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f24:	ed2d 8b02 	vpush	{d8}
 8000f28:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8000f2a:	f002 fe03 	bl	8003b34 <HAL_Init>
  SystemClock_Config();
 8000f2e:	f7ff ffbd 	bl	8000eac <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f32:	2214      	movs	r2, #20
 8000f34:	2100      	movs	r1, #0
 8000f36:	a809      	add	r0, sp, #36	; 0x24
 8000f38:	f004 fb44 	bl	80055c4 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3c:	4bbf      	ldr	r3, [pc, #764]	; (800123c <main+0x31c>)
  HAL_GPIO_WritePin(user_led_GPIO_Port, user_led_Pin, GPIO_PIN_RESET);
 8000f3e:	48c0      	ldr	r0, [pc, #768]	; (8001240 <main+0x320>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hi2c1.Instance = I2C1;
 8000f42:	4cc0      	ldr	r4, [pc, #768]	; (8001244 <main+0x324>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f44:	f042 0201 	orr.w	r2, r2, #1
 8000f48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f4c:	f002 0201 	and.w	r2, r2, #1
 8000f50:	9207      	str	r2, [sp, #28]
 8000f52:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f56:	f042 0202 	orr.w	r2, r2, #2
 8000f5a:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(user_led_GPIO_Port, user_led_Pin, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f64:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(user_led_GPIO_Port, user_led_Pin, GPIO_PIN_RESET);
 8000f66:	2108      	movs	r1, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2500      	movs	r5, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6c:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(user_led_GPIO_Port, user_led_Pin, GPIO_PIN_RESET);
 8000f6e:	f002 ff27 	bl	8003dc0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2308      	movs	r3, #8
  HAL_GPIO_Init(user_led_GPIO_Port, &GPIO_InitStruct);
 8000f74:	a909      	add	r1, sp, #36	; 0x24
 8000f76:	48b2      	ldr	r0, [pc, #712]	; (8001240 <main+0x320>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f78:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(user_led_GPIO_Port, &GPIO_InitStruct);
 8000f80:	f002 fe66 	bl	8003c50 <HAL_GPIO_Init>
  hi2c1.Init.Timing = 0x00707CBB;
 8000f84:	48b0      	ldr	r0, [pc, #704]	; (8001248 <main+0x328>)
 8000f86:	4bb1      	ldr	r3, [pc, #708]	; (800124c <main+0x32c>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f88:	6225      	str	r5, [r4, #32]
  hi2c1.Init.Timing = 0x00707CBB;
 8000f8a:	e9c4 0300 	strd	r0, r3, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f8e:	4620      	mov	r0, r4
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f90:	e9c4 5602 	strd	r5, r6, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8000f94:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f98:	e9c4 5506 	strd	r5, r5, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f9c:	f003 f88b 	bl	80040b6 <HAL_I2C_Init>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	b108      	cbz	r0, 8000fa8 <main+0x88>
 8000fa4:	b672      	cpsid	i
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <main+0x86>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fa8:	4620      	mov	r0, r4
 8000faa:	f003 fa03 	bl	80043b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000fae:	4601      	mov	r1, r0
 8000fb0:	b108      	cbz	r0, 8000fb6 <main+0x96>
 8000fb2:	b672      	cpsid	i
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <main+0x94>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f003 fa22 	bl	8004400 <HAL_I2CEx_ConfigDigitalFilter>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	b108      	cbz	r0, 8000fc4 <main+0xa4>
 8000fc0:	b672      	cpsid	i
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <main+0xa2>
  huart2.Instance = USART2;
 8000fc4:	48a2      	ldr	r0, [pc, #648]	; (8001250 <main+0x330>)
  huart2.Init.BaudRate = 115200;
 8000fc6:	49a3      	ldr	r1, [pc, #652]	; (8001254 <main+0x334>)
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fc8:	6103      	str	r3, [r0, #16]
  huart2.Init.BaudRate = 115200;
 8000fca:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fce:	e9c0 1200 	strd	r1, r2, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fd2:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fd4:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd8:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fdc:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fe2:	f004 fa6c 	bl	80054be <HAL_UART_Init>
 8000fe6:	b108      	cbz	r0, 8000fec <main+0xcc>
 8000fe8:	b672      	cpsid	i
  while (1)
 8000fea:	e7fe      	b.n	8000fea <main+0xca>
	err = mcp794xx_basic_initialize(MCP79412_VARIANT);                               /**< initialize device driver  passing in the correct variant*/
 8000fec:	2007      	movs	r0, #7
 8000fee:	f002 fb1b 	bl	8003628 <mcp794xx_basic_initialize>
	if(err != MCP794XX_DRV_OK){
 8000ff2:	4601      	mov	r1, r0
 8000ff4:	b110      	cbz	r0, 8000ffc <main+0xdc>
		mcp794xx_interface_debug_print("initialize failed, error code: %d\r", err);
 8000ff6:	4898      	ldr	r0, [pc, #608]	; (8001258 <main+0x338>)
 8000ff8:	f002 fd52 	bl	8003aa0 <mcp794xx_interface_debug_print>
	err = mcp794xx_info(&mcp794xx_handler);
 8000ffc:	4c97      	ldr	r4, [pc, #604]	; (800125c <main+0x33c>)
				mcp794xx_basic_eeprom_get_byte(0x00, (uint32_t*)&epoch_time_read, 4);				/**<  read epoch time written in previous state */
 8000ffe:	4f98      	ldr	r7, [pc, #608]	; (8001260 <main+0x340>)
				pEeprom_data_write = (uint8_t *)calloc(EEPROM_PAGE_SIZE, sizeof(uint8_t));         /**< allocate a block memory for the eeprom write buffer */
 8001000:	4e98      	ldr	r6, [pc, #608]	; (8001264 <main+0x344>)
	err = mcp794xx_info(&mcp794xx_handler);
 8001002:	4620      	mov	r0, r4
 8001004:	f002 fad8 	bl	80035b8 <mcp794xx_info>
	mcp794xx_interface_debug_print("Chip name :\t%s\n\r", mcp794xx_handler.info.chip_name);
 8001008:	f104 0124 	add.w	r1, r4, #36	; 0x24
 800100c:	4896      	ldr	r0, [pc, #600]	; (8001268 <main+0x348>)
 800100e:	f002 fd47 	bl	8003aa0 <mcp794xx_interface_debug_print>
	mcp794xx_interface_debug_print("Manufacturer: \t%s\n\r",  mcp794xx_handler.info.manufacturer_name);
 8001012:	f104 012e 	add.w	r1, r4, #46	; 0x2e
 8001016:	4895      	ldr	r0, [pc, #596]	; (800126c <main+0x34c>)
 8001018:	f002 fd42 	bl	8003aa0 <mcp794xx_interface_debug_print>
	mcp794xx_interface_debug_print("Interface: \t%s\n\r",  mcp794xx_handler.info.interface);
 800101c:	f104 0147 	add.w	r1, r4, #71	; 0x47
 8001020:	4893      	ldr	r0, [pc, #588]	; (8001270 <main+0x350>)
 8001022:	f002 fd3d 	bl	8003aa0 <mcp794xx_interface_debug_print>
	mcp794xx_interface_debug_print("Supply voltage max : \t%0.2fV\n\r",  mcp794xx_handler.info.supply_voltage_max_v);
 8001026:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001028:	f7ff fa8e 	bl	8000548 <__aeabi_f2d>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4890      	ldr	r0, [pc, #576]	; (8001274 <main+0x354>)
 8001032:	f002 fd35 	bl	8003aa0 <mcp794xx_interface_debug_print>
	mcp794xx_interface_debug_print("Supply voltage min: \t%0.2fV\n\r",  mcp794xx_handler.info.supply_voltage_min_v);
 8001036:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001038:	f7ff fa86 	bl	8000548 <__aeabi_f2d>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	488d      	ldr	r0, [pc, #564]	; (8001278 <main+0x358>)
 8001042:	f002 fd2d 	bl	8003aa0 <mcp794xx_interface_debug_print>
	mcp794xx_interface_debug_print("Maximum current: \t%0.1fmA\n\r",  mcp794xx_handler.info.max_current_ma);
 8001046:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001048:	f7ff fa7e 	bl	8000548 <__aeabi_f2d>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	488a      	ldr	r0, [pc, #552]	; (800127c <main+0x35c>)
 8001052:	f002 fd25 	bl	8003aa0 <mcp794xx_interface_debug_print>
	mcp794xx_interface_debug_print("Temperature Max: \t%.1fC\n\r",  mcp794xx_handler.info.temperature_max);
 8001056:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001058:	f7ff fa76 	bl	8000548 <__aeabi_f2d>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4887      	ldr	r0, [pc, #540]	; (8001280 <main+0x360>)
 8001062:	f002 fd1d 	bl	8003aa0 <mcp794xx_interface_debug_print>
	mcp794xx_interface_debug_print("Temperature Min: \t%.1fC\n\r",  mcp794xx_handler.info.temperature_min);
 8001066:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001068:	f7ff fa6e 	bl	8000548 <__aeabi_f2d>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4884      	ldr	r0, [pc, #528]	; (8001284 <main+0x364>)
 8001072:	f002 fd15 	bl	8003aa0 <mcp794xx_interface_debug_print>
	mcp794xx_interface_debug_print("Driver version: \tV%.1f.%.2d\n\r", ( mcp794xx_handler.info.driver_version / 1000), (uint8_t)( mcp794xx_handler.info.driver_version - (uint8_t)( mcp794xx_handler.info.driver_version / 100)*100));
 8001076:	ed94 8a19 	vldr	s16, [r4, #100]	; 0x64
 800107a:	eddf 7a83 	vldr	s15, [pc, #524]	; 8001288 <main+0x368>
	test.state = SET_TIME_DATE;
 800107e:	4c83      	ldr	r4, [pc, #524]	; (800128c <main+0x36c>)
	mcp794xx_interface_debug_print("Driver version: \tV%.1f.%.2d\n\r", ( mcp794xx_handler.info.driver_version / 1000), (uint8_t)( mcp794xx_handler.info.driver_version - (uint8_t)( mcp794xx_handler.info.driver_version / 100)*100));
 8001080:	eec8 7a27 	vdiv.f32	s15, s16, s15
 8001084:	ee17 0a90 	vmov	r0, s15
 8001088:	f7ff fa5e 	bl	8000548 <__aeabi_f2d>
 800108c:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8001290 <main+0x370>
 8001090:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001094:	2264      	movs	r2, #100	; 0x64
 8001096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800109a:	edcd 7a05 	vstr	s15, [sp, #20]
 800109e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80010a2:	fb13 f302 	smulbb	r3, r3, r2
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ae:	4602      	mov	r2, r0
 80010b0:	ee78 7a67 	vsub.f32	s15, s16, s15
 80010b4:	4877      	ldr	r0, [pc, #476]	; (8001294 <main+0x374>)
 80010b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ba:	edcd 7a05 	vstr	s15, [sp, #20]
 80010be:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	460b      	mov	r3, r1
 80010c6:	f002 fceb 	bl	8003aa0 <mcp794xx_interface_debug_print>
	test.state = SET_TIME_DATE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	7023      	strb	r3, [r4, #0]
		switch((int)test.state)
 80010ce:	7823      	ldrb	r3, [r4, #0]
 80010d0:	2b12      	cmp	r3, #18
 80010d2:	d8fd      	bhi.n	80010d0 <main+0x1b0>
 80010d4:	a201      	add	r2, pc, #4	; (adr r2, 80010dc <main+0x1bc>)
 80010d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010da:	bf00      	nop
 80010dc:	08001129 	.word	0x08001129
 80010e0:	080010d1 	.word	0x080010d1
 80010e4:	08001143 	.word	0x08001143
 80010e8:	080011a1 	.word	0x080011a1
 80010ec:	080012f1 	.word	0x080012f1
 80010f0:	08001323 	.word	0x08001323
 80010f4:	080010d1 	.word	0x080010d1
 80010f8:	0800132f 	.word	0x0800132f
 80010fc:	080013f3 	.word	0x080013f3
 8001100:	080013b5 	.word	0x080013b5
 8001104:	08001421 	.word	0x08001421
 8001108:	0800142b 	.word	0x0800142b
 800110c:	0800146f 	.word	0x0800146f
 8001110:	08001431 	.word	0x08001431
 8001114:	080014a9 	.word	0x080014a9
 8001118:	080014c7 	.word	0x080014c7
 800111c:	080010d1 	.word	0x080010d1
 8001120:	08001375 	.word	0x08001375
 8001124:	080011f5 	.word	0x080011f5
				mcp794xx_basic_set_time_date(&default_time_date);   							/**< set rtc time and date manually */
 8001128:	485b      	ldr	r0, [pc, #364]	; (8001298 <main+0x378>)
 800112a:	f002 fb4b 	bl	80037c4 <mcp794xx_basic_set_time_date>
				mcp794xx_basic_get_compile_time_date(__TIME__, __DATE__, &compile_time_date);   /**< read and convert compile time and date to rtc time object */
 800112e:	4a5b      	ldr	r2, [pc, #364]	; (800129c <main+0x37c>)
 8001130:	495b      	ldr	r1, [pc, #364]	; (80012a0 <main+0x380>)
 8001132:	485c      	ldr	r0, [pc, #368]	; (80012a4 <main+0x384>)
 8001134:	f002 fc22 	bl	800397c <mcp794xx_basic_get_compile_time_date>
				mcp794xx_basic_set_time_date(&compile_time_date);								/**< set time and date */
 8001138:	4858      	ldr	r0, [pc, #352]	; (800129c <main+0x37c>)
 800113a:	f002 fb43 	bl	80037c4 <mcp794xx_basic_set_time_date>
				test.state = READ_TIME_AND_DATE;
 800113e:	2302      	movs	r3, #2
 8001140:	e02c      	b.n	800119c <main+0x27c>
				mcp794xx_basic_get_current_time_date(&now);				/**< read current time and date */
 8001142:	4d59      	ldr	r5, [pc, #356]	; (80012a8 <main+0x388>)
 8001144:	4628      	mov	r0, r5
 8001146:	f002 fb13 	bl	8003770 <mcp794xx_basic_get_current_time_date>
				if(now.second != previous_seconds){                     /**< print time every second */
 800114a:	4b58      	ldr	r3, [pc, #352]	; (80012ac <main+0x38c>)
 800114c:	796a      	ldrb	r2, [r5, #5]
 800114e:	7819      	ldrb	r1, [r3, #0]
 8001150:	4291      	cmp	r1, r2
 8001152:	d0bc      	beq.n	80010ce <main+0x1ae>
					mcp794xx_interface_debug_print("Time: %.2d:",now.hour);
 8001154:	78e9      	ldrb	r1, [r5, #3]
 8001156:	4856      	ldr	r0, [pc, #344]	; (80012b0 <main+0x390>)
					previous_seconds = now.second;
 8001158:	701a      	strb	r2, [r3, #0]
					mcp794xx_interface_debug_print("Time: %.2d:",now.hour);
 800115a:	f002 fca1 	bl	8003aa0 <mcp794xx_interface_debug_print>
					mcp794xx_interface_debug_print("%.2d:",now.minute);
 800115e:	7929      	ldrb	r1, [r5, #4]
 8001160:	4854      	ldr	r0, [pc, #336]	; (80012b4 <main+0x394>)
 8001162:	f002 fc9d 	bl	8003aa0 <mcp794xx_interface_debug_print>
					mcp794xx_interface_debug_print("%.2d",now.second);
 8001166:	7969      	ldrb	r1, [r5, #5]
 8001168:	4853      	ldr	r0, [pc, #332]	; (80012b8 <main+0x398>)
 800116a:	f002 fc99 	bl	8003aa0 <mcp794xx_interface_debug_print>
					mcp794xx_interface_debug_print("\r\ndate: %s",week_days_arr[now.weekDay]);
 800116e:	79ea      	ldrb	r2, [r5, #7]
 8001170:	4b52      	ldr	r3, [pc, #328]	; (80012bc <main+0x39c>)
 8001172:	4853      	ldr	r0, [pc, #332]	; (80012c0 <main+0x3a0>)
 8001174:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001178:	f002 fc92 	bl	8003aa0 <mcp794xx_interface_debug_print>
					mcp794xx_interface_debug_print(" %.2d",now.date);
 800117c:	78a9      	ldrb	r1, [r5, #2]
 800117e:	4851      	ldr	r0, [pc, #324]	; (80012c4 <main+0x3a4>)
 8001180:	f002 fc8e 	bl	8003aa0 <mcp794xx_interface_debug_print>
					mcp794xx_interface_debug_print(" %s",months_array[now.month]);
 8001184:	4b50      	ldr	r3, [pc, #320]	; (80012c8 <main+0x3a8>)
 8001186:	79aa      	ldrb	r2, [r5, #6]
 8001188:	4850      	ldr	r0, [pc, #320]	; (80012cc <main+0x3ac>)
 800118a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800118e:	f002 fc87 	bl	8003aa0 <mcp794xx_interface_debug_print>
					mcp794xx_interface_debug_print(" %d \n\r",now.year);
 8001192:	8829      	ldrh	r1, [r5, #0]
 8001194:	484e      	ldr	r0, [pc, #312]	; (80012d0 <main+0x3b0>)
 8001196:	f002 fc83 	bl	8003aa0 <mcp794xx_interface_debug_print>
					test.state = COUNTDOWN_TIMER;
 800119a:	2312      	movs	r3, #18
				test.state = READ_TIME_AND_DATE;
 800119c:	7023      	strb	r3, [r4, #0]
				break;
 800119e:	e796      	b.n	80010ce <main+0x1ae>
				if(set_alarm_status == false)
 80011a0:	4b4c      	ldr	r3, [pc, #304]	; (80012d4 <main+0x3b4>)
 80011a2:	781d      	ldrb	r5, [r3, #0]
 80011a4:	b9b5      	cbnz	r5, 80011d4 <main+0x2b4>
					set_alarm_status = true;
 80011a6:	2201      	movs	r2, #1
					mcp794xx_basic_get_alarm_time_date(MCP794XX_ALARM0, &alarm_mask, &alarm);     							/**< read alarm time, date and alarm mask set(this operation is not necessary when setting alarm) */
 80011a8:	f8df 8140 	ldr.w	r8, [pc, #320]	; 80012ec <main+0x3cc>
					set_alarm_status = true;
 80011ac:	701a      	strb	r2, [r3, #0]
					mcp794xx_basic_enable_alarm(MCP794XX_ALARM0, MCP794XX_INT_POLARITY_LOW);								/**< enable alarm 0 and set interrupt output polarity logic low*/
 80011ae:	4629      	mov	r1, r5
 80011b0:	4628      	mov	r0, r5
 80011b2:	f002 fb39 	bl	8003828 <mcp794xx_basic_enable_alarm>
					mcp794xx_basic_set_alarm_time_date(MCP794XX_ALARM0, MCP794XX_MASK_HOURS, &alarm_default_time);			/**< set hour alarm (alarm will fire an interrupt when hour match) */
 80011b6:	4a48      	ldr	r2, [pc, #288]	; (80012d8 <main+0x3b8>)
 80011b8:	2102      	movs	r1, #2
 80011ba:	4628      	mov	r0, r5
 80011bc:	f002 fb4a 	bl	8003854 <mcp794xx_basic_set_alarm_time_date>
					mcp794xx_basic_get_alarm_time_date(MCP794XX_ALARM0, &alarm_mask, &alarm);     							/**< read alarm time, date and alarm mask set(this operation is not necessary when setting alarm) */
 80011c0:	4946      	ldr	r1, [pc, #280]	; (80012dc <main+0x3bc>)
 80011c2:	4642      	mov	r2, r8
 80011c4:	4628      	mov	r0, r5
 80011c6:	f002 fb63 	bl	8003890 <mcp794xx_basic_get_alarm_time_date>
					mcp794xx_interface_debug_print("alarm time: %.2d:",alarm.hour);											/**< print time and date set*/
 80011ca:	f898 1003 	ldrb.w	r1, [r8, #3]
 80011ce:	4844      	ldr	r0, [pc, #272]	; (80012e0 <main+0x3c0>)
 80011d0:	f002 fc66 	bl	8003aa0 <mcp794xx_interface_debug_print>
               mcp794xx_basic_get_alarm_interrupt_flag(MCP794XX_ALARM0, &alarm_flag);       								/**< read alarm interrupt flag */
 80011d4:	4d43      	ldr	r5, [pc, #268]	; (80012e4 <main+0x3c4>)
 80011d6:	2000      	movs	r0, #0
 80011d8:	4629      	mov	r1, r5
 80011da:	f002 fb67 	bl	80038ac <mcp794xx_basic_get_alarm_interrupt_flag>
			   if(alarm_flag == 1)    																						/**< this routine should be executed inside the external interrupt callback function */
 80011de:	782b      	ldrb	r3, [r5, #0]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d1ac      	bne.n	800113e <main+0x21e>
				   HAL_GPIO_TogglePin(user_led_GPIO_Port, user_led_Pin);													/**< toggle user led for debug purposes */
 80011e4:	4816      	ldr	r0, [pc, #88]	; (8001240 <main+0x320>)
 80011e6:	2108      	movs	r1, #8
 80011e8:	f002 fdef 	bl	8003dca <HAL_GPIO_TogglePin>
				   mcp794xx_basic_clr_alarm_interrupt_flag(MCP794XX_ALARM0);												/**< clear alarm time flag (note that if time still match alarm flag will be held) */
 80011ec:	2000      	movs	r0, #0
 80011ee:	f002 fb6b 	bl	80038c8 <mcp794xx_basic_clr_alarm_interrupt_flag>
			   test.state = READ_TIME_AND_DATE;
 80011f2:	e7a4      	b.n	800113e <main+0x21e>
				if(set_alarm_status == false)
 80011f4:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <main+0x3b4>)
 80011f6:	781d      	ldrb	r5, [r3, #0]
 80011f8:	b93d      	cbnz	r5, 800120a <main+0x2ea>
					set_alarm_status = true;
 80011fa:	2201      	movs	r2, #1
 80011fc:	701a      	strb	r2, [r3, #0]
					mcp794xx_basic_enable_countdown_interrupt();							/**< enable count down timer interrupt (this routine uses ALARM1) and generate an interrupt when time expires*/
 80011fe:	f002 fb6f 	bl	80038e0 <mcp794xx_basic_enable_countdown_interrupt>
					mcp794xx_basic_set_countdown_time(5, MCP794XX_CNTDWN_SECONDS);			/**< set count down time, fires an interrupt every 5 sec(this routine will disable ALARM0)*/
 8001202:	4629      	mov	r1, r5
 8001204:	2005      	movs	r0, #5
 8001206:	f002 fb77 	bl	80038f8 <mcp794xx_basic_set_countdown_time>
				mcp794xx_basic_get_alarm_interrupt_flag(MCP794XX_ALARM1, &alarm_flag);      /**< read alarm interrupt flag */
 800120a:	4d36      	ldr	r5, [pc, #216]	; (80012e4 <main+0x3c4>)
 800120c:	2001      	movs	r0, #1
 800120e:	4629      	mov	r1, r5
 8001210:	f002 fb4c 	bl	80038ac <mcp794xx_basic_get_alarm_interrupt_flag>
				mcp794xx_interface_debug_print("flag %d\n", alarm_flag);
 8001214:	7829      	ldrb	r1, [r5, #0]
 8001216:	4834      	ldr	r0, [pc, #208]	; (80012e8 <main+0x3c8>)
 8001218:	f002 fc42 	bl	8003aa0 <mcp794xx_interface_debug_print>
				if(alarm_flag == 1)
 800121c:	782d      	ldrb	r5, [r5, #0]
 800121e:	2d01      	cmp	r5, #1
 8001220:	d18d      	bne.n	800113e <main+0x21e>
					HAL_GPIO_TogglePin(user_led_GPIO_Port, user_led_Pin);					/**< toggle user led for debug purposes  (not advisable to call this function within a interrupt callback function) */
 8001222:	2108      	movs	r1, #8
 8001224:	4806      	ldr	r0, [pc, #24]	; (8001240 <main+0x320>)
 8001226:	f002 fdd0 	bl	8003dca <HAL_GPIO_TogglePin>
					mcp794xx_basic_clr_alarm_interrupt_flag(MCP794XX_ALARM1);				/**< clear interrupt flag */
 800122a:	4628      	mov	r0, r5
 800122c:	f002 fb4c 	bl	80038c8 <mcp794xx_basic_clr_alarm_interrupt_flag>
					mcp794xx_basic_set_countdown_time(5, MCP794XX_CNTDWN_SECONDS);			/**< reload time in register every when count down expires  (not advisable to call this function within a interrupt callback function)*/
 8001230:	2100      	movs	r1, #0
 8001232:	2005      	movs	r0, #5
 8001234:	f002 fb60 	bl	80038f8 <mcp794xx_basic_set_countdown_time>
 8001238:	e781      	b.n	800113e <main+0x21e>
 800123a:	bf00      	nop
 800123c:	40021000 	.word	0x40021000
 8001240:	48000400 	.word	0x48000400
 8001244:	20000234 	.word	0x20000234
 8001248:	40005400 	.word	0x40005400
 800124c:	00707cbb 	.word	0x00707cbb
 8001250:	20000288 	.word	0x20000288
 8001254:	40004400 	.word	0x40004400
 8001258:	08008600 	.word	0x08008600
 800125c:	2000030c 	.word	0x2000030c
 8001260:	20000230 	.word	0x20000230
 8001264:	20000390 	.word	0x20000390
 8001268:	08008623 	.word	0x08008623
 800126c:	08008634 	.word	0x08008634
 8001270:	08008648 	.word	0x08008648
 8001274:	08008659 	.word	0x08008659
 8001278:	08008678 	.word	0x08008678
 800127c:	08008696 	.word	0x08008696
 8001280:	080086b2 	.word	0x080086b2
 8001284:	080086cc 	.word	0x080086cc
 8001288:	447a0000 	.word	0x447a0000
 800128c:	200003ae 	.word	0x200003ae
 8001290:	42c80000 	.word	0x42c80000
 8001294:	080086e6 	.word	0x080086e6
 8001298:	2000000a 	.word	0x2000000a
 800129c:	20000218 	.word	0x20000218
 80012a0:	08008704 	.word	0x08008704
 80012a4:	08008710 	.word	0x08008710
 80012a8:	20000380 	.word	0x20000380
 80012ac:	200003a0 	.word	0x200003a0
 80012b0:	08008719 	.word	0x08008719
 80012b4:	0800871f 	.word	0x0800871f
 80012b8:	08008731 	.word	0x08008731
 80012bc:	08008900 	.word	0x08008900
 80012c0:	08008725 	.word	0x08008725
 80012c4:	08008730 	.word	0x08008730
 80012c8:	080088cc 	.word	0x080088cc
 80012cc:	0800872c 	.word	0x0800872c
 80012d0:	08008736 	.word	0x08008736
 80012d4:	200003ad 	.word	0x200003ad
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20000217 	.word	0x20000217
 80012e0:	0800873d 	.word	0x0800873d
 80012e4:	20000216 	.word	0x20000216
 80012e8:	0800874f 	.word	0x0800874f
 80012ec:	2000020c 	.word	0x2000020c
				if(pwr_fail_read == false)   /**< !! make sure power fail time stamp is read before any other instruction clears existing data (must be called before setting time at start up !! */
 80012f0:	4b7b      	ldr	r3, [pc, #492]	; (80014e0 <main+0x5c0>)
 80012f2:	781a      	ldrb	r2, [r3, #0]
 80012f4:	b932      	cbnz	r2, 8001304 <main+0x3e4>
					mcp794xx_basic_get_pwr_fail_time_stamp(MCP794XX_PWR_UP_TIME_STAMP, &pwr_fail);           /**< read power fail time stamp */
 80012f6:	497b      	ldr	r1, [pc, #492]	; (80014e4 <main+0x5c4>)
					pwr_fail_read = true;
 80012f8:	2001      	movs	r0, #1
 80012fa:	7018      	strb	r0, [r3, #0]
					mcp794xx_basic_get_pwr_fail_time_stamp(MCP794XX_PWR_UP_TIME_STAMP, &pwr_fail);           /**< read power fail time stamp */
 80012fc:	f002 fa74 	bl	80037e8 <mcp794xx_basic_get_pwr_fail_time_stamp>
					mcp794xx_basic_enable_ext_batt_bckup_pwr();											     /**< enable back up power for future power fail event (calling this function will clear power fail time stamp event) */
 8001300:	f002 fa86 	bl	8003810 <mcp794xx_basic_enable_ext_batt_bckup_pwr>
				mcp794xx_interface_debug_print("pwr fail:%.2d:",pwr_fail.hour);
 8001304:	4d77      	ldr	r5, [pc, #476]	; (80014e4 <main+0x5c4>)
 8001306:	4878      	ldr	r0, [pc, #480]	; (80014e8 <main+0x5c8>)
 8001308:	78e9      	ldrb	r1, [r5, #3]
 800130a:	f002 fbc9 	bl	8003aa0 <mcp794xx_interface_debug_print>
				mcp794xx_interface_debug_print("%.2d - ",pwr_fail.minute);
 800130e:	7929      	ldrb	r1, [r5, #4]
 8001310:	4876      	ldr	r0, [pc, #472]	; (80014ec <main+0x5cc>)
 8001312:	f002 fbc5 	bl	8003aa0 <mcp794xx_interface_debug_print>
				mcp794xx_interface_debug_print("%.2d\r\n",pwr_fail.time_Format);
 8001316:	7a29      	ldrb	r1, [r5, #8]
 8001318:	4875      	ldr	r0, [pc, #468]	; (80014f0 <main+0x5d0>)
 800131a:	f002 fbc1 	bl	8003aa0 <mcp794xx_interface_debug_print>
				test.state = SET_TIME_DATE;
 800131e:	2300      	movs	r3, #0
 8001320:	e73c      	b.n	800119c <main+0x27c>
				mcp794xx_basic_enable_sqr_wave_output();									/**< enable frequency output */
 8001322:	f002 faf7 	bl	8003914 <mcp794xx_basic_enable_sqr_wave_output>
				mcp94xx_basic_set_sqr_wave_output_freq(MCP794XX_SQR_FREQ_SELCET_4_096KHZ);	/**< set frequency output value */
 8001326:	2001      	movs	r0, #1
 8001328:	f002 fb00 	bl	800392c <mcp94xx_basic_set_sqr_wave_output_freq>
				break;
 800132c:	e6cf      	b.n	80010ce <main+0x1ae>
				mcp794xx_basic_convert_time_to_epoch_unix_time(&now, (uint32_t *)&epoch_time);              /**< convert current time and date to epoch unix time (local time) */
 800132e:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8001520 <main+0x600>
				mcp794xx_basic_convert_epoch_to_human_time_format(epoch_time, &epoch_t);                    /**< convert epoch time format to human readable format*/
 8001332:	4d70      	ldr	r5, [pc, #448]	; (80014f4 <main+0x5d4>)
				mcp794xx_basic_convert_time_to_epoch_unix_time(&now, (uint32_t *)&epoch_time);              /**< convert current time and date to epoch unix time (local time) */
 8001334:	4870      	ldr	r0, [pc, #448]	; (80014f8 <main+0x5d8>)
 8001336:	4641      	mov	r1, r8
 8001338:	f002 fb04 	bl	8003944 <mcp794xx_basic_convert_time_to_epoch_unix_time>
				mcp794xx_interface_debug_print("time date: %lu\r\n",epoch_time);
 800133c:	f8d8 1000 	ldr.w	r1, [r8]
 8001340:	486e      	ldr	r0, [pc, #440]	; (80014fc <main+0x5dc>)
 8001342:	f002 fbad 	bl	8003aa0 <mcp794xx_interface_debug_print>
				mcp794xx_basic_convert_epoch_to_human_time_format(epoch_time, &epoch_t);                    /**< convert epoch time format to human readable format*/
 8001346:	4629      	mov	r1, r5
 8001348:	f8d8 0000 	ldr.w	r0, [r8]
 800134c:	f002 fb08 	bl	8003960 <mcp794xx_basic_convert_epoch_to_human_time_format>
				mcp794xx_interface_debug_print("epoch current tm: %d-%d-%d  %02d:%02d:%02d, %s\n\r", epoch_t.year, epoch_t.month, epoch_t.date, epoch_t.hour, epoch_t.minute, epoch_t.second, week_days_arr[epoch_t.weekDay]);
 8001350:	79ea      	ldrb	r2, [r5, #7]
 8001352:	4b6b      	ldr	r3, [pc, #428]	; (8001500 <main+0x5e0>)
 8001354:	486b      	ldr	r0, [pc, #428]	; (8001504 <main+0x5e4>)
 8001356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800135a:	9303      	str	r3, [sp, #12]
 800135c:	796b      	ldrb	r3, [r5, #5]
 800135e:	9302      	str	r3, [sp, #8]
 8001360:	792b      	ldrb	r3, [r5, #4]
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	78eb      	ldrb	r3, [r5, #3]
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	78ab      	ldrb	r3, [r5, #2]
 800136a:	79aa      	ldrb	r2, [r5, #6]
 800136c:	8829      	ldrh	r1, [r5, #0]
 800136e:	f002 fb97 	bl	8003aa0 <mcp794xx_interface_debug_print>
				test.state = READ_TIME_AND_DATE;
 8001372:	e6e4      	b.n	800113e <main+0x21e>
				pUnique_id = (uint8_t *)calloc(UID_MAX_LENGTH, sizeof(uint8_t));     	  /**< allocate memory for data to read */
 8001374:	2101      	movs	r1, #1
 8001376:	2008      	movs	r0, #8
 8001378:	f004 f8d4 	bl	8005524 <calloc>
 800137c:	4d62      	ldr	r5, [pc, #392]	; (8001508 <main+0x5e8>)
 800137e:	6028      	str	r0, [r5, #0]
				if(pUnique_id == NULL)
 8001380:	b910      	cbnz	r0, 8001388 <main+0x468>
					mcp794xx_interface_debug_print("failed to allocate memory\n\r");
 8001382:	4862      	ldr	r0, [pc, #392]	; (800150c <main+0x5ec>)
 8001384:	f002 fb8c 	bl	8003aa0 <mcp794xx_interface_debug_print>
                mcp794xx_basic_uid_read((uint8_t*)pUnique_id);                            /**< read device unique identifier */
 8001388:	6828      	ldr	r0, [r5, #0]
                    mcp794xx_interface_debug_print("%.2p :",pUnique_id[index]);
 800138a:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8001530 <main+0x610>
                mcp794xx_basic_uid_read((uint8_t*)pUnique_id);                            /**< read device unique identifier */
 800138e:	f002 fb39 	bl	8003a04 <mcp794xx_basic_uid_read>
                for(int index = 0; index < UID_MAX_LENGTH; index++){					  /*< print id */
 8001392:	f04f 0800 	mov.w	r8, #0
                    mcp794xx_interface_debug_print("%.2p :",pUnique_id[index]);
 8001396:	682b      	ldr	r3, [r5, #0]
 8001398:	4648      	mov	r0, r9
 800139a:	f813 1008 	ldrb.w	r1, [r3, r8]
                for(int index = 0; index < UID_MAX_LENGTH; index++){					  /*< print id */
 800139e:	f108 0801 	add.w	r8, r8, #1
                    mcp794xx_interface_debug_print("%.2p :",pUnique_id[index]);
 80013a2:	f002 fb7d 	bl	8003aa0 <mcp794xx_interface_debug_print>
                for(int index = 0; index < UID_MAX_LENGTH; index++){					  /*< print id */
 80013a6:	f1b8 0f08 	cmp.w	r8, #8
 80013aa:	d1f4      	bne.n	8001396 <main+0x476>
				free(pEeprom_data_read);
 80013ac:	6828      	ldr	r0, [r5, #0]
				free(pEeprom_data_write);          													  /**< allocated memory */
 80013ae:	f004 f8f3 	bl	8005598 <free>
				break;
 80013b2:	e68c      	b.n	80010ce <main+0x1ae>
				pSram_data_read = (uint8_t *)calloc(SRAM_MEMORY_SIZE, sizeof(uint8_t));     						  /**< allocate memory for data to read */
 80013b4:	2101      	movs	r1, #1
 80013b6:	2040      	movs	r0, #64	; 0x40
 80013b8:	f004 f8b4 	bl	8005524 <calloc>
 80013bc:	4d54      	ldr	r5, [pc, #336]	; (8001510 <main+0x5f0>)
 80013be:	6028      	str	r0, [r5, #0]
				if(pSram_data_read == NULL)
 80013c0:	b910      	cbnz	r0, 80013c8 <main+0x4a8>
					mcp794xx_interface_debug_print("failed to allocate memory\n\r");
 80013c2:	4852      	ldr	r0, [pc, #328]	; (800150c <main+0x5ec>)
 80013c4:	f002 fb6c 	bl	8003aa0 <mcp794xx_interface_debug_print>
				mcp794xx_basic_sram_read_byte(SRAM_FIRST_ADDRESS, (uint8_t *)pSram_data_read, SRAM_MEMORY_SIZE);      /**< read the whole sram memory, starting from first address (0x20) */
 80013c8:	6829      	ldr	r1, [r5, #0]
					mcp794xx_interface_debug_print("%.2p ",pSram_data_read[index]);
 80013ca:	f8df 9168 	ldr.w	r9, [pc, #360]	; 8001534 <main+0x614>
				mcp794xx_basic_sram_read_byte(SRAM_FIRST_ADDRESS, (uint8_t *)pSram_data_read, SRAM_MEMORY_SIZE);      /**< read the whole sram memory, starting from first address (0x20) */
 80013ce:	2240      	movs	r2, #64	; 0x40
 80013d0:	2020      	movs	r0, #32
 80013d2:	f002 faef 	bl	80039b4 <mcp794xx_basic_sram_read_byte>
				for(int index = 0; index < SRAM_MEMORY_SIZE; index++){
 80013d6:	f04f 0800 	mov.w	r8, #0
					mcp794xx_interface_debug_print("%.2p ",pSram_data_read[index]);
 80013da:	682b      	ldr	r3, [r5, #0]
 80013dc:	4648      	mov	r0, r9
 80013de:	f813 1008 	ldrb.w	r1, [r3, r8]
				for(int index = 0; index < SRAM_MEMORY_SIZE; index++){
 80013e2:	f108 0801 	add.w	r8, r8, #1
					mcp794xx_interface_debug_print("%.2p ",pSram_data_read[index]);
 80013e6:	f002 fb5b 	bl	8003aa0 <mcp794xx_interface_debug_print>
				for(int index = 0; index < SRAM_MEMORY_SIZE; index++){
 80013ea:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
 80013ee:	d1f4      	bne.n	80013da <main+0x4ba>
 80013f0:	e7dc      	b.n	80013ac <main+0x48c>
				pSram_data_write = (uint8_t *)calloc(SRAM_MEMORY_SIZE, sizeof(uint8_t));     /**< allocate memory for data to written */
 80013f2:	2101      	movs	r1, #1
 80013f4:	2040      	movs	r0, #64	; 0x40
 80013f6:	f004 f895 	bl	8005524 <calloc>
 80013fa:	4d46      	ldr	r5, [pc, #280]	; (8001514 <main+0x5f4>)
 80013fc:	6028      	str	r0, [r5, #0]
				if(pSram_data_write == NULL)
 80013fe:	b910      	cbnz	r0, 8001406 <main+0x4e6>
					mcp794xx_interface_debug_print("failed to allocate memory\n\r");
 8001400:	4842      	ldr	r0, [pc, #264]	; (800150c <main+0x5ec>)
 8001402:	f002 fb4d 	bl	8003aa0 <mcp794xx_interface_debug_print>
				memcpy((uint8_t *)pSram_data_write, (uint8_t *)pUnique_id, UID_MAX_LENGTH);   /**< copy UID and write it to sram */
 8001406:	4b40      	ldr	r3, [pc, #256]	; (8001508 <main+0x5e8>)
 8001408:	682a      	ldr	r2, [r5, #0]
 800140a:	6819      	ldr	r1, [r3, #0]
 800140c:	680b      	ldr	r3, [r1, #0]
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	684b      	ldr	r3, [r1, #4]
 8001412:	6053      	str	r3, [r2, #4]
				mcp794xx_basic_sram_write_byte(SRAM_FIRST_ADDRESS, (uint8_t *)pSram_data_write, UID_MAX_LENGTH);   /**< write data starting from sram first address */
 8001414:	6829      	ldr	r1, [r5, #0]
 8001416:	2208      	movs	r2, #8
 8001418:	2020      	movs	r0, #32
 800141a:	f002 fabd 	bl	8003998 <mcp794xx_basic_sram_write_byte>
				free(pSram_data_write);
 800141e:	e7c5      	b.n	80013ac <main+0x48c>
				mcp794xx_basic_sram_erase_selector(0x20, 0x23);             				 /**< erase sram data from address 0x20 - 0x23 */
 8001420:	2123      	movs	r1, #35	; 0x23
 8001422:	2020      	movs	r0, #32
 8001424:	f002 fad4 	bl	80039d0 <mcp794xx_basic_sram_erase_selector>
				break;
 8001428:	e651      	b.n	80010ce <main+0x1ae>
				mcp794xx_basic_sram_wipe();													/**< wipe the whole sram memory */
 800142a:	f002 fadf 	bl	80039ec <mcp794xx_basic_sram_wipe>
				break;
 800142e:	e64e      	b.n	80010ce <main+0x1ae>
				pEeprom_data_read = (uint8_t *)calloc(EEPROM_MEMORY_SIZE, sizeof(uint8_t));     						  /**< allocate memory for data to read */
 8001430:	2101      	movs	r1, #1
 8001432:	2080      	movs	r0, #128	; 0x80
 8001434:	f004 f876 	bl	8005524 <calloc>
 8001438:	4d37      	ldr	r5, [pc, #220]	; (8001518 <main+0x5f8>)
 800143a:	6028      	str	r0, [r5, #0]
				if(pEeprom_data_read == NULL)
 800143c:	b910      	cbnz	r0, 8001444 <main+0x524>
					mcp794xx_interface_debug_print("failed to allocate memory\n\r");
 800143e:	4833      	ldr	r0, [pc, #204]	; (800150c <main+0x5ec>)
 8001440:	f002 fb2e 	bl	8003aa0 <mcp794xx_interface_debug_print>
				mcp794xx_basic_eeprom_read_byte(EEPROM_LOWEST_ADDRESS, (uint8_t *)pEeprom_data_read, EEPROM_PAGE_SIZE);   /**< read the 8 byte starting from address 0x00 */
 8001444:	6829      	ldr	r1, [r5, #0]
					mcp794xx_interface_debug_print("%.2p ", pEeprom_data_read[index]);
 8001446:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8001534 <main+0x614>
				mcp794xx_basic_eeprom_read_byte(EEPROM_LOWEST_ADDRESS, (uint8_t *)pEeprom_data_read, EEPROM_PAGE_SIZE);   /**< read the 8 byte starting from address 0x00 */
 800144a:	2208      	movs	r2, #8
 800144c:	2000      	movs	r0, #0
 800144e:	f002 faf3 	bl	8003a38 <mcp794xx_basic_eeprom_read_byte>
				for(int index = 0; index < EEPROM_PAGE_SIZE ; index++){
 8001452:	f04f 0800 	mov.w	r8, #0
					mcp794xx_interface_debug_print("%.2p ", pEeprom_data_read[index]);
 8001456:	682b      	ldr	r3, [r5, #0]
 8001458:	4648      	mov	r0, r9
 800145a:	f813 1008 	ldrb.w	r1, [r3, r8]
				for(int index = 0; index < EEPROM_PAGE_SIZE ; index++){
 800145e:	f108 0801 	add.w	r8, r8, #1
					mcp794xx_interface_debug_print("%.2p ", pEeprom_data_read[index]);
 8001462:	f002 fb1d 	bl	8003aa0 <mcp794xx_interface_debug_print>
				for(int index = 0; index < EEPROM_PAGE_SIZE ; index++){
 8001466:	f1b8 0f08 	cmp.w	r8, #8
 800146a:	d1f4      	bne.n	8001456 <main+0x536>
 800146c:	e79e      	b.n	80013ac <main+0x48c>
				pEeprom_data_write = (uint8_t *)calloc(EEPROM_PAGE_SIZE, sizeof(uint8_t));         /**< allocate a block memory for the eeprom write buffer */
 800146e:	2101      	movs	r1, #1
 8001470:	2008      	movs	r0, #8
 8001472:	f004 f857 	bl	8005524 <calloc>
 8001476:	6030      	str	r0, [r6, #0]
				if(pEeprom_data_write == NULL)
 8001478:	b910      	cbnz	r0, 8001480 <main+0x560>
					mcp794xx_interface_debug_print("failed to allocate dynamic memory\n\r");
 800147a:	4828      	ldr	r0, [pc, #160]	; (800151c <main+0x5fc>)
 800147c:	f002 fb10 	bl	8003aa0 <mcp794xx_interface_debug_print>
					mcp794xx_interface_debug_print("to write :%.2p\n\r", pEeprom_data_write[index]);
 8001480:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8001538 <main+0x618>
				for(int index = 0; index < EEPROM_PAGE_SIZE ; index++){
 8001484:	2500      	movs	r5, #0
					pEeprom_data_write[index] = index;
 8001486:	6833      	ldr	r3, [r6, #0]
 8001488:	555d      	strb	r5, [r3, r5]
					mcp794xx_interface_debug_print("to write :%.2p\n\r", pEeprom_data_write[index]);
 800148a:	6833      	ldr	r3, [r6, #0]
 800148c:	4640      	mov	r0, r8
 800148e:	5d59      	ldrb	r1, [r3, r5]
				for(int index = 0; index < EEPROM_PAGE_SIZE; index++){                          					  /**< fill the first few byte of the memory 0 - 10 */
 8001490:	3501      	adds	r5, #1
					mcp794xx_interface_debug_print("to write :%.2p\n\r", pEeprom_data_write[index]);
 8001492:	f002 fb05 	bl	8003aa0 <mcp794xx_interface_debug_print>
				for(int index = 0; index < EEPROM_PAGE_SIZE; index++){                          					  /**< fill the first few byte of the memory 0 - 10 */
 8001496:	2d08      	cmp	r5, #8
 8001498:	d1f5      	bne.n	8001486 <main+0x566>
				mcp794xx_basic_eeprom_write_byte(0x00, (uint8_t *)pEeprom_data_write, EEPROM_PAGE_SIZE);      		  /**< write the first 8 bytes address (keep in mind the 5ms Write Cycle Time before attempt to read back written data)*/
 800149a:	6831      	ldr	r1, [r6, #0]
 800149c:	462a      	mov	r2, r5
 800149e:	2000      	movs	r0, #0
 80014a0:	f002 fabc 	bl	8003a1c <mcp794xx_basic_eeprom_write_byte>
				free(pEeprom_data_write);          													  /**< allocated memory */
 80014a4:	6830      	ldr	r0, [r6, #0]
 80014a6:	e782      	b.n	80013ae <main+0x48e>
				mcp794xx_basic_convert_time_to_epoch_unix_time(&now, (uint32_t *)&epoch_time);   	  /**< convert current time stamp to epoch Unix time */
 80014a8:	491d      	ldr	r1, [pc, #116]	; (8001520 <main+0x600>)
 80014aa:	4813      	ldr	r0, [pc, #76]	; (80014f8 <main+0x5d8>)
 80014ac:	f002 fa4a 	bl	8003944 <mcp794xx_basic_convert_time_to_epoch_unix_time>
				err = mcp794xx_basic_eeprom_put_byte(0x00, (uint32_t*)&epoch_time, 4);  		      /**< store converted epoch time into eeprom from address 0x00, knowing that it is always a 4 bytes long number */
 80014b0:	491b      	ldr	r1, [pc, #108]	; (8001520 <main+0x600>)
 80014b2:	2204      	movs	r2, #4
 80014b4:	2000      	movs	r0, #0
 80014b6:	f002 facd 	bl	8003a54 <mcp794xx_basic_eeprom_put_byte>
 80014ba:	4601      	mov	r1, r0
				mcp794xx_interface_debug_print("err code: %d\n\r",err);
 80014bc:	4819      	ldr	r0, [pc, #100]	; (8001524 <main+0x604>)
 80014be:	f002 faef 	bl	8003aa0 <mcp794xx_interface_debug_print>
				test.state = GET_EEPROM;
 80014c2:	230f      	movs	r3, #15
 80014c4:	e66a      	b.n	800119c <main+0x27c>
				mcp794xx_interface_delay_ms(5);														/**< wait 5ms before read */
 80014c6:	2005      	movs	r0, #5
 80014c8:	f002 fae8 	bl	8003a9c <mcp794xx_interface_delay_ms>
				mcp794xx_basic_eeprom_get_byte(0x00, (uint32_t*)&epoch_time_read, 4);				/**<  read epoch time written in previous state */
 80014cc:	4916      	ldr	r1, [pc, #88]	; (8001528 <main+0x608>)
 80014ce:	2204      	movs	r2, #4
 80014d0:	2000      	movs	r0, #0
 80014d2:	f002 facd 	bl	8003a70 <mcp794xx_basic_eeprom_get_byte>
				mcp794xx_interface_debug_print("eeprom get: %lu\n\r",epoch_time_read);
 80014d6:	6839      	ldr	r1, [r7, #0]
 80014d8:	4814      	ldr	r0, [pc, #80]	; (800152c <main+0x60c>)
 80014da:	f002 fae1 	bl	8003aa0 <mcp794xx_interface_debug_print>
 80014de:	e62e      	b.n	800113e <main+0x21e>
 80014e0:	200003ac 	.word	0x200003ac
 80014e4:	200003a2 	.word	0x200003a2
 80014e8:	08008758 	.word	0x08008758
 80014ec:	08008767 	.word	0x08008767
 80014f0:	0800876f 	.word	0x0800876f
 80014f4:	20000222 	.word	0x20000222
 80014f8:	20000380 	.word	0x20000380
 80014fc:	08008776 	.word	0x08008776
 8001500:	08008900 	.word	0x08008900
 8001504:	08008787 	.word	0x08008787
 8001508:	2000039c 	.word	0x2000039c
 800150c:	080087b8 	.word	0x080087b8
 8001510:	20000394 	.word	0x20000394
 8001514:	20000398 	.word	0x20000398
 8001518:	2000038c 	.word	0x2000038c
 800151c:	080087e1 	.word	0x080087e1
 8001520:	2000022c 	.word	0x2000022c
 8001524:	08008816 	.word	0x08008816
 8001528:	20000230 	.word	0x20000230
 800152c:	08008825 	.word	0x08008825
 8001530:	080087d4 	.word	0x080087d4
 8001534:	080087db 	.word	0x080087db
 8001538:	08008805 	.word	0x08008805

0800153c <serial_print>:
{
 800153c:	460a      	mov	r2, r1
  HAL_UART_Transmit(&huart2, (const uint8_t *)pString, u8Length, HAL_MAX_DELAY);
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
 8001542:	4601      	mov	r1, r0
 8001544:	4801      	ldr	r0, [pc, #4]	; (800154c <serial_print+0x10>)
 8001546:	f003 bf2d 	b.w	80053a4 <HAL_UART_Transmit>
 800154a:	bf00      	nop
 800154c:	20000288 	.word	0x20000288

08001550 <i2c_write>:
{
 8001550:	b507      	push	{r0, r1, r2, lr}
 8001552:	4613      	mov	r3, r2
	err = HAL_I2C_Master_Transmit(&hi2c1, (addr << 1), (uint8_t *)buf, len, 1000);
 8001554:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001558:	9200      	str	r2, [sp, #0]
 800155a:	460a      	mov	r2, r1
 800155c:	0041      	lsls	r1, r0, #1
 800155e:	4803      	ldr	r0, [pc, #12]	; (800156c <i2c_write+0x1c>)
 8001560:	f002 fdfa 	bl	8004158 <HAL_I2C_Master_Transmit>
}
 8001564:	b003      	add	sp, #12
 8001566:	f85d fb04 	ldr.w	pc, [sp], #4
 800156a:	bf00      	nop
 800156c:	20000234 	.word	0x20000234

08001570 <i2c_read>:
{
 8001570:	b507      	push	{r0, r1, r2, lr}
 8001572:	4613      	mov	r3, r2
	err = HAL_I2C_Master_Receive(&hi2c1, (addr << 1), (uint8_t *)buf, len, 1000);
 8001574:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001578:	9200      	str	r2, [sp, #0]
 800157a:	460a      	mov	r2, r1
 800157c:	0041      	lsls	r1, r0, #1
 800157e:	4803      	ldr	r0, [pc, #12]	; (800158c <i2c_read+0x1c>)
 8001580:	f002 fe80 	bl	8004284 <HAL_I2C_Master_Receive>
}
 8001584:	b003      	add	sp, #12
 8001586:	f85d fb04 	ldr.w	pc, [sp], #4
 800158a:	bf00      	nop
 800158c:	20000234 	.word	0x20000234

08001590 <Error_Handler>:
 8001590:	b672      	cpsid	i
  while (1)
 8001592:	e7fe      	b.n	8001592 <Error_Handler+0x2>

08001594 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_MspInit+0x2c>)
 8001596:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001598:	f042 0201 	orr.w	r2, r2, #1
 800159c:	661a      	str	r2, [r3, #96]	; 0x60
 800159e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80015a0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a2:	f002 0201 	and.w	r2, r2, #1
 80015a6:	9200      	str	r2, [sp, #0]
 80015a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015b0:	659a      	str	r2, [r3, #88]	; 0x58
 80015b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015bc:	b002      	add	sp, #8
 80015be:	4770      	bx	lr
 80015c0:	40021000 	.word	0x40021000

080015c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015c4:	b510      	push	{r4, lr}
 80015c6:	b09c      	sub	sp, #112	; 0x70
 80015c8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ca:	2214      	movs	r2, #20
 80015cc:	2100      	movs	r1, #0
 80015ce:	a802      	add	r0, sp, #8
 80015d0:	f003 fff8 	bl	80055c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d4:	2254      	movs	r2, #84	; 0x54
 80015d6:	2100      	movs	r1, #0
 80015d8:	a807      	add	r0, sp, #28
 80015da:	f003 fff3 	bl	80055c4 <memset>
  if(hi2c->Instance==I2C1)
 80015de:	6822      	ldr	r2, [r4, #0]
 80015e0:	4b16      	ldr	r3, [pc, #88]	; (800163c <HAL_I2C_MspInit+0x78>)
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d128      	bne.n	8001638 <HAL_I2C_MspInit+0x74>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015e6:	2340      	movs	r3, #64	; 0x40
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e8:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015ea:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ec:	f003 fbf8 	bl	8004de0 <HAL_RCCEx_PeriphCLKConfig>
 80015f0:	b108      	cbz	r0, 80015f6 <HAL_I2C_MspInit+0x32>
    {
      Error_Handler();
 80015f2:	f7ff ffcd 	bl	8001590 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	4c12      	ldr	r4, [pc, #72]	; (8001640 <HAL_I2C_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f8:	4812      	ldr	r0, [pc, #72]	; (8001644 <HAL_I2C_MspInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001602:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800160c:	22c0      	movs	r2, #192	; 0xc0
 800160e:	2312      	movs	r3, #18
 8001610:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001614:	2100      	movs	r1, #0
 8001616:	2303      	movs	r3, #3
 8001618:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800161c:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001620:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001622:	f002 fb15 	bl	8003c50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001626:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001628:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800162c:	65a3      	str	r3, [r4, #88]	; 0x58
 800162e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001634:	9301      	str	r3, [sp, #4]
 8001636:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001638:	b01c      	add	sp, #112	; 0x70
 800163a:	bd10      	pop	{r4, pc}
 800163c:	40005400 	.word	0x40005400
 8001640:	40021000 	.word	0x40021000
 8001644:	48000400 	.word	0x48000400

08001648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001648:	b510      	push	{r4, lr}
 800164a:	b09c      	sub	sp, #112	; 0x70
 800164c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164e:	2214      	movs	r2, #20
 8001650:	2100      	movs	r1, #0
 8001652:	a802      	add	r0, sp, #8
 8001654:	f003 ffb6 	bl	80055c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001658:	2254      	movs	r2, #84	; 0x54
 800165a:	2100      	movs	r1, #0
 800165c:	a807      	add	r0, sp, #28
 800165e:	f003 ffb1 	bl	80055c4 <memset>
  if(huart->Instance==USART2)
 8001662:	6822      	ldr	r2, [r4, #0]
 8001664:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <HAL_UART_MspInit+0x7c>)
 8001666:	429a      	cmp	r2, r3
 8001668:	d129      	bne.n	80016be <HAL_UART_MspInit+0x76>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800166a:	2302      	movs	r3, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800166c:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800166e:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001670:	f003 fbb6 	bl	8004de0 <HAL_RCCEx_PeriphCLKConfig>
 8001674:	b108      	cbz	r0, 800167a <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8001676:	f7ff ff8b 	bl	8001590 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800167a:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <HAL_UART_MspInit+0x80>)
 800167c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800167e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001682:	659a      	str	r2, [r3, #88]	; 0x58
 8001684:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001686:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800168a:	9200      	str	r2, [sp, #0]
 800168c:	9a00      	ldr	r2, [sp, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001690:	f042 0201 	orr.w	r2, r2, #1
 8001694:	64da      	str	r2, [r3, #76]	; 0x4c
 8001696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	9b01      	ldr	r3, [sp, #4]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	220c      	movs	r2, #12
 80016a2:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a4:	2100      	movs	r1, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016b4:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016b8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ba:	f002 fac9 	bl	8003c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016be:	b01c      	add	sp, #112	; 0x70
 80016c0:	bd10      	pop	{r4, pc}
 80016c2:	bf00      	nop
 80016c4:	40004400 	.word	0x40004400
 80016c8:	40021000 	.word	0x40021000

080016cc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <NMI_Handler>

080016ce <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ce:	e7fe      	b.n	80016ce <HardFault_Handler>

080016d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <MemManage_Handler>

080016d2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <BusFault_Handler>

080016d4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <UsageFault_Handler>

080016d6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d6:	4770      	bx	lr

080016d8 <DebugMon_Handler>:
 80016d8:	4770      	bx	lr

080016da <PendSV_Handler>:
 80016da:	4770      	bx	lr

080016dc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016dc:	f002 ba3a 	b.w	8003b54 <HAL_IncTick>

080016e0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80016e0:	2001      	movs	r0, #1
 80016e2:	4770      	bx	lr

080016e4 <_kill>:

int _kill(int pid, int sig)
{
 80016e4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80016e6:	f003 ff25 	bl	8005534 <__errno>
 80016ea:	2316      	movs	r3, #22
 80016ec:	6003      	str	r3, [r0, #0]
	return -1;
}
 80016ee:	f04f 30ff 	mov.w	r0, #4294967295
 80016f2:	bd08      	pop	{r3, pc}

080016f4 <_exit>:

void _exit (int status)
{
 80016f4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80016f6:	f003 ff1d 	bl	8005534 <__errno>
 80016fa:	2316      	movs	r3, #22
 80016fc:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80016fe:	e7fe      	b.n	80016fe <_exit+0xa>

08001700 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001700:	b570      	push	{r4, r5, r6, lr}
 8001702:	460d      	mov	r5, r1
 8001704:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001706:	460e      	mov	r6, r1
 8001708:	1b73      	subs	r3, r6, r5
 800170a:	429c      	cmp	r4, r3
 800170c:	dc01      	bgt.n	8001712 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800170e:	4620      	mov	r0, r4
 8001710:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001712:	f3af 8000 	nop.w
 8001716:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171a:	e7f5      	b.n	8001708 <_read+0x8>

0800171c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800171c:	b570      	push	{r4, r5, r6, lr}
 800171e:	460d      	mov	r5, r1
 8001720:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001722:	460e      	mov	r6, r1
 8001724:	1b73      	subs	r3, r6, r5
 8001726:	429c      	cmp	r4, r3
 8001728:	dc01      	bgt.n	800172e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800172a:	4620      	mov	r0, r4
 800172c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800172e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001732:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001736:	e7f5      	b.n	8001724 <_write+0x8>

08001738 <_close>:

int _close(int file)
{
	return -1;
}
 8001738:	f04f 30ff 	mov.w	r0, #4294967295
 800173c:	4770      	bx	lr

0800173e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800173e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001742:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001744:	2000      	movs	r0, #0
 8001746:	4770      	bx	lr

08001748 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001748:	2001      	movs	r0, #1
 800174a:	4770      	bx	lr

0800174c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800174c:	2000      	movs	r0, #0
 800174e:	4770      	bx	lr

08001750 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001750:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <_sbrk+0x30>)
 8001752:	6811      	ldr	r1, [r2, #0]
{
 8001754:	b510      	push	{r4, lr}
 8001756:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001758:	b909      	cbnz	r1, 800175e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800175a:	490a      	ldr	r1, [pc, #40]	; (8001784 <_sbrk+0x34>)
 800175c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175e:	6810      	ldr	r0, [r2, #0]
 8001760:	4909      	ldr	r1, [pc, #36]	; (8001788 <_sbrk+0x38>)
 8001762:	4c0a      	ldr	r4, [pc, #40]	; (800178c <_sbrk+0x3c>)
 8001764:	4403      	add	r3, r0
 8001766:	1b09      	subs	r1, r1, r4
 8001768:	428b      	cmp	r3, r1
 800176a:	d906      	bls.n	800177a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800176c:	f003 fee2 	bl	8005534 <__errno>
 8001770:	230c      	movs	r3, #12
 8001772:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001774:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001778:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800177a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800177c:	e7fc      	b.n	8001778 <_sbrk+0x28>
 800177e:	bf00      	nop
 8001780:	200003b0 	.word	0x200003b0
 8001784:	20000448 	.word	0x20000448
 8001788:	20010000 	.word	0x20010000
 800178c:	00000400 	.word	0x00000400

08001790 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001790:	4a03      	ldr	r2, [pc, #12]	; (80017a0 <SystemInit+0x10>)
 8001792:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001796:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800179a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017a8:	f7ff fff2 	bl	8001790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ac:	480c      	ldr	r0, [pc, #48]	; (80017e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80017ae:	490d      	ldr	r1, [pc, #52]	; (80017e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017b0:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <LoopForever+0xe>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b4:	e002      	b.n	80017bc <LoopCopyDataInit>

080017b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ba:	3304      	adds	r3, #4

080017bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c0:	d3f9      	bcc.n	80017b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80017c4:	4c0a      	ldr	r4, [pc, #40]	; (80017f0 <LoopForever+0x16>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c8:	e001      	b.n	80017ce <LoopFillZerobss>

080017ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017cc:	3204      	adds	r2, #4

080017ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d0:	d3fb      	bcc.n	80017ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017d2:	f003 feb5 	bl	8005540 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017d6:	f7ff fba3 	bl	8000f20 <main>

080017da <LoopForever>:

LoopForever:
    b LoopForever
 80017da:	e7fe      	b.n	80017da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80017e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80017e8:	08009d34 	.word	0x08009d34
  ldr r2, =_sbss
 80017ec:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80017f0:	20000448 	.word	0x20000448

080017f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017f4:	e7fe      	b.n	80017f4 <ADC1_IRQHandler>

080017f6 <rtc_mcp794xx_i2c_write>:
            - 0 success
            - 1 failed to write
* @note none
*/
uint8_t rtc_mcp794xx_i2c_write(mcp794xx_handle_t *const pHandle, uint8_t u8Reg, uint8_t *pBuf)
{
 80017f6:	b507      	push	{r0, r1, r2, lr}
	int index;
	uint8_t tempBuffer[2];    //len +1
	tempBuffer[0] = u8Reg;

	for(index = 1; index < 2; index++){
		tempBuffer[index] = pBuf[index - 1];
 80017f8:	7813      	ldrb	r3, [r2, #0]
	tempBuffer[0] = u8Reg;
 80017fa:	f88d 1004 	strb.w	r1, [sp, #4]
		tempBuffer[index] = pBuf[index - 1];
 80017fe:	f88d 3005 	strb.w	r3, [sp, #5]
	}

    if (pHandle->i2c_write(pHandle->rtc_address, (uint8_t *)tempBuffer, 2) != 0) /**< read data   (size is len +1) */
 8001802:	2202      	movs	r2, #2
 8001804:	68c3      	ldr	r3, [r0, #12]
 8001806:	7f00      	ldrb	r0, [r0, #28]
 8001808:	a901      	add	r1, sp, #4
 800180a:	4798      	blx	r3
    {
        return 1; /**< read fail */
    }
    return 0;                                            /**< return success */

}
 800180c:	3800      	subs	r0, #0
 800180e:	bf18      	it	ne
 8001810:	2001      	movne	r0, #1
 8001812:	b003      	add	sp, #12
 8001814:	f85d fb04 	ldr.w	pc, [sp], #4

08001818 <rtc_mcp794xx_i2c_read>:
*          - 0 success
*          - 1 failed to read
* @note none
*/
uint8_t rtc_mcp794xx_i2c_read(mcp794xx_handle_t  *const pHandle, uint16_t u8Reg, uint8_t *pBuf, uint8_t u8Length)
{
 8001818:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800181a:	4604      	mov	r4, r0
 800181c:	4615      	mov	r5, r2
 800181e:	461e      	mov	r6, r3
 8001820:	f8ad 1006 	strh.w	r1, [sp, #6]

	if (pHandle->i2c_write(pHandle->rtc_address, (uint8_t *)&u8Reg, 1) != 0) /**< read data */
 8001824:	68c3      	ldr	r3, [r0, #12]
 8001826:	7f00      	ldrb	r0, [r0, #28]
 8001828:	2201      	movs	r2, #1
 800182a:	f10d 0106 	add.w	r1, sp, #6
 800182e:	4798      	blx	r3
 8001830:	b948      	cbnz	r0, 8001846 <rtc_mcp794xx_i2c_read+0x2e>
	{
		return 1; /**< read fail */
	}
    if (pHandle->i2c_read(pHandle->rtc_address, (uint8_t *)pBuf, u8Length) != 0) /**< read data */
 8001832:	68a3      	ldr	r3, [r4, #8]
 8001834:	7f20      	ldrb	r0, [r4, #28]
 8001836:	4632      	mov	r2, r6
 8001838:	4629      	mov	r1, r5
 800183a:	4798      	blx	r3
		return 1; /**< read fail */
 800183c:	3800      	subs	r0, #0
 800183e:	bf18      	it	ne
 8001840:	2001      	movne	r0, #1
    {
        return 1; /**< read fail */
    }
    return 0;                                           /**< return success */
}
 8001842:	b002      	add	sp, #8
 8001844:	bd70      	pop	{r4, r5, r6, pc}
		return 1; /**< read fail */
 8001846:	2001      	movs	r0, #1
 8001848:	e7fb      	b.n	8001842 <rtc_mcp794xx_i2c_read+0x2a>

0800184a <eeprom_mcp794xx_i2c_write>:
            - 0 success
            - 1 failed to write
* @note none
*/
uint8_t eeprom_mcp794xx_i2c_write(mcp794xx_handle_t *const pHandle, uint8_t u8Reg, uint8_t *pBuf, uint8_t u8Length)
{
 800184a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184c:	460e      	mov	r6, r1
 800184e:	4611      	mov	r1, r2
	int index;
	uint8_t tempBuffer[u8Length + 1];    //len +1
 8001850:	f103 0208 	add.w	r2, r3, #8
 8001854:	f402 72fc 	and.w	r2, r2, #504	; 0x1f8
{
 8001858:	af00      	add	r7, sp, #0
	uint8_t tempBuffer[u8Length + 1];    //len +1
 800185a:	ebad 0d02 	sub.w	sp, sp, r2
{
 800185e:	4604      	mov	r4, r0
	tempBuffer[0] = u8Reg;
 8001860:	4668      	mov	r0, sp
	uint8_t tempBuffer[u8Length + 1];    //len +1
 8001862:	1c5d      	adds	r5, r3, #1

	for(index = 1; index < (u8Length + 1); index++){
		tempBuffer[index] = pBuf[index - 1];
 8001864:	461a      	mov	r2, r3
	tempBuffer[0] = u8Reg;
 8001866:	f800 6b01 	strb.w	r6, [r0], #1
		tempBuffer[index] = pBuf[index - 1];
 800186a:	f003 fe9d 	bl	80055a8 <memcpy>
	}

    if (pHandle->i2c_write(pHandle->eeprom_address, (uint8_t *)tempBuffer, (u8Length + 1)) != MCP794XX_DRV_OK) /**< read data   (size is len +1) */
 800186e:	68e3      	ldr	r3, [r4, #12]
 8001870:	7f60      	ldrb	r0, [r4, #29]
 8001872:	b2ea      	uxtb	r2, r5
 8001874:	4669      	mov	r1, sp
 8001876:	4798      	blx	r3
    {
        return MCP794XX_DRV_FAILED; /**< read fail */
    }
    return MCP794XX_DRV_OK;                                            /**< return success */

}
 8001878:	3800      	subs	r0, #0
 800187a:	bf18      	it	ne
 800187c:	2001      	movne	r0, #1
 800187e:	46bd      	mov	sp, r7
 8001880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001882 <eeprom_mcp794xx_i2c_read>:
*          - 0 success
*          - 1 failed to read
* @note none
*/
uint8_t eeprom_mcp794xx_i2c_read(mcp794xx_handle_t  *const pHandle, uint16_t u8Reg, uint8_t *pBuf, uint8_t u8Length)
{
 8001882:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001884:	4604      	mov	r4, r0
 8001886:	4615      	mov	r5, r2
 8001888:	461e      	mov	r6, r3
 800188a:	f8ad 1006 	strh.w	r1, [sp, #6]
	if (pHandle->i2c_write(pHandle->eeprom_address, (uint8_t *)&u8Reg, 1) != MCP794XX_DRV_OK) /**< read data */
 800188e:	68c3      	ldr	r3, [r0, #12]
 8001890:	7f40      	ldrb	r0, [r0, #29]
 8001892:	2201      	movs	r2, #1
 8001894:	f10d 0106 	add.w	r1, sp, #6
 8001898:	4798      	blx	r3
 800189a:	b948      	cbnz	r0, 80018b0 <eeprom_mcp794xx_i2c_read+0x2e>
	{
		return MCP794XX_DRV_FAILED; /**< read fail */
	}
    if (pHandle->i2c_read(pHandle->eeprom_address, (uint8_t *)pBuf, u8Length) != MCP794XX_DRV_OK) /**< read data */
 800189c:	68a3      	ldr	r3, [r4, #8]
 800189e:	7f60      	ldrb	r0, [r4, #29]
 80018a0:	4632      	mov	r2, r6
 80018a2:	4629      	mov	r1, r5
 80018a4:	4798      	blx	r3
		return MCP794XX_DRV_FAILED; /**< read fail */
 80018a6:	3800      	subs	r0, #0
 80018a8:	bf18      	it	ne
 80018aa:	2001      	movne	r0, #1
    {
        return MCP794XX_DRV_FAILED; /**< read fail */
    }
    return MCP794XX_DRV_OK;                                           /**< return success */
}
 80018ac:	b002      	add	sp, #8
 80018ae:	bd70      	pop	{r4, r5, r6, pc}
		return MCP794XX_DRV_FAILED; /**< read fail */
 80018b0:	2001      	movs	r0, #1
 80018b2:	e7fb      	b.n	80018ac <eeprom_mcp794xx_i2c_read+0x2a>

080018b4 <sram_mcp794xx_i2c_write>:
            - 0 success
            - 1 failed to write
* @note none
*/
uint8_t sram_mcp794xx_i2c_write(mcp794xx_handle_t *const pHandle, uint8_t u8Reg, uint8_t *pBuf, uint8_t u8Length)
{
 80018b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018b6:	460e      	mov	r6, r1
 80018b8:	4611      	mov	r1, r2
	int index;
	uint8_t tempBuffer[u8Length + 1];    //len +1
 80018ba:	f103 0208 	add.w	r2, r3, #8
 80018be:	f402 72fc 	and.w	r2, r2, #504	; 0x1f8
{
 80018c2:	af00      	add	r7, sp, #0
	uint8_t tempBuffer[u8Length + 1];    //len +1
 80018c4:	ebad 0d02 	sub.w	sp, sp, r2
{
 80018c8:	4604      	mov	r4, r0
	tempBuffer[0] = u8Reg;
 80018ca:	4668      	mov	r0, sp

	for(index = 1; index < u8Length; index++){
		tempBuffer[index] = pBuf[index - 1];
 80018cc:	2b00      	cmp	r3, #0
	uint8_t tempBuffer[u8Length + 1];    //len +1
 80018ce:	f103 0501 	add.w	r5, r3, #1
		tempBuffer[index] = pBuf[index - 1];
 80018d2:	f103 32ff 	add.w	r2, r3, #4294967295
	tempBuffer[0] = u8Reg;
 80018d6:	f800 6b01 	strb.w	r6, [r0], #1
		tempBuffer[index] = pBuf[index - 1];
 80018da:	bf08      	it	eq
 80018dc:	2200      	moveq	r2, #0
 80018de:	f003 fe63 	bl	80055a8 <memcpy>
	}

    if (pHandle->i2c_write(pHandle->rtc_address, (uint8_t *)tempBuffer, u8Length + 1) != MCP794XX_DRV_OK) /**< read data   (size is len +1) */
 80018e2:	68e3      	ldr	r3, [r4, #12]
 80018e4:	7f20      	ldrb	r0, [r4, #28]
 80018e6:	b2ea      	uxtb	r2, r5
 80018e8:	4669      	mov	r1, sp
 80018ea:	4798      	blx	r3
    {
        return MCP794XX_DRV_FAILED; /**< read fail */
    }
	return MCP794XX_DRV_OK;
}
 80018ec:	3800      	subs	r0, #0
 80018ee:	bf18      	it	ne
 80018f0:	2001      	movne	r0, #1
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080018f8 <a_mcp794xx_print_error_msg>:
* @note   none
*/
void a_mcp794xx_print_error_msg(mcp794xx_handle_t *const pHandle, char *const pBuffer)
{
#ifdef MCP794XX_DEBUG_MODE
    pHandle->debug_print("mcp794xx: failed to %s.\r\n", pBuffer);
 80018f8:	6943      	ldr	r3, [r0, #20]
 80018fa:	4801      	ldr	r0, [pc, #4]	; (8001900 <a_mcp794xx_print_error_msg+0x8>)
 80018fc:	4718      	bx	r3
 80018fe:	bf00      	nop
 8001900:	08008968 	.word	0x08008968

08001904 <a_pcf85xxx_dec2bcd>:
 * @return BCD data
 * @note    none
 */
uint8_t a_pcf85xxx_dec2bcd(uint8_t u8Decimal)
{
    return (((u8Decimal / 10) << 4) | (u8Decimal % 10));
 8001904:	220a      	movs	r2, #10
 8001906:	fbb0 f3f2 	udiv	r3, r0, r2
 800190a:	fb02 0013 	mls	r0, r2, r3, r0
 800190e:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8001912:	b2c0      	uxtb	r0, r0
 8001914:	4770      	bx	lr

08001916 <a_pcf85xxx_bcd2dec>:
 * @return decimal data
 * @note     none
 */
uint8_t a_pcf85xxx_bcd2dec(uint8_t u8Bcd)
{
    return ( (u8Bcd/16*10) + (u8Bcd%16) );
 8001916:	0903      	lsrs	r3, r0, #4
 8001918:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800191c:	f000 000f 	and.w	r0, r0, #15
 8001920:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001924:	b2c0      	uxtb	r0, r0
 8001926:	4770      	bx	lr

08001928 <mcp794xx_init>:
 *            - 2 pHandle is NULL
 *            - 3 linked functions is NULL
 * @note      none
 */
uint8_t mcp794xx_init(mcp794xx_handle_t *const pHandle)
{
 8001928:	b538      	push	{r3, r4, r5, lr}
    if (pHandle == NULL)
 800192a:	4604      	mov	r4, r0
 800192c:	b330      	cbz	r0, 800197c <mcp794xx_init+0x54>
        return 2;
    if (pHandle->debug_print == NULL)
 800192e:	6943      	ldr	r3, [r0, #20]
 8001930:	b11b      	cbz	r3, 800193a <mcp794xx_init+0x12>
        return 3;
    if (pHandle->i2c_init == NULL)
 8001932:	6802      	ldr	r2, [r0, #0]
 8001934:	b91a      	cbnz	r2, 800193e <mcp794xx_init+0x16>
    {
#ifdef MCP794XX_DEBUG_MODE
        pHandle->debug_print("mcp794xx: i2c initialize is null\n");
 8001936:	4812      	ldr	r0, [pc, #72]	; (8001980 <mcp794xx_init+0x58>)
        return 3;
    }
    if (pHandle->i2c_deinit == NULL)
    {
#ifdef MCP794XX_DEBUG_MODE
        pHandle->debug_print("mcp794xx: i2c_deint is null\n");
 8001938:	4798      	blx	r3
        return 3;
 800193a:	2003      	movs	r0, #3
 800193c:	e01b      	b.n	8001976 <mcp794xx_init+0x4e>
    if (pHandle->i2c_deinit == NULL)
 800193e:	6842      	ldr	r2, [r0, #4]
 8001940:	b90a      	cbnz	r2, 8001946 <mcp794xx_init+0x1e>
        pHandle->debug_print("mcp794xx: i2c_deint is null\n");
 8001942:	4810      	ldr	r0, [pc, #64]	; (8001984 <mcp794xx_init+0x5c>)
 8001944:	e7f8      	b.n	8001938 <mcp794xx_init+0x10>
#endif
        return 3;
    }
    if (pHandle->i2c_read == NULL)
 8001946:	6882      	ldr	r2, [r0, #8]
 8001948:	b90a      	cbnz	r2, 800194e <mcp794xx_init+0x26>
    {
#ifdef MCP794XX_DEBUG_MODE
        pHandle->debug_print("mcp794xx: i2c_read is null\n");
 800194a:	480f      	ldr	r0, [pc, #60]	; (8001988 <mcp794xx_init+0x60>)
 800194c:	e7f4      	b.n	8001938 <mcp794xx_init+0x10>
#endif
        return 3;
    }
    if (pHandle->i2c_write == NULL)
 800194e:	68c2      	ldr	r2, [r0, #12]
 8001950:	b90a      	cbnz	r2, 8001956 <mcp794xx_init+0x2e>
    {
#ifdef MCP794XX_DEBUG_MODE
        pHandle->debug_print("mcp794xx: i2c_write is null\n");
 8001952:	480e      	ldr	r0, [pc, #56]	; (800198c <mcp794xx_init+0x64>)
 8001954:	e7f0      	b.n	8001938 <mcp794xx_init+0x10>
#endif
        return 3;
    }
    if (pHandle->receive_callback == NULL)
 8001956:	6982      	ldr	r2, [r0, #24]
 8001958:	b90a      	cbnz	r2, 800195e <mcp794xx_init+0x36>
    {
#ifdef MCP794XX_DEBUG_MODE
        pHandle->debug_print("mcp794xx: receive_callback\n");
 800195a:	480d      	ldr	r0, [pc, #52]	; (8001990 <mcp794xx_init+0x68>)
 800195c:	e7ec      	b.n	8001938 <mcp794xx_init+0x10>
#endif
        return 3;
    }
    if (pHandle->delay_ms == NULL)
 800195e:	6902      	ldr	r2, [r0, #16]
 8001960:	b90a      	cbnz	r2, 8001966 <mcp794xx_init+0x3e>
    {
#ifdef MCP794XX_DEBUG_MODE
        pHandle->debug_print("mcp794xx: delay_ms\n");
 8001962:	480c      	ldr	r0, [pc, #48]	; (8001994 <mcp794xx_init+0x6c>)
 8001964:	4798      	blx	r3
#endif
    }
    if (pHandle->i2c_init())
 8001966:	6823      	ldr	r3, [r4, #0]
 8001968:	4798      	blx	r3
 800196a:	2501      	movs	r5, #1
 800196c:	b120      	cbz	r0, 8001978 <mcp794xx_init+0x50>
    {
#ifdef MCP794XX_DEBUG_MODE
        pHandle->debug_print("mcp794xx: i2c initialize failed\n");
 800196e:	480a      	ldr	r0, [pc, #40]	; (8001998 <mcp794xx_init+0x70>)
 8001970:	6963      	ldr	r3, [r4, #20]
 8001972:	4798      	blx	r3
#endif
        return 1;
 8001974:	4628      	mov	r0, r5
    }

    pHandle->inited = 1; /* flag finish initialization */

    return 0;
}
 8001976:	bd38      	pop	{r3, r4, r5, pc}
    pHandle->inited = 1; /* flag finish initialization */
 8001978:	77e5      	strb	r5, [r4, #31]
    return 0;
 800197a:	e7fc      	b.n	8001976 <mcp794xx_init+0x4e>
        return 2;
 800197c:	2002      	movs	r0, #2
 800197e:	e7fa      	b.n	8001976 <mcp794xx_init+0x4e>
 8001980:	08008982 	.word	0x08008982
 8001984:	080089a4 	.word	0x080089a4
 8001988:	080089c1 	.word	0x080089c1
 800198c:	080089dd 	.word	0x080089dd
 8001990:	080089fa 	.word	0x080089fa
 8001994:	08008a16 	.word	0x08008a16
 8001998:	08008a2a 	.word	0x08008a2a

0800199c <mcp794xx_set_addr_pin>:
 * @note      none
 */
uint8_t mcp794xx_set_addr_pin(mcp794xx_handle_t *const pHandle)
{

    if(pHandle == NULL)
 800199c:	b138      	cbz	r0, 80019ae <mcp794xx_set_addr_pin+0x12>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 800199e:	7fc3      	ldrb	r3, [r0, #31]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d106      	bne.n	80019b2 <mcp794xx_set_addr_pin+0x16>
        return 3;      /**< return failed error */

    pHandle->rtc_address = MCP794XX_RTC_IIC_ADDRESS;
 80019a4:	f245 736f 	movw	r3, #22383	; 0x576f
 80019a8:	8383      	strh	r3, [r0, #28]
    {
        a_mcp794xx_print_error_msg(pHandle, "set i2c slave address");
        return 1;           /**< failed error */
    }

    return 0;           /**< success */
 80019aa:	2000      	movs	r0, #0
 80019ac:	4770      	bx	lr
        return 2;     /**< return failed error */
 80019ae:	2002      	movs	r0, #2
 80019b0:	4770      	bx	lr
        return 3;      /**< return failed error */
 80019b2:	2003      	movs	r0, #3
}
 80019b4:	4770      	bx	lr

080019b6 <mcp794xx_set_variant>:
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mcp794xx_set_variant(mcp794xx_handle_t *const pHandle, mcp794xx_variant_t variant)
{
    if(pHandle == NULL)
 80019b6:	b128      	cbz	r0, 80019c4 <mcp794xx_set_variant+0xe>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 80019b8:	7fc3      	ldrb	r3, [r0, #31]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d104      	bne.n	80019c8 <mcp794xx_set_variant+0x12>
        return 3;      /**< return failed error */

    pHandle->device_variant = variant;
 80019be:	7781      	strb	r1, [r0, #30]
    {
        a_mcp794xx_print_error_msg(pHandle, "set variant");
        return 1;           /**< failed error */
    }

    return 0;           /**< success */
 80019c0:	2000      	movs	r0, #0
 80019c2:	4770      	bx	lr
        return 2;     /**< return failed error */
 80019c4:	2002      	movs	r0, #2
 80019c6:	4770      	bx	lr
        return 3;      /**< return failed error */
 80019c8:	2003      	movs	r0, #3
}
 80019ca:	4770      	bx	lr

080019cc <mcp794xx_set_debug_print_buffer_size>:
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mcp794xx_set_debug_print_buffer_size(mcp794xx_handle_t *const pHandle, mcp794xx_degub_print_buffer_size_t bf_size)
{
    if(pHandle == NULL)
 80019cc:	b128      	cbz	r0, 80019da <mcp794xx_set_debug_print_buffer_size+0xe>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 80019ce:	7fc3      	ldrb	r3, [r0, #31]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d104      	bne.n	80019de <mcp794xx_set_debug_print_buffer_size+0x12>
        return 3;      /**< return failed error */

    pHandle->buffer_size = bf_size;
 80019d4:	6201      	str	r1, [r0, #32]
    if(pHandle->buffer_size != bf_size)
    {
        a_mcp794xx_print_error_msg(pHandle,"set debug print function buffer size");
        return 1;
    }
    return 0;       /**< success */
 80019d6:	2000      	movs	r0, #0
 80019d8:	4770      	bx	lr
        return 2;     /**< return failed error */
 80019da:	2002      	movs	r0, #2
 80019dc:	4770      	bx	lr
        return 3;      /**< return failed error */
 80019de:	2003      	movs	r0, #3
}
 80019e0:	4770      	bx	lr
	...

080019e4 <mcp794xx_get_time_and_date>:
 *             - 2 handle or time is NULL
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t mcp794xx_get_time_and_date(mcp794xx_handle_t *const pHandle, mcp794xx_time_t *pTime)
{
 80019e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80019e6:	460c      	mov	r4, r1
    uint8_t timeBuffer[MCP794XX_TIME_BUFFER_SIZE];

    if(pHandle == NULL)
 80019e8:	4605      	mov	r5, r0
 80019ea:	2800      	cmp	r0, #0
 80019ec:	d054      	beq.n	8001a98 <mcp794xx_get_time_and_date+0xb4>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 80019ee:	7fc6      	ldrb	r6, [r0, #31]
 80019f0:	2e01      	cmp	r6, #1
 80019f2:	d153      	bne.n	8001a9c <mcp794xx_get_time_and_date+0xb8>
        return 3;      /**< return failed error */

    err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_RTC_SECOND_REG, (uint8_t *)timeBuffer, MCP794XX_TIME_BUFFER_SIZE);
 80019f4:	2307      	movs	r3, #7
 80019f6:	466a      	mov	r2, sp
 80019f8:	2100      	movs	r1, #0
 80019fa:	f7ff ff0d 	bl	8001818 <rtc_mcp794xx_i2c_read>
 80019fe:	4b28      	ldr	r3, [pc, #160]	; (8001aa0 <mcp794xx_get_time_and_date+0xbc>)
 8001a00:	7018      	strb	r0, [r3, #0]
    if(err)
 8001a02:	b130      	cbz	r0, 8001a12 <mcp794xx_get_time_and_date+0x2e>
    {
        a_mcp794xx_print_error_msg(pHandle, "read time and date");
 8001a04:	4927      	ldr	r1, [pc, #156]	; (8001aa4 <mcp794xx_get_time_and_date+0xc0>)
 8001a06:	4628      	mov	r0, r5
 8001a08:	f7ff ff76 	bl	80018f8 <a_mcp794xx_print_error_msg>
    pTime->date = a_pcf85xxx_bcd2dec(timeBuffer[4] & MCP794XX_DATE_BCD_MASK);
    pTime->month = a_pcf85xxx_bcd2dec(timeBuffer[5] & MCP794XX_MONTH_BCD_MASK);
    pTime->year = a_pcf85xxx_bcd2dec(timeBuffer[6] & MCP794XX_YEAR_BCD_MASK) + 2000;

    return 0;           /**< success */
}
 8001a0c:	4630      	mov	r0, r6
 8001a0e:	b002      	add	sp, #8
 8001a10:	bd70      	pop	{r4, r5, r6, pc}
    pTime->second = a_pcf85xxx_bcd2dec(timeBuffer[0] & MCP794XX_SEC_BCD_MASK);
 8001a12:	f89d 0000 	ldrb.w	r0, [sp]
 8001a16:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001a1a:	f7ff ff7c 	bl	8001916 <a_pcf85xxx_bcd2dec>
 8001a1e:	7160      	strb	r0, [r4, #5]
    pTime->minute = a_pcf85xxx_bcd2dec(timeBuffer[1] & MCP794XX_MIN_BCD_MASK);
 8001a20:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8001a24:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001a28:	f7ff ff75 	bl	8001916 <a_pcf85xxx_bcd2dec>
 8001a2c:	7120      	strb	r0, [r4, #4]
    if(pHandle->time_param.time_Format == MCP794XX_24HR_FORMAT)
 8001a2e:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
 8001a32:	bb23      	cbnz	r3, 8001a7e <mcp794xx_get_time_and_date+0x9a>
        pTime->hour = a_pcf85xxx_bcd2dec(timeBuffer[2] & MCP794XX_24HR_FRMT_BCD_MASK);
 8001a34:	f89d 0002 	ldrb.w	r0, [sp, #2]
 8001a38:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8001a3c:	f7ff ff6b 	bl	8001916 <a_pcf85xxx_bcd2dec>
 8001a40:	70e0      	strb	r0, [r4, #3]
    pTime->weekDay = a_pcf85xxx_bcd2dec(timeBuffer[3] & MCP794XX_WKDAY_BCD_MASK);
 8001a42:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001a46:	f000 0007 	and.w	r0, r0, #7
 8001a4a:	f7ff ff64 	bl	8001916 <a_pcf85xxx_bcd2dec>
 8001a4e:	71e0      	strb	r0, [r4, #7]
    pTime->date = a_pcf85xxx_bcd2dec(timeBuffer[4] & MCP794XX_DATE_BCD_MASK);
 8001a50:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001a54:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8001a58:	f7ff ff5d 	bl	8001916 <a_pcf85xxx_bcd2dec>
 8001a5c:	70a0      	strb	r0, [r4, #2]
    pTime->month = a_pcf85xxx_bcd2dec(timeBuffer[5] & MCP794XX_MONTH_BCD_MASK);
 8001a5e:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8001a62:	f000 001f 	and.w	r0, r0, #31
 8001a66:	f7ff ff56 	bl	8001916 <a_pcf85xxx_bcd2dec>
 8001a6a:	71a0      	strb	r0, [r4, #6]
    pTime->year = a_pcf85xxx_bcd2dec(timeBuffer[6] & MCP794XX_YEAR_BCD_MASK) + 2000;
 8001a6c:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8001a70:	f7ff ff51 	bl	8001916 <a_pcf85xxx_bcd2dec>
 8001a74:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 8001a78:	8020      	strh	r0, [r4, #0]
    return 0;           /**< success */
 8001a7a:	2600      	movs	r6, #0
 8001a7c:	e7c6      	b.n	8001a0c <mcp794xx_get_time_and_date+0x28>
    else if(pHandle->time_param.time_Format == MCP794XX_12HR_FORMAT)
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d1df      	bne.n	8001a42 <mcp794xx_get_time_and_date+0x5e>
        pTime->hour = a_pcf85xxx_bcd2dec(timeBuffer[2] & MCP794XX_12HR_FRMT_BCD_MASK);
 8001a82:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8001a86:	f002 001f 	and.w	r0, r2, #31
 8001a8a:	f7ff ff44 	bl	8001916 <a_pcf85xxx_bcd2dec>
        pTime->am_pm_indicator = ((timeBuffer[2] & MCP794XX_TIME_AM_PM_MASK) >> 5) ;
 8001a8e:	f3c2 1240 	ubfx	r2, r2, #5, #1
        pTime->hour = a_pcf85xxx_bcd2dec(timeBuffer[2] & MCP794XX_12HR_FRMT_BCD_MASK);
 8001a92:	70e0      	strb	r0, [r4, #3]
        pTime->am_pm_indicator = ((timeBuffer[2] & MCP794XX_TIME_AM_PM_MASK) >> 5) ;
 8001a94:	7262      	strb	r2, [r4, #9]
 8001a96:	e7d4      	b.n	8001a42 <mcp794xx_get_time_and_date+0x5e>
        return 2;     /**< return failed error */
 8001a98:	2602      	movs	r6, #2
 8001a9a:	e7b7      	b.n	8001a0c <mcp794xx_get_time_and_date+0x28>
        return 3;      /**< return failed error */
 8001a9c:	2603      	movs	r6, #3
 8001a9e:	e7b5      	b.n	8001a0c <mcp794xx_get_time_and_date+0x28>
 8001aa0:	200003bc 	.word	0x200003bc
 8001aa4:	08008a4b 	.word	0x08008a4b

08001aa8 <mcp794xx_set_hour_format>:
 *          - 0 success
 *          - 1 failed to set time format
 * @note        none
 */
uint8_t mcp794xx_set_hour_format(mcp794xx_handle_t *const pHandle, uint8_t u8Register, mcp794xx_time_format_t format)
{
 8001aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aaa:	4616      	mov	r6, r2
 8001aac:	b085      	sub	sp, #20
    uint8_t read_status;

    if(pHandle == NULL)
 8001aae:	4604      	mov	r4, r0
 8001ab0:	b340      	cbz	r0, 8001b04 <mcp794xx_set_hour_format+0x5c>
        return 2;      /**< return failed error */
    if(pHandle->inited != 1)
 8001ab2:	7fc5      	ldrb	r5, [r0, #31]
 8001ab4:	2d01      	cmp	r5, #1
 8001ab6:	d127      	bne.n	8001b08 <mcp794xx_set_hour_format+0x60>
        return 3;      /**< return failed error */

    err = rtc_mcp794xx_i2c_read(pHandle, u8Register, (uint8_t*)&read_status, 1);
 8001ab8:	462b      	mov	r3, r5
 8001aba:	f10d 020f 	add.w	r2, sp, #15
 8001abe:	9101      	str	r1, [sp, #4]
 8001ac0:	f7ff feaa 	bl	8001818 <rtc_mcp794xx_i2c_read>
 8001ac4:	4f11      	ldr	r7, [pc, #68]	; (8001b0c <mcp794xx_set_hour_format+0x64>)
    if(err)
 8001ac6:	9901      	ldr	r1, [sp, #4]
    err = rtc_mcp794xx_i2c_read(pHandle, u8Register, (uint8_t*)&read_status, 1);
 8001ac8:	7038      	strb	r0, [r7, #0]
    if(err)
 8001aca:	b130      	cbz	r0, 8001ada <mcp794xx_set_hour_format+0x32>
    {
        a_mcp794xx_print_error_msg(pHandle, "read hour format before write");
 8001acc:	4910      	ldr	r1, [pc, #64]	; (8001b10 <mcp794xx_set_hour_format+0x68>)
    read_status |= (format << 6);        /*< write hour format status bit */

    err = rtc_mcp794xx_i2c_write(pHandle, u8Register, (uint8_t*)&read_status);
    if(err)
    {
        a_mcp794xx_print_error_msg(pHandle, "set hour format ");
 8001ace:	4620      	mov	r0, r4
 8001ad0:	f7ff ff12 	bl	80018f8 <a_mcp794xx_print_error_msg>
    }

    pHandle->time_param.time_Format = format;

    return 0;              /**< success */
}
 8001ad4:	4628      	mov	r0, r5
 8001ad6:	b005      	add	sp, #20
 8001ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    read_status &= ~(1 << 6);            /*< clear hour format status bit */
 8001ada:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001ade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    read_status |= (format << 6);        /*< write hour format status bit */
 8001ae2:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
    err = rtc_mcp794xx_i2c_write(pHandle, u8Register, (uint8_t*)&read_status);
 8001ae6:	f10d 020f 	add.w	r2, sp, #15
 8001aea:	4620      	mov	r0, r4
    read_status |= (format << 6);        /*< write hour format status bit */
 8001aec:	f88d 300f 	strb.w	r3, [sp, #15]
    err = rtc_mcp794xx_i2c_write(pHandle, u8Register, (uint8_t*)&read_status);
 8001af0:	f7ff fe81 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8001af4:	7038      	strb	r0, [r7, #0]
    if(err)
 8001af6:	b108      	cbz	r0, 8001afc <mcp794xx_set_hour_format+0x54>
        a_mcp794xx_print_error_msg(pHandle, "set hour format ");
 8001af8:	4906      	ldr	r1, [pc, #24]	; (8001b14 <mcp794xx_set_hour_format+0x6c>)
 8001afa:	e7e8      	b.n	8001ace <mcp794xx_set_hour_format+0x26>
    pHandle->time_param.time_Format = format;
 8001afc:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
    return 0;              /**< success */
 8001b00:	4605      	mov	r5, r0
 8001b02:	e7e7      	b.n	8001ad4 <mcp794xx_set_hour_format+0x2c>
        return 2;      /**< return failed error */
 8001b04:	2502      	movs	r5, #2
 8001b06:	e7e5      	b.n	8001ad4 <mcp794xx_set_hour_format+0x2c>
        return 3;      /**< return failed error */
 8001b08:	2503      	movs	r5, #3
 8001b0a:	e7e3      	b.n	8001ad4 <mcp794xx_set_hour_format+0x2c>
 8001b0c:	200003bc 	.word	0x200003bc
 8001b10:	08008a5e 	.word	0x08008a5e
 8001b14:	08008a7c 	.word	0x08008a7c

08001b18 <mcp794xx_get_hour_format>:
 *          - 0 success
 *          - 1 failed to set time format
 * @note        none
 */
uint8_t mcp794xx_get_hour_format(mcp794xx_handle_t *const pHandle, uint8_t u8Register, mcp794xx_time_format_t *pFormat)
{
 8001b18:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b1a:	4616      	mov	r6, r2
    uint8_t read_status;

    if(pHandle == NULL)
 8001b1c:	4605      	mov	r5, r0
 8001b1e:	b1d0      	cbz	r0, 8001b56 <mcp794xx_get_hour_format+0x3e>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 8001b20:	7fc4      	ldrb	r4, [r0, #31]
 8001b22:	2c01      	cmp	r4, #1
 8001b24:	d119      	bne.n	8001b5a <mcp794xx_get_hour_format+0x42>
        return 3;      /**< return failed error */

    err = rtc_mcp794xx_i2c_read(pHandle, u8Register, (uint8_t *)&read_status, 1);
 8001b26:	4623      	mov	r3, r4
 8001b28:	f10d 0207 	add.w	r2, sp, #7
 8001b2c:	f7ff fe74 	bl	8001818 <rtc_mcp794xx_i2c_read>
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <mcp794xx_get_hour_format+0x48>)
 8001b32:	7018      	strb	r0, [r3, #0]
    if(err)
 8001b34:	b130      	cbz	r0, 8001b44 <mcp794xx_get_hour_format+0x2c>
    {
        a_mcp794xx_print_error_msg(pHandle, "get hour format");
 8001b36:	490b      	ldr	r1, [pc, #44]	; (8001b64 <mcp794xx_get_hour_format+0x4c>)
 8001b38:	4628      	mov	r0, r5
 8001b3a:	f7ff fedd 	bl	80018f8 <a_mcp794xx_print_error_msg>
    pHandle->time_param.time_Format = *pFormat;

    *pFormat =  pHandle->time_param.time_Format;

    return 0;              /**< success */
}
 8001b3e:	4620      	mov	r0, r4
 8001b40:	b002      	add	sp, #8
 8001b42:	bd70      	pop	{r4, r5, r6, pc}
    *pFormat = (mcp794xx_time_format_t)((read_status & MCP794XX_ALARMx_12HR_24HR_FRMT_STAT_MASK) >> 6);
 8001b44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001b48:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001b4c:	7033      	strb	r3, [r6, #0]
    return 0;              /**< success */
 8001b4e:	4604      	mov	r4, r0
    pHandle->time_param.time_Format = *pFormat;
 8001b50:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70
    return 0;              /**< success */
 8001b54:	e7f3      	b.n	8001b3e <mcp794xx_get_hour_format+0x26>
        return 2;     /**< return failed error */
 8001b56:	2402      	movs	r4, #2
 8001b58:	e7f1      	b.n	8001b3e <mcp794xx_get_hour_format+0x26>
        return 3;      /**< return failed error */
 8001b5a:	2403      	movs	r4, #3
 8001b5c:	e7ef      	b.n	8001b3e <mcp794xx_get_hour_format+0x26>
 8001b5e:	bf00      	nop
 8001b60:	200003bc 	.word	0x200003bc
 8001b64:	08008a8d 	.word	0x08008a8d

08001b68 <mcp794xx_set_am_pm>:
 *          - 1 failed to set AM/PM period
            - 2 handle null
 *          - 3 handle is not initialized
 */
uint8_t mcp794xx_set_am_pm(mcp794xx_handle_t *const pHandle, uint8_t u8Register, mcp794xx_am_pm_indicator_t am_pm)
{
 8001b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b6a:	4617      	mov	r7, r2
 8001b6c:	b085      	sub	sp, #20
    uint8_t read_status;

    if(pHandle == NULL)
 8001b6e:	4604      	mov	r4, r0
 8001b70:	b330      	cbz	r0, 8001bc0 <mcp794xx_set_am_pm+0x58>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 8001b72:	7fc5      	ldrb	r5, [r0, #31]
 8001b74:	2d01      	cmp	r5, #1
 8001b76:	d125      	bne.n	8001bc4 <mcp794xx_set_am_pm+0x5c>
        return 3;      /**< return failed error */

    err = rtc_mcp794xx_i2c_read(pHandle, u8Register, (uint8_t *)&read_status, 1);
 8001b78:	462b      	mov	r3, r5
 8001b7a:	f10d 020f 	add.w	r2, sp, #15
 8001b7e:	9101      	str	r1, [sp, #4]
 8001b80:	f7ff fe4a 	bl	8001818 <rtc_mcp794xx_i2c_read>
 8001b84:	4e10      	ldr	r6, [pc, #64]	; (8001bc8 <mcp794xx_set_am_pm+0x60>)
    if(err)
 8001b86:	9901      	ldr	r1, [sp, #4]
    err = rtc_mcp794xx_i2c_read(pHandle, u8Register, (uint8_t *)&read_status, 1);
 8001b88:	7030      	strb	r0, [r6, #0]
    if(err)
 8001b8a:	b130      	cbz	r0, 8001b9a <mcp794xx_set_am_pm+0x32>
    {
        a_mcp794xx_print_error_msg(pHandle, "read time am/pm indicator before write");
 8001b8c:	490f      	ldr	r1, [pc, #60]	; (8001bcc <mcp794xx_set_am_pm+0x64>)
    read_status |= (am_pm << 5);

    err = rtc_mcp794xx_i2c_write(pHandle, u8Register, (uint8_t *)&read_status);
    if(err)
    {
        a_mcp794xx_print_error_msg(pHandle, "set time am/pm indicator");
 8001b8e:	4620      	mov	r0, r4
 8001b90:	f7ff feb2 	bl	80018f8 <a_mcp794xx_print_error_msg>
        return 1;           /**< failed error */
    }


    return 0;              /**< success */
}
 8001b94:	4628      	mov	r0, r5
 8001b96:	b005      	add	sp, #20
 8001b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    read_status &= ~(1 << 5);
 8001b9a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001b9e:	f023 0320 	bic.w	r3, r3, #32
    read_status |= (am_pm << 5);
 8001ba2:	ea43 1247 	orr.w	r2, r3, r7, lsl #5
 8001ba6:	f88d 200f 	strb.w	r2, [sp, #15]
    err = rtc_mcp794xx_i2c_write(pHandle, u8Register, (uint8_t *)&read_status);
 8001baa:	4620      	mov	r0, r4
 8001bac:	f10d 020f 	add.w	r2, sp, #15
 8001bb0:	f7ff fe21 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8001bb4:	7030      	strb	r0, [r6, #0]
    if(err)
 8001bb6:	b108      	cbz	r0, 8001bbc <mcp794xx_set_am_pm+0x54>
        a_mcp794xx_print_error_msg(pHandle, "set time am/pm indicator");
 8001bb8:	4905      	ldr	r1, [pc, #20]	; (8001bd0 <mcp794xx_set_am_pm+0x68>)
 8001bba:	e7e8      	b.n	8001b8e <mcp794xx_set_am_pm+0x26>
    return 0;              /**< success */
 8001bbc:	4605      	mov	r5, r0
 8001bbe:	e7e9      	b.n	8001b94 <mcp794xx_set_am_pm+0x2c>
        return 2;     /**< return failed error */
 8001bc0:	2502      	movs	r5, #2
 8001bc2:	e7e7      	b.n	8001b94 <mcp794xx_set_am_pm+0x2c>
        return 3;      /**< return failed error */
 8001bc4:	2503      	movs	r5, #3
 8001bc6:	e7e5      	b.n	8001b94 <mcp794xx_set_am_pm+0x2c>
 8001bc8:	200003bc 	.word	0x200003bc
 8001bcc:	08008a9d 	.word	0x08008a9d
 8001bd0:	08008ac4 	.word	0x08008ac4

08001bd4 <mcp794xx_set_time_and_date>:
{
 8001bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bd6:	460d      	mov	r5, r1
 8001bd8:	b085      	sub	sp, #20
    if(pHandle == NULL)
 8001bda:	4604      	mov	r4, r0
 8001bdc:	2800      	cmp	r0, #0
 8001bde:	f000 80ec 	beq.w	8001dba <mcp794xx_set_time_and_date+0x1e6>
    if(pHandle->inited != 1)
 8001be2:	7fc6      	ldrb	r6, [r0, #31]
 8001be4:	2e01      	cmp	r6, #1
 8001be6:	f040 80ea 	bne.w	8001dbe <mcp794xx_set_time_and_date+0x1ea>
        if((pTime->year < 0) || (pTime->year > 99))
 8001bea:	880b      	ldrh	r3, [r1, #0]
 8001bec:	2b63      	cmp	r3, #99	; 0x63
 8001bee:	d906      	bls.n	8001bfe <mcp794xx_set_time_and_date+0x2a>
            a_mcp794xx_print_error_msg(pHandle, "set time, year can not be less than 0 or greater than 99");
 8001bf0:	4974      	ldr	r1, [pc, #464]	; (8001dc4 <mcp794xx_set_time_and_date+0x1f0>)
            a_mcp794xx_print_error_msg(pHandle, "set time, month can not be less than 1 or greater than 12");
 8001bf2:	f7ff fe81 	bl	80018f8 <a_mcp794xx_print_error_msg>
            return 4;
 8001bf6:	2604      	movs	r6, #4
}
 8001bf8:	4630      	mov	r0, r6
 8001bfa:	b005      	add	sp, #20
 8001bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((pTime->month < 1) || (pTime->month > 12))
 8001bfe:	798b      	ldrb	r3, [r1, #6]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	2b0b      	cmp	r3, #11
 8001c04:	d901      	bls.n	8001c0a <mcp794xx_set_time_and_date+0x36>
            a_mcp794xx_print_error_msg(pHandle, "set time, month can not be less than 1 or greater than 12");
 8001c06:	4970      	ldr	r1, [pc, #448]	; (8001dc8 <mcp794xx_set_time_and_date+0x1f4>)
 8001c08:	e7f3      	b.n	8001bf2 <mcp794xx_set_time_and_date+0x1e>
        if((pTime->date < 1) || (pTime->date > 31))
 8001c0a:	788b      	ldrb	r3, [r1, #2]
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	2b1e      	cmp	r3, #30
 8001c10:	d901      	bls.n	8001c16 <mcp794xx_set_time_and_date+0x42>
            a_mcp794xx_print_error_msg(pHandle, "set time, date can not be less than 1 or greater than 31");
 8001c12:	496e      	ldr	r1, [pc, #440]	; (8001dcc <mcp794xx_set_time_and_date+0x1f8>)
 8001c14:	e7ed      	b.n	8001bf2 <mcp794xx_set_time_and_date+0x1e>
        if((pTime->weekDay < 1) || (pTime->weekDay > 7))
 8001c16:	79cb      	ldrb	r3, [r1, #7]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	2b06      	cmp	r3, #6
 8001c1c:	d901      	bls.n	8001c22 <mcp794xx_set_time_and_date+0x4e>
            a_mcp794xx_print_error_msg(pHandle, "set time, week day can not be less than 1 or greater than 7");
 8001c1e:	496c      	ldr	r1, [pc, #432]	; (8001dd0 <mcp794xx_set_time_and_date+0x1fc>)
 8001c20:	e7e7      	b.n	8001bf2 <mcp794xx_set_time_and_date+0x1e>
        if((pTime->minute < 0) || (pTime->minute > 59))
 8001c22:	790b      	ldrb	r3, [r1, #4]
 8001c24:	2b3b      	cmp	r3, #59	; 0x3b
 8001c26:	d901      	bls.n	8001c2c <mcp794xx_set_time_and_date+0x58>
            a_mcp794xx_print_error_msg(pHandle, "set time, minute can not be less than 0 or greater than 59");
 8001c28:	496a      	ldr	r1, [pc, #424]	; (8001dd4 <mcp794xx_set_time_and_date+0x200>)
 8001c2a:	e7e2      	b.n	8001bf2 <mcp794xx_set_time_and_date+0x1e>
        if((pTime->second < 0) || (pTime->second > 59))
 8001c2c:	794b      	ldrb	r3, [r1, #5]
 8001c2e:	2b3b      	cmp	r3, #59	; 0x3b
 8001c30:	d901      	bls.n	8001c36 <mcp794xx_set_time_and_date+0x62>
            a_mcp794xx_print_error_msg(pHandle, "set time, seconds can not be less than 0 or greater than 59");
 8001c32:	4969      	ldr	r1, [pc, #420]	; (8001dd8 <mcp794xx_set_time_and_date+0x204>)
 8001c34:	e7dd      	b.n	8001bf2 <mcp794xx_set_time_and_date+0x1e>
    if(pHandle->time_param.time_Format == MCP794XX_24HR_FORMAT)
 8001c36:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8001c3a:	b92b      	cbnz	r3, 8001c48 <mcp794xx_set_time_and_date+0x74>
        if((pTime->hour < 0) || (pTime->hour > 23))
 8001c3c:	78cb      	ldrb	r3, [r1, #3]
 8001c3e:	2b17      	cmp	r3, #23
 8001c40:	d90c      	bls.n	8001c5c <mcp794xx_set_time_and_date+0x88>
            a_mcp794xx_print_error_msg(pHandle, "set time, hour can not be less than 0 or greater than 23");
 8001c42:	4966      	ldr	r1, [pc, #408]	; (8001ddc <mcp794xx_set_time_and_date+0x208>)
        a_mcp794xx_print_error_msg(pHandle, "set time, invalid time format");
 8001c44:	4620      	mov	r0, r4
 8001c46:	e7d4      	b.n	8001bf2 <mcp794xx_set_time_and_date+0x1e>
    else if(pHandle->time_param.time_Format == MCP794XX_12HR_FORMAT)
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d105      	bne.n	8001c58 <mcp794xx_set_time_and_date+0x84>
        if((pTime->hour < 1) || (pTime->hour > 12))
 8001c4c:	78cb      	ldrb	r3, [r1, #3]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	2b0b      	cmp	r3, #11
 8001c52:	d903      	bls.n	8001c5c <mcp794xx_set_time_and_date+0x88>
            a_mcp794xx_print_error_msg(pHandle, "set time, hour can not be less than 1 or greater than 12");
 8001c54:	4962      	ldr	r1, [pc, #392]	; (8001de0 <mcp794xx_set_time_and_date+0x20c>)
 8001c56:	e7f5      	b.n	8001c44 <mcp794xx_set_time_and_date+0x70>
        a_mcp794xx_print_error_msg(pHandle, "set time, invalid time format");
 8001c58:	4962      	ldr	r1, [pc, #392]	; (8001de4 <mcp794xx_set_time_and_date+0x210>)
 8001c5a:	e7f3      	b.n	8001c44 <mcp794xx_set_time_and_date+0x70>
    memset(ptimeBuffer, 0, sizeof(ptimeBuffer));
 8001c5c:	2100      	movs	r1, #0
    err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_RTC_SECOND_REG, (uint8_t *)ptimeBuffer, MCP794XX_TIME_BUFFER_SIZE);
 8001c5e:	2307      	movs	r3, #7
 8001c60:	aa02      	add	r2, sp, #8
 8001c62:	4620      	mov	r0, r4
    memset(ptimeBuffer, 0, sizeof(ptimeBuffer));
 8001c64:	9102      	str	r1, [sp, #8]
 8001c66:	f8cd 100b 	str.w	r1, [sp, #11]
    err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_RTC_SECOND_REG, (uint8_t *)ptimeBuffer, MCP794XX_TIME_BUFFER_SIZE);
 8001c6a:	f7ff fdd5 	bl	8001818 <rtc_mcp794xx_i2c_read>
 8001c6e:	4f5e      	ldr	r7, [pc, #376]	; (8001de8 <mcp794xx_set_time_and_date+0x214>)
 8001c70:	4601      	mov	r1, r0
 8001c72:	7038      	strb	r0, [r7, #0]
    if(err)
 8001c74:	b120      	cbz	r0, 8001c80 <mcp794xx_set_time_and_date+0xac>
        a_mcp794xx_print_error_msg(pHandle, "read time before write");
 8001c76:	495d      	ldr	r1, [pc, #372]	; (8001dec <mcp794xx_set_time_and_date+0x218>)
        a_mcp794xx_print_error_msg(pHandle, "to write year");
 8001c78:	4620      	mov	r0, r4
 8001c7a:	f7ff fe3d 	bl	80018f8 <a_mcp794xx_print_error_msg>
        return 1;
 8001c7e:	e7bb      	b.n	8001bf8 <mcp794xx_set_time_and_date+0x24>
    status = (ptimeBuffer[0] & MCP794XX_ST_MASK) | a_pcf85xxx_dec2bcd(pTime->second);
 8001c80:	7968      	ldrb	r0, [r5, #5]
 8001c82:	f7ff fe3f 	bl	8001904 <a_pcf85xxx_dec2bcd>
 8001c86:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001c8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001c8e:	4318      	orrs	r0, r3
 8001c90:	f88d 0007 	strb.w	r0, [sp, #7]
    err =  rtc_mcp794xx_i2c_write(pHandle, MCP794XX_RTC_SECOND_REG,  (uint8_t *)&status);
 8001c94:	f10d 0207 	add.w	r2, sp, #7
 8001c98:	4620      	mov	r0, r4
 8001c9a:	f7ff fdac 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8001c9e:	7038      	strb	r0, [r7, #0]
    if(err)
 8001ca0:	b108      	cbz	r0, 8001ca6 <mcp794xx_set_time_and_date+0xd2>
        a_mcp794xx_print_error_msg(pHandle, "to write seconds");
 8001ca2:	4953      	ldr	r1, [pc, #332]	; (8001df0 <mcp794xx_set_time_and_date+0x21c>)
 8001ca4:	e7e8      	b.n	8001c78 <mcp794xx_set_time_and_date+0xa4>
    status = a_pcf85xxx_dec2bcd(pTime->minute);
 8001ca6:	7928      	ldrb	r0, [r5, #4]
 8001ca8:	f7ff fe2c 	bl	8001904 <a_pcf85xxx_dec2bcd>
    err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_RTC_MINUTE_REG, (uint8_t *)&status);
 8001cac:	2101      	movs	r1, #1
    status = a_pcf85xxx_dec2bcd(pTime->minute);
 8001cae:	f88d 0007 	strb.w	r0, [sp, #7]
    err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_RTC_MINUTE_REG, (uint8_t *)&status);
 8001cb2:	f10d 0207 	add.w	r2, sp, #7
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	f7ff fd9d 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8001cbc:	7038      	strb	r0, [r7, #0]
    if(err)
 8001cbe:	b108      	cbz	r0, 8001cc4 <mcp794xx_set_time_and_date+0xf0>
        a_mcp794xx_print_error_msg(pHandle, "to write minutes");
 8001cc0:	494c      	ldr	r1, [pc, #304]	; (8001df4 <mcp794xx_set_time_and_date+0x220>)
 8001cc2:	e7d9      	b.n	8001c78 <mcp794xx_set_time_and_date+0xa4>
    if(pHandle->time_param.time_Format == MCP794XX_24HR_FORMAT)
 8001cc4:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8001cc8:	bb13      	cbnz	r3, 8001d10 <mcp794xx_set_time_and_date+0x13c>
        status = a_pcf85xxx_dec2bcd(pTime->hour);
 8001cca:	78e8      	ldrb	r0, [r5, #3]
 8001ccc:	f7ff fe1a 	bl	8001904 <a_pcf85xxx_dec2bcd>
        err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_RTC_HOUR_REG,  (uint8_t *)&status);
 8001cd0:	2102      	movs	r1, #2
        status = a_pcf85xxx_dec2bcd(pTime->hour);
 8001cd2:	f88d 0007 	strb.w	r0, [sp, #7]
        err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_RTC_HOUR_REG,  (uint8_t *)&status);
 8001cd6:	f10d 0207 	add.w	r2, sp, #7
 8001cda:	4620      	mov	r0, r4
 8001cdc:	f7ff fd8b 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8001ce0:	7038      	strb	r0, [r7, #0]
        if(err)
 8001ce2:	b998      	cbnz	r0, 8001d0c <mcp794xx_set_time_and_date+0x138>
    status = a_pcf85xxx_dec2bcd(pTime->weekDay) | (ptimeBuffer[3] & (MCP794XX_OSC_RUN_STATUS_MASK | MCP794XX_PWR_FAIL_STATUS_MASK | MCP794XX_VBAT_EN_MASK));
 8001ce4:	79e8      	ldrb	r0, [r5, #7]
 8001ce6:	f7ff fe0d 	bl	8001904 <a_pcf85xxx_dec2bcd>
 8001cea:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001cee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cf2:	4318      	orrs	r0, r3
 8001cf4:	f88d 0007 	strb.w	r0, [sp, #7]
    err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_RTC_WKDAY_REG, (uint8_t *)&status);
 8001cf8:	f10d 0207 	add.w	r2, sp, #7
 8001cfc:	2103      	movs	r1, #3
 8001cfe:	4620      	mov	r0, r4
 8001d00:	f7ff fd79 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8001d04:	7038      	strb	r0, [r7, #0]
    if(err)
 8001d06:	b310      	cbz	r0, 8001d4e <mcp794xx_set_time_and_date+0x17a>
        a_mcp794xx_print_error_msg(pHandle, "to write week day");
 8001d08:	493b      	ldr	r1, [pc, #236]	; (8001df8 <mcp794xx_set_time_and_date+0x224>)
 8001d0a:	e7b5      	b.n	8001c78 <mcp794xx_set_time_and_date+0xa4>
            a_mcp794xx_print_error_msg(pHandle, "to write hours");
 8001d0c:	493b      	ldr	r1, [pc, #236]	; (8001dfc <mcp794xx_set_time_and_date+0x228>)
 8001d0e:	e7b3      	b.n	8001c78 <mcp794xx_set_time_and_date+0xa4>
    else if(pHandle->time_param.time_Format == MCP794XX_12HR_FORMAT)
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d1e7      	bne.n	8001ce4 <mcp794xx_set_time_and_date+0x110>
        status = a_pcf85xxx_dec2bcd(pTime->hour) |(ptimeBuffer[2] & (MCP794XX_12HR_24HR_FRMT_STAT_MASK | MCP794XX_TIME_AM_PM_MASK));
 8001d14:	78e8      	ldrb	r0, [r5, #3]
 8001d16:	f7ff fdf5 	bl	8001904 <a_pcf85xxx_dec2bcd>
 8001d1a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001d1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001d22:	4318      	orrs	r0, r3
 8001d24:	f88d 0007 	strb.w	r0, [sp, #7]
        err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_RTC_HOUR_REG, (uint8_t *)&status);
 8001d28:	f10d 0207 	add.w	r2, sp, #7
 8001d2c:	2102      	movs	r1, #2
 8001d2e:	4620      	mov	r0, r4
 8001d30:	f7ff fd61 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8001d34:	7038      	strb	r0, [r7, #0]
        if(err)
 8001d36:	2800      	cmp	r0, #0
 8001d38:	d1e8      	bne.n	8001d0c <mcp794xx_set_time_and_date+0x138>
        err = mcp794xx_set_am_pm(pHandle, MCP794XX_RTC_HOUR_REG, pTime->am_pm_indicator);
 8001d3a:	7a6a      	ldrb	r2, [r5, #9]
 8001d3c:	2102      	movs	r1, #2
 8001d3e:	4620      	mov	r0, r4
 8001d40:	f7ff ff12 	bl	8001b68 <mcp794xx_set_am_pm>
 8001d44:	7038      	strb	r0, [r7, #0]
        if(err)
 8001d46:	2800      	cmp	r0, #0
 8001d48:	d0cc      	beq.n	8001ce4 <mcp794xx_set_time_and_date+0x110>
    return 0;           /**< success */
 8001d4a:	4606      	mov	r6, r0
 8001d4c:	e754      	b.n	8001bf8 <mcp794xx_set_time_and_date+0x24>
    status = a_pcf85xxx_dec2bcd(pTime->date);
 8001d4e:	78a8      	ldrb	r0, [r5, #2]
 8001d50:	f7ff fdd8 	bl	8001904 <a_pcf85xxx_dec2bcd>
    err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_RTC_DATE_REG, (uint8_t *)&status);
 8001d54:	2104      	movs	r1, #4
    status = a_pcf85xxx_dec2bcd(pTime->date);
 8001d56:	f88d 0007 	strb.w	r0, [sp, #7]
    err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_RTC_DATE_REG, (uint8_t *)&status);
 8001d5a:	f10d 0207 	add.w	r2, sp, #7
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f7ff fd49 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8001d64:	7038      	strb	r0, [r7, #0]
    if(err)
 8001d66:	b108      	cbz	r0, 8001d6c <mcp794xx_set_time_and_date+0x198>
        a_mcp794xx_print_error_msg(pHandle, "to write date");
 8001d68:	4925      	ldr	r1, [pc, #148]	; (8001e00 <mcp794xx_set_time_and_date+0x22c>)
 8001d6a:	e785      	b.n	8001c78 <mcp794xx_set_time_and_date+0xa4>
    status = a_pcf85xxx_dec2bcd(pTime->month) | (a_pcf85xxx_bcd2dec(ptimeBuffer[5] & MCP794XX_LEAP_YEAR_STATUS_MASK));
 8001d6c:	79a8      	ldrb	r0, [r5, #6]
 8001d6e:	f7ff fdc9 	bl	8001904 <a_pcf85xxx_dec2bcd>
 8001d72:	4602      	mov	r2, r0
 8001d74:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8001d78:	f000 0020 	and.w	r0, r0, #32
 8001d7c:	f7ff fdcb 	bl	8001916 <a_pcf85xxx_bcd2dec>
 8001d80:	4310      	orrs	r0, r2
 8001d82:	f88d 0007 	strb.w	r0, [sp, #7]
    err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_RTC_MONTH_REG,  (uint8_t *)&status);
 8001d86:	f10d 0207 	add.w	r2, sp, #7
 8001d8a:	2105      	movs	r1, #5
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	f7ff fd32 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8001d92:	7038      	strb	r0, [r7, #0]
    if(err)
 8001d94:	b108      	cbz	r0, 8001d9a <mcp794xx_set_time_and_date+0x1c6>
        a_mcp794xx_print_error_msg(pHandle, "to write month");
 8001d96:	491b      	ldr	r1, [pc, #108]	; (8001e04 <mcp794xx_set_time_and_date+0x230>)
 8001d98:	e76e      	b.n	8001c78 <mcp794xx_set_time_and_date+0xa4>
    status = a_pcf85xxx_dec2bcd(pTime->year);
 8001d9a:	7828      	ldrb	r0, [r5, #0]
 8001d9c:	f7ff fdb2 	bl	8001904 <a_pcf85xxx_dec2bcd>
    err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_RTC_YEAR_REG, (uint8_t *)&status);
 8001da0:	2106      	movs	r1, #6
    status = a_pcf85xxx_dec2bcd(pTime->year);
 8001da2:	f88d 0007 	strb.w	r0, [sp, #7]
    err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_RTC_YEAR_REG, (uint8_t *)&status);
 8001da6:	f10d 0207 	add.w	r2, sp, #7
 8001daa:	4620      	mov	r0, r4
 8001dac:	f7ff fd23 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8001db0:	7038      	strb	r0, [r7, #0]
    if(err)
 8001db2:	2800      	cmp	r0, #0
 8001db4:	d0c9      	beq.n	8001d4a <mcp794xx_set_time_and_date+0x176>
        a_mcp794xx_print_error_msg(pHandle, "to write year");
 8001db6:	4914      	ldr	r1, [pc, #80]	; (8001e08 <mcp794xx_set_time_and_date+0x234>)
 8001db8:	e75e      	b.n	8001c78 <mcp794xx_set_time_and_date+0xa4>
        return 2;     /**< return failed error */
 8001dba:	2602      	movs	r6, #2
 8001dbc:	e71c      	b.n	8001bf8 <mcp794xx_set_time_and_date+0x24>
        return 3;      /**< return failed error */
 8001dbe:	2603      	movs	r6, #3
 8001dc0:	e71a      	b.n	8001bf8 <mcp794xx_set_time_and_date+0x24>
 8001dc2:	bf00      	nop
 8001dc4:	08008add 	.word	0x08008add
 8001dc8:	08008b16 	.word	0x08008b16
 8001dcc:	08008b50 	.word	0x08008b50
 8001dd0:	08008b89 	.word	0x08008b89
 8001dd4:	08008bc5 	.word	0x08008bc5
 8001dd8:	08008c00 	.word	0x08008c00
 8001ddc:	08008c3c 	.word	0x08008c3c
 8001de0:	08008c75 	.word	0x08008c75
 8001de4:	08008cae 	.word	0x08008cae
 8001de8:	200003bc 	.word	0x200003bc
 8001dec:	08008ccc 	.word	0x08008ccc
 8001df0:	08008ce3 	.word	0x08008ce3
 8001df4:	08008cf4 	.word	0x08008cf4
 8001df8:	08008d14 	.word	0x08008d14
 8001dfc:	08008d05 	.word	0x08008d05
 8001e00:	08008d26 	.word	0x08008d26
 8001e04:	08008d34 	.word	0x08008d34
 8001e08:	08008d43 	.word	0x08008d43

08001e0c <mcp794xx_get_am_pm>:
 *          - 1 failed to get AM/PM period
            - 2 handle null
 *          - 3 handle is not initialized
 */
uint8_t mcp794xx_get_am_pm(mcp794xx_handle_t *const pHandle, uint8_t u8Register, mcp794xx_am_pm_indicator_t *pAm_pm)
{
 8001e0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e0e:	4616      	mov	r6, r2
    uint8_t read_status;

    if(pHandle == NULL)
 8001e10:	4605      	mov	r5, r0
 8001e12:	b1c0      	cbz	r0, 8001e46 <mcp794xx_get_am_pm+0x3a>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 8001e14:	7fc4      	ldrb	r4, [r0, #31]
 8001e16:	2c01      	cmp	r4, #1
 8001e18:	d117      	bne.n	8001e4a <mcp794xx_get_am_pm+0x3e>
        return 3;      /**< return failed error */

    err = rtc_mcp794xx_i2c_read(pHandle, u8Register, (uint8_t *)&read_status, 1);
 8001e1a:	4623      	mov	r3, r4
 8001e1c:	f10d 0207 	add.w	r2, sp, #7
 8001e20:	f7ff fcfa 	bl	8001818 <rtc_mcp794xx_i2c_read>
 8001e24:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <mcp794xx_get_am_pm+0x44>)
 8001e26:	7018      	strb	r0, [r3, #0]
    if(err)
 8001e28:	b130      	cbz	r0, 8001e38 <mcp794xx_get_am_pm+0x2c>
    {
        a_mcp794xx_print_error_msg(pHandle, "read time am/pm indicator");
 8001e2a:	490a      	ldr	r1, [pc, #40]	; (8001e54 <mcp794xx_get_am_pm+0x48>)
 8001e2c:	4628      	mov	r0, r5
 8001e2e:	f7ff fd63 	bl	80018f8 <a_mcp794xx_print_error_msg>
    }

    *pAm_pm = (mcp794xx_am_pm_indicator_t)((read_status & MCP794XX_ALARMx_AM_PM_MASK) >> 5);

    return 0;              /**< success */
}
 8001e32:	4620      	mov	r0, r4
 8001e34:	b002      	add	sp, #8
 8001e36:	bd70      	pop	{r4, r5, r6, pc}
    *pAm_pm = (mcp794xx_am_pm_indicator_t)((read_status & MCP794XX_ALARMx_AM_PM_MASK) >> 5);
 8001e38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001e3c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001e40:	7033      	strb	r3, [r6, #0]
    return 0;              /**< success */
 8001e42:	4604      	mov	r4, r0
 8001e44:	e7f5      	b.n	8001e32 <mcp794xx_get_am_pm+0x26>
        return 2;     /**< return failed error */
 8001e46:	2402      	movs	r4, #2
 8001e48:	e7f3      	b.n	8001e32 <mcp794xx_get_am_pm+0x26>
        return 3;      /**< return failed error */
 8001e4a:	2403      	movs	r4, #3
 8001e4c:	e7f1      	b.n	8001e32 <mcp794xx_get_am_pm+0x26>
 8001e4e:	bf00      	nop
 8001e50:	200003bc 	.word	0x200003bc
 8001e54:	08008d51 	.word	0x08008d51

08001e58 <mcp794xx_set_osc_status>:
 *          - 1 failed to set oscillator status bit
            - 2 handle null
 *          - 3 handle is not initialized
 */
uint8_t mcp794xx_set_osc_status(mcp794xx_handle_t *const pHandle, mcp794xx_osc_status_t status)
{
 8001e58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e5a:	460f      	mov	r7, r1
    uint8_t read_status;

    if(pHandle == NULL)
 8001e5c:	4604      	mov	r4, r0
 8001e5e:	b320      	cbz	r0, 8001eaa <mcp794xx_set_osc_status+0x52>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 8001e60:	7fc5      	ldrb	r5, [r0, #31]
 8001e62:	2d01      	cmp	r5, #1
 8001e64:	d123      	bne.n	8001eae <mcp794xx_set_osc_status+0x56>
        return 3;      /**< return failed error */

    err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_RTC_SECOND_REG, (uint8_t *)&read_status, 1);
 8001e66:	462b      	mov	r3, r5
 8001e68:	f10d 0207 	add.w	r2, sp, #7
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	f7ff fcd3 	bl	8001818 <rtc_mcp794xx_i2c_read>
 8001e72:	4e11      	ldr	r6, [pc, #68]	; (8001eb8 <mcp794xx_set_osc_status+0x60>)
 8001e74:	7030      	strb	r0, [r6, #0]
    if(err)
 8001e76:	b130      	cbz	r0, 8001e86 <mcp794xx_set_osc_status+0x2e>
    {
        a_mcp794xx_print_error_msg(pHandle, "read oscillator status before write");
 8001e78:	4910      	ldr	r1, [pc, #64]	; (8001ebc <mcp794xx_set_osc_status+0x64>)
    read_status |= (status << 7);

    err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_RTC_SECOND_REG, (uint8_t*)&read_status);
    if(err)
    {
        a_mcp794xx_print_error_msg(pHandle, "set oscillator status");
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	f7ff fd3c 	bl	80018f8 <a_mcp794xx_print_error_msg>
        return 1;           /**< failed error */
    }

    return 0;              /**< success */
}
 8001e80:	4628      	mov	r0, r5
 8001e82:	b003      	add	sp, #12
 8001e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    read_status &= ~(1 << 7);
 8001e86:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    read_status |= (status << 7);
 8001e8e:	ea43 11c7 	orr.w	r1, r3, r7, lsl #7
 8001e92:	f88d 1007 	strb.w	r1, [sp, #7]
    err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_RTC_SECOND_REG, (uint8_t*)&read_status);
 8001e96:	f10d 0207 	add.w	r2, sp, #7
 8001e9a:	4601      	mov	r1, r0
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	f7ff fcaa 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8001ea2:	7030      	strb	r0, [r6, #0]
    if(err)
 8001ea4:	b128      	cbz	r0, 8001eb2 <mcp794xx_set_osc_status+0x5a>
        a_mcp794xx_print_error_msg(pHandle, "set oscillator status");
 8001ea6:	4906      	ldr	r1, [pc, #24]	; (8001ec0 <mcp794xx_set_osc_status+0x68>)
 8001ea8:	e7e7      	b.n	8001e7a <mcp794xx_set_osc_status+0x22>
        return 2;     /**< return failed error */
 8001eaa:	2502      	movs	r5, #2
 8001eac:	e7e8      	b.n	8001e80 <mcp794xx_set_osc_status+0x28>
        return 3;      /**< return failed error */
 8001eae:	2503      	movs	r5, #3
 8001eb0:	e7e6      	b.n	8001e80 <mcp794xx_set_osc_status+0x28>
    return 0;              /**< success */
 8001eb2:	4605      	mov	r5, r0
 8001eb4:	e7e4      	b.n	8001e80 <mcp794xx_set_osc_status+0x28>
 8001eb6:	bf00      	nop
 8001eb8:	200003bc 	.word	0x200003bc
 8001ebc:	08008d6b 	.word	0x08008d6b
 8001ec0:	08008d8f 	.word	0x08008d8f

08001ec4 <mcp794xx_get_pwr_fail_time_stamp>:
 * @note    - The PWRFAIL bit must be cleared to log new timestamp data.
            - Reading or writing the external battery back up bit will clear the pwr fail time stamp.
            - Time stamp should be read at start up before reading or setting current time and date.
 */
uint8_t mcp794xx_get_pwr_fail_time_stamp(mcp794xx_handle_t *const pHandle, mcp794xx_pwr_fail_type_t powerMode, mcp794xx_time_t *pTime)
{
 8001ec4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ec6:	4614      	mov	r4, r2

    uint8_t timeBuffer[MCP794XX_PWRFAIL_BUFFER_LENGTH];

    if(pHandle == NULL)
 8001ec8:	4605      	mov	r5, r0
 8001eca:	2800      	cmp	r0, #0
 8001ecc:	d058      	beq.n	8001f80 <mcp794xx_get_pwr_fail_time_stamp+0xbc>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 8001ece:	7fc6      	ldrb	r6, [r0, #31]
 8001ed0:	2e01      	cmp	r6, #1
 8001ed2:	d157      	bne.n	8001f84 <mcp794xx_get_pwr_fail_time_stamp+0xc0>
        return 3;      /**< return failed error */

    if(pHandle->device_variant == MCP7940M_VARIANT){
 8001ed4:	7f83      	ldrb	r3, [r0, #30]
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d104      	bne.n	8001ee4 <mcp794xx_get_pwr_fail_time_stamp+0x20>
         a_mcp794xx_print_error_msg(pHandle, "read power-up time stamp, not supported for the mcp7940M variant");
 8001eda:	492b      	ldr	r1, [pc, #172]	; (8001f88 <mcp794xx_get_pwr_fail_time_stamp+0xc4>)

            break;
        }

    default:
         a_mcp794xx_print_error_msg(pHandle, "invalid pwr fail mode selected");
 8001edc:	f7ff fd0c 	bl	80018f8 <a_mcp794xx_print_error_msg>
        return 4;   /**< invalid power failure mode */
 8001ee0:	2604      	movs	r6, #4
 8001ee2:	e011      	b.n	8001f08 <mcp794xx_get_pwr_fail_time_stamp+0x44>
   switch((int)powerMode)
 8001ee4:	b119      	cbz	r1, 8001eee <mcp794xx_get_pwr_fail_time_stamp+0x2a>
 8001ee6:	2901      	cmp	r1, #1
 8001ee8:	d011      	beq.n	8001f0e <mcp794xx_get_pwr_fail_time_stamp+0x4a>
         a_mcp794xx_print_error_msg(pHandle, "invalid pwr fail mode selected");
 8001eea:	4928      	ldr	r1, [pc, #160]	; (8001f8c <mcp794xx_get_pwr_fail_time_stamp+0xc8>)
 8001eec:	e7f6      	b.n	8001edc <mcp794xx_get_pwr_fail_time_stamp+0x18>
            err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_PWR_DWN_MIN_REG, (uint8_t *)timeBuffer, MCP794XX_PWRFAIL_BUFFER_LENGTH);
 8001eee:	2304      	movs	r3, #4
 8001ef0:	eb0d 0203 	add.w	r2, sp, r3
 8001ef4:	2118      	movs	r1, #24
 8001ef6:	f7ff fc8f 	bl	8001818 <rtc_mcp794xx_i2c_read>
 8001efa:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <mcp794xx_get_pwr_fail_time_stamp+0xcc>)
 8001efc:	7018      	strb	r0, [r3, #0]
            if(err)
 8001efe:	b188      	cbz	r0, 8001f24 <mcp794xx_get_pwr_fail_time_stamp+0x60>
                a_mcp794xx_print_error_msg(pHandle, "read power-down time stamp");
 8001f00:	4924      	ldr	r1, [pc, #144]	; (8001f94 <mcp794xx_get_pwr_fail_time_stamp+0xd0>)
                a_mcp794xx_print_error_msg(pHandle, "read power-up time stamp");
 8001f02:	4628      	mov	r0, r5
 8001f04:	f7ff fcf8 	bl	80018f8 <a_mcp794xx_print_error_msg>
    }
    pTime->date = a_pcf85xxx_bcd2dec(timeBuffer[2] & MCP794XX_PWRXX_DATE_BCD_MASK);          /**< read the power failure date */
    pTime->month = a_pcf85xxx_bcd2dec(timeBuffer[3] & MCP794XX_MONTH_BCD_MASK);              /**< read the power failure month timestamp */

    return 0;  /**< success */
}
 8001f08:	4630      	mov	r0, r6
 8001f0a:	b002      	add	sp, #8
 8001f0c:	bd70      	pop	{r4, r5, r6, pc}
            err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_PWR_UP_MIN_REG, (uint8_t *)timeBuffer, MCP794XX_PWRFAIL_BUFFER_LENGTH);
 8001f0e:	2304      	movs	r3, #4
 8001f10:	eb0d 0203 	add.w	r2, sp, r3
 8001f14:	211c      	movs	r1, #28
 8001f16:	f7ff fc7f 	bl	8001818 <rtc_mcp794xx_i2c_read>
 8001f1a:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <mcp794xx_get_pwr_fail_time_stamp+0xcc>)
 8001f1c:	7018      	strb	r0, [r3, #0]
            if(err)
 8001f1e:	b108      	cbz	r0, 8001f24 <mcp794xx_get_pwr_fail_time_stamp+0x60>
                a_mcp794xx_print_error_msg(pHandle, "read power-up time stamp");
 8001f20:	491d      	ldr	r1, [pc, #116]	; (8001f98 <mcp794xx_get_pwr_fail_time_stamp+0xd4>)
 8001f22:	e7ee      	b.n	8001f02 <mcp794xx_get_pwr_fail_time_stamp+0x3e>
    pTime->minute = a_pcf85xxx_bcd2dec(timeBuffer[0] & MCP794XX_PWRXX_MIN_BCD_MASK);         /**< read the power failure minute timestamp */
 8001f24:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001f28:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001f2c:	f7ff fcf3 	bl	8001916 <a_pcf85xxx_bcd2dec>
 8001f30:	7120      	strb	r0, [r4, #4]
    if(pHandle->time_param.time_Format == MCP794XX_24HR_FORMAT)                              /**< read the power failure hour timestamp in 24hr format*/
 8001f32:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
 8001f36:	b9b3      	cbnz	r3, 8001f66 <mcp794xx_get_pwr_fail_time_stamp+0xa2>
        pTime->hour = a_pcf85xxx_bcd2dec(timeBuffer[1] & MCP794XX_PWRXX_24HR_FRMT_BCD_MASK);
 8001f38:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8001f3c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8001f40:	f7ff fce9 	bl	8001916 <a_pcf85xxx_bcd2dec>
 8001f44:	70e0      	strb	r0, [r4, #3]
    pTime->date = a_pcf85xxx_bcd2dec(timeBuffer[2] & MCP794XX_PWRXX_DATE_BCD_MASK);          /**< read the power failure date */
 8001f46:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8001f4a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8001f4e:	f7ff fce2 	bl	8001916 <a_pcf85xxx_bcd2dec>
 8001f52:	70a0      	strb	r0, [r4, #2]
    pTime->month = a_pcf85xxx_bcd2dec(timeBuffer[3] & MCP794XX_MONTH_BCD_MASK);              /**< read the power failure month timestamp */
 8001f54:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001f58:	f000 001f 	and.w	r0, r0, #31
 8001f5c:	f7ff fcdb 	bl	8001916 <a_pcf85xxx_bcd2dec>
    return 0;  /**< success */
 8001f60:	2600      	movs	r6, #0
    pTime->month = a_pcf85xxx_bcd2dec(timeBuffer[3] & MCP794XX_MONTH_BCD_MASK);              /**< read the power failure month timestamp */
 8001f62:	71a0      	strb	r0, [r4, #6]
    return 0;  /**< success */
 8001f64:	e7d0      	b.n	8001f08 <mcp794xx_get_pwr_fail_time_stamp+0x44>
    else if(pHandle->time_param.time_Format == MCP794XX_12HR_FORMAT)                          /**< read the power failure hour timestamp in 12hr format*/
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d1ed      	bne.n	8001f46 <mcp794xx_get_pwr_fail_time_stamp+0x82>
        pTime->hour = a_pcf85xxx_bcd2dec(timeBuffer[1] & MCP794XX_PWRXX_12HR_FRMT_BCD_MASK);
 8001f6a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001f6e:	f002 001f 	and.w	r0, r2, #31
 8001f72:	f7ff fcd0 	bl	8001916 <a_pcf85xxx_bcd2dec>
        pTime->am_pm_indicator = ((timeBuffer[1] & MCP794XX_PWRXX_TIME_AM_PM_MASK) >> 5) ;
 8001f76:	f3c2 1240 	ubfx	r2, r2, #5, #1
        pTime->hour = a_pcf85xxx_bcd2dec(timeBuffer[1] & MCP794XX_PWRXX_12HR_FRMT_BCD_MASK);
 8001f7a:	70e0      	strb	r0, [r4, #3]
        pTime->am_pm_indicator = ((timeBuffer[1] & MCP794XX_PWRXX_TIME_AM_PM_MASK) >> 5) ;
 8001f7c:	7262      	strb	r2, [r4, #9]
 8001f7e:	e7e2      	b.n	8001f46 <mcp794xx_get_pwr_fail_time_stamp+0x82>
        return 2;     /**< return failed error */
 8001f80:	2602      	movs	r6, #2
 8001f82:	e7c1      	b.n	8001f08 <mcp794xx_get_pwr_fail_time_stamp+0x44>
        return 3;      /**< return failed error */
 8001f84:	2603      	movs	r6, #3
 8001f86:	e7bf      	b.n	8001f08 <mcp794xx_get_pwr_fail_time_stamp+0x44>
 8001f88:	08008da5 	.word	0x08008da5
 8001f8c:	08008e1a 	.word	0x08008e1a
 8001f90:	200003bc 	.word	0x200003bc
 8001f94:	08008de6 	.word	0x08008de6
 8001f98:	08008e01 	.word	0x08008e01

08001f9c <mcp794xx_set_pwr_fail_time_param>:
 *          - 1 failed
            - 2 handle null
 *          - 3 handle is not initialized
 */
uint8_t mcp794xx_set_pwr_fail_time_param(mcp794xx_handle_t *const pHandle)
{
 8001f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t format, am_pm_indicator;

    if(pHandle->device_variant == MCP7940M_VARIANT){
 8001f9e:	7f83      	ldrb	r3, [r0, #30]
 8001fa0:	2b03      	cmp	r3, #3
{
 8001fa2:	4604      	mov	r4, r0
    if(pHandle->device_variant == MCP7940M_VARIANT){
 8001fa4:	d105      	bne.n	8001fb2 <mcp794xx_set_pwr_fail_time_param+0x16>
         a_mcp794xx_print_error_msg(pHandle, "pwr fail param, not supported for the mcp7940M variant");
 8001fa6:	491d      	ldr	r1, [pc, #116]	; (800201c <mcp794xx_set_pwr_fail_time_param+0x80>)
 8001fa8:	f7ff fca6 	bl	80018f8 <a_mcp794xx_print_error_msg>
        return 4;
 8001fac:	2004      	movs	r0, #4
	err = mcp794xx_set_am_pm(pHandle, MCP794XX_PWR_UP_HOUR_REG,  am_pm_indicator);
	if(err){
	  return err;
	}
	return 0; 			/**< success */
}
 8001fae:	b003      	add	sp, #12
 8001fb0:	bd30      	pop	{r4, r5, pc}
	err = mcp794xx_get_hour_format(pHandle, MCP794XX_RTC_HOUR_REG, &format);
 8001fb2:	f10d 0206 	add.w	r2, sp, #6
 8001fb6:	2102      	movs	r1, #2
 8001fb8:	f7ff fdae 	bl	8001b18 <mcp794xx_get_hour_format>
 8001fbc:	4d18      	ldr	r5, [pc, #96]	; (8002020 <mcp794xx_set_pwr_fail_time_param+0x84>)
 8001fbe:	7028      	strb	r0, [r5, #0]
	if(err){
 8001fc0:	2800      	cmp	r0, #0
 8001fc2:	d1f4      	bne.n	8001fae <mcp794xx_set_pwr_fail_time_param+0x12>
	err = mcp794xx_get_am_pm(pHandle, MCP794XX_RTC_HOUR_REG, &am_pm_indicator);
 8001fc4:	f10d 0207 	add.w	r2, sp, #7
 8001fc8:	2102      	movs	r1, #2
 8001fca:	4620      	mov	r0, r4
 8001fcc:	f7ff ff1e 	bl	8001e0c <mcp794xx_get_am_pm>
 8001fd0:	7028      	strb	r0, [r5, #0]
	if(err){
 8001fd2:	2800      	cmp	r0, #0
 8001fd4:	d1eb      	bne.n	8001fae <mcp794xx_set_pwr_fail_time_param+0x12>
	err = mcp794xx_set_hour_format(pHandle, MCP794XX_PWR_DWN_HOUR_REG, format);          /**< set time format for power down time stamp */
 8001fd6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8001fda:	2119      	movs	r1, #25
 8001fdc:	4620      	mov	r0, r4
 8001fde:	f7ff fd63 	bl	8001aa8 <mcp794xx_set_hour_format>
 8001fe2:	7028      	strb	r0, [r5, #0]
	if(err){
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	d1e2      	bne.n	8001fae <mcp794xx_set_pwr_fail_time_param+0x12>
	err = mcp794xx_set_hour_format(pHandle, MCP794XX_PWR_UP_HOUR_REG, format);          /**< set time format for power up time stamp */
 8001fe8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8001fec:	211d      	movs	r1, #29
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f7ff fd5a 	bl	8001aa8 <mcp794xx_set_hour_format>
 8001ff4:	7028      	strb	r0, [r5, #0]
	if(err){
 8001ff6:	2800      	cmp	r0, #0
 8001ff8:	d1d9      	bne.n	8001fae <mcp794xx_set_pwr_fail_time_param+0x12>
	err = mcp794xx_set_am_pm(pHandle, MCP794XX_PWR_DWN_HOUR_REG,  am_pm_indicator);
 8001ffa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8001ffe:	2119      	movs	r1, #25
 8002000:	4620      	mov	r0, r4
 8002002:	f7ff fdb1 	bl	8001b68 <mcp794xx_set_am_pm>
 8002006:	7028      	strb	r0, [r5, #0]
	if(err){
 8002008:	2800      	cmp	r0, #0
 800200a:	d1d0      	bne.n	8001fae <mcp794xx_set_pwr_fail_time_param+0x12>
	err = mcp794xx_set_am_pm(pHandle, MCP794XX_PWR_UP_HOUR_REG,  am_pm_indicator);
 800200c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002010:	211d      	movs	r1, #29
 8002012:	4620      	mov	r0, r4
 8002014:	f7ff fda8 	bl	8001b68 <mcp794xx_set_am_pm>
 8002018:	7028      	strb	r0, [r5, #0]
	if(err){
 800201a:	e7c8      	b.n	8001fae <mcp794xx_set_pwr_fail_time_param+0x12>
 800201c:	08008e39 	.word	0x08008e39
 8002020:	200003bc 	.word	0x200003bc

08002024 <mcp794xx_set_alarm_enable_status>:
*          - 1 failed
           - 2 handle null
*          - 3 handle is not initialized
*/
uint8_t mcp794xx_set_alarm_enable_status(mcp794xx_handle_t *const pHandle, mcp794xx_alarm_t alarm, mcp794xx_bool_t status)
{
 8002024:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002028:	4688      	mov	r8, r1
 800202a:	4617      	mov	r7, r2
    uint8_t read_status;

    if(pHandle == NULL)
 800202c:	4604      	mov	r4, r0
 800202e:	2800      	cmp	r0, #0
 8002030:	d03b      	beq.n	80020aa <mcp794xx_set_alarm_enable_status+0x86>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 8002032:	7fc5      	ldrb	r5, [r0, #31]
 8002034:	2d01      	cmp	r5, #1
 8002036:	d13a      	bne.n	80020ae <mcp794xx_set_alarm_enable_status+0x8a>
        return 3;      /**< return failed error */

    err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_CONTROL_REG, (uint8_t *)&read_status, 1);
 8002038:	462b      	mov	r3, r5
 800203a:	f10d 0207 	add.w	r2, sp, #7
 800203e:	2107      	movs	r1, #7
 8002040:	f7ff fbea 	bl	8001818 <rtc_mcp794xx_i2c_read>
 8002044:	4e1b      	ldr	r6, [pc, #108]	; (80020b4 <mcp794xx_set_alarm_enable_status+0x90>)
 8002046:	7030      	strb	r0, [r6, #0]
    if(err)
 8002048:	b138      	cbz	r0, 800205a <mcp794xx_set_alarm_enable_status+0x36>
    {
        a_mcp794xx_print_error_msg(pHandle, "read control register");
 800204a:	491b      	ldr	r1, [pc, #108]	; (80020b8 <mcp794xx_set_alarm_enable_status+0x94>)
        read_status &= ~(1 << 4);           /**< clear alarm enable status */
        read_status |= (status << 4);
        err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_CONTROL_REG, (uint8_t *)&read_status);
        if(err)
        {
            a_mcp794xx_print_error_msg(pHandle, "write alarm enable status");
 800204c:	4620      	mov	r0, r4
 800204e:	f7ff fc53 	bl	80018f8 <a_mcp794xx_print_error_msg>
        a_mcp794xx_print_error_msg(pHandle, "invalid alarm selected");
        return 4;           /**< invalid alarm */
    }

    return 0;              /**< success */
}
 8002052:	4628      	mov	r0, r5
 8002054:	b002      	add	sp, #8
 8002056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(alarm == MCP794XX_ALARM0)
 800205a:	f1b8 0f00 	cmp.w	r8, #0
 800205e:	d111      	bne.n	8002084 <mcp794xx_set_alarm_enable_status+0x60>
        read_status &= ~(1 << 4);           /**< clear alarm enable status */
 8002060:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002064:	f023 0310 	bic.w	r3, r3, #16
        read_status |= (status << 4);
 8002068:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
        err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_CONTROL_REG, (uint8_t *)&read_status);
 800206c:	f10d 0207 	add.w	r2, sp, #7
 8002070:	2107      	movs	r1, #7
 8002072:	4620      	mov	r0, r4
        read_status |= (status << 4);
 8002074:	f88d 3007 	strb.w	r3, [sp, #7]
        err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_CONTROL_REG, (uint8_t *)&read_status);
 8002078:	f7ff fbbd 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 800207c:	7030      	strb	r0, [r6, #0]
        if(err)
 800207e:	b108      	cbz	r0, 8002084 <mcp794xx_set_alarm_enable_status+0x60>
            a_mcp794xx_print_error_msg(pHandle, "write alarm enable status");
 8002080:	490e      	ldr	r1, [pc, #56]	; (80020bc <mcp794xx_set_alarm_enable_status+0x98>)
 8002082:	e7e3      	b.n	800204c <mcp794xx_set_alarm_enable_status+0x28>
        read_status &= ~(1 << 5);           /**< clear alarm enable status */
 8002084:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002088:	f023 0320 	bic.w	r3, r3, #32
        read_status |= (status << 5);
 800208c:	ea43 1247 	orr.w	r2, r3, r7, lsl #5
 8002090:	f88d 2007 	strb.w	r2, [sp, #7]
        err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_CONTROL_REG, (uint8_t *)&read_status);
 8002094:	2107      	movs	r1, #7
 8002096:	f10d 0207 	add.w	r2, sp, #7
 800209a:	4620      	mov	r0, r4
 800209c:	f7ff fbab 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 80020a0:	7030      	strb	r0, [r6, #0]
        if(err)
 80020a2:	2800      	cmp	r0, #0
 80020a4:	d1ec      	bne.n	8002080 <mcp794xx_set_alarm_enable_status+0x5c>
    return 0;              /**< success */
 80020a6:	4605      	mov	r5, r0
 80020a8:	e7d3      	b.n	8002052 <mcp794xx_set_alarm_enable_status+0x2e>
        return 2;     /**< return failed error */
 80020aa:	2502      	movs	r5, #2
 80020ac:	e7d1      	b.n	8002052 <mcp794xx_set_alarm_enable_status+0x2e>
        return 3;      /**< return failed error */
 80020ae:	2503      	movs	r5, #3
 80020b0:	e7cf      	b.n	8002052 <mcp794xx_set_alarm_enable_status+0x2e>
 80020b2:	bf00      	nop
 80020b4:	200003bc 	.word	0x200003bc
 80020b8:	08008e70 	.word	0x08008e70
 80020bc:	08008e86 	.word	0x08008e86

080020c0 <mcp794xx_set_alarm_interrupt_output_polarity>:
 *          - 3 handle is not initialized
 *          - 4 invalid alarm
 * @note none
 */
uint8_t mcp794xx_set_alarm_interrupt_output_polarity(mcp794xx_handle_t *const pHandle, mcp794xx_alarm_t alarm, mcp794xx_int_output_polarity_t polarity)
{
 80020c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020c2:	4616      	mov	r6, r2
    uint8_t read_status;

    if(pHandle == NULL)
 80020c4:	4605      	mov	r5, r0
 80020c6:	2800      	cmp	r0, #0
 80020c8:	d044      	beq.n	8002154 <mcp794xx_set_alarm_interrupt_output_polarity+0x94>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 80020ca:	7fc4      	ldrb	r4, [r0, #31]
 80020cc:	2c01      	cmp	r4, #1
 80020ce:	d143      	bne.n	8002158 <mcp794xx_set_alarm_interrupt_output_polarity+0x98>
        return 3;      /**< return failed error */

    switch((int)alarm)
 80020d0:	b131      	cbz	r1, 80020e0 <mcp794xx_set_alarm_interrupt_output_polarity+0x20>
 80020d2:	2901      	cmp	r1, #1
 80020d4:	d027      	beq.n	8002126 <mcp794xx_set_alarm_interrupt_output_polarity+0x66>
            break;
        }

        default :
        {
            a_mcp794xx_print_error_msg(pHandle, "invalid alarm selected");
 80020d6:	4921      	ldr	r1, [pc, #132]	; (800215c <mcp794xx_set_alarm_interrupt_output_polarity+0x9c>)
 80020d8:	f7ff fc0e 	bl	80018f8 <a_mcp794xx_print_error_msg>
            return 4;
 80020dc:	2404      	movs	r4, #4
 80020de:	e01f      	b.n	8002120 <mcp794xx_set_alarm_interrupt_output_polarity+0x60>
            err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_ALM0_WKDAY_REG, (uint8_t *)&read_status, 1);
 80020e0:	4623      	mov	r3, r4
 80020e2:	f10d 0207 	add.w	r2, sp, #7
 80020e6:	210d      	movs	r1, #13
 80020e8:	f7ff fb96 	bl	8001818 <rtc_mcp794xx_i2c_read>
 80020ec:	4f1c      	ldr	r7, [pc, #112]	; (8002160 <mcp794xx_set_alarm_interrupt_output_polarity+0xa0>)
 80020ee:	7038      	strb	r0, [r7, #0]
            if(err)
 80020f0:	b120      	cbz	r0, 80020fc <mcp794xx_set_alarm_interrupt_output_polarity+0x3c>
                a_mcp794xx_print_error_msg(pHandle, "read alarm 0 polarity register");
 80020f2:	491c      	ldr	r1, [pc, #112]	; (8002164 <mcp794xx_set_alarm_interrupt_output_polarity+0xa4>)
                a_mcp794xx_print_error_msg(pHandle, "read alarm 1 polarity register");
 80020f4:	4628      	mov	r0, r5
 80020f6:	f7ff fbff 	bl	80018f8 <a_mcp794xx_print_error_msg>
                return 1;           /**< failed error */
 80020fa:	e011      	b.n	8002120 <mcp794xx_set_alarm_interrupt_output_polarity+0x60>
            read_status &= ~(1 << 7);                                   /**< clear polarity bit */
 80020fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
            read_status |= (polarity << 7);
 8002104:	ea43 12c6 	orr.w	r2, r3, r6, lsl #7
 8002108:	f88d 2007 	strb.w	r2, [sp, #7]
            err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM0_WKDAY_REG, (uint8_t *)&read_status);
 800210c:	210d      	movs	r1, #13
 800210e:	f10d 0207 	add.w	r2, sp, #7
            err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM1_WKDAY_REG, (uint8_t *)&read_status);
 8002112:	4628      	mov	r0, r5
 8002114:	f7ff fb6f 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8002118:	7038      	strb	r0, [r7, #0]
            if(err)
 800211a:	2800      	cmp	r0, #0
 800211c:	d1e9      	bne.n	80020f2 <mcp794xx_set_alarm_interrupt_output_polarity+0x32>
            break;
        }

    }

    return 0;              /**< success */
 800211e:	2400      	movs	r4, #0
}
 8002120:	4620      	mov	r0, r4
 8002122:	b003      	add	sp, #12
 8002124:	bdf0      	pop	{r4, r5, r6, r7, pc}
            err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_ALM1_WKDAY_REG, (uint8_t *)&read_status, 1);
 8002126:	4623      	mov	r3, r4
 8002128:	f10d 0207 	add.w	r2, sp, #7
 800212c:	2114      	movs	r1, #20
 800212e:	f7ff fb73 	bl	8001818 <rtc_mcp794xx_i2c_read>
 8002132:	4f0b      	ldr	r7, [pc, #44]	; (8002160 <mcp794xx_set_alarm_interrupt_output_polarity+0xa0>)
 8002134:	7038      	strb	r0, [r7, #0]
            if(err)
 8002136:	b108      	cbz	r0, 800213c <mcp794xx_set_alarm_interrupt_output_polarity+0x7c>
                a_mcp794xx_print_error_msg(pHandle, "read alarm 1 polarity register");
 8002138:	490b      	ldr	r1, [pc, #44]	; (8002168 <mcp794xx_set_alarm_interrupt_output_polarity+0xa8>)
 800213a:	e7db      	b.n	80020f4 <mcp794xx_set_alarm_interrupt_output_polarity+0x34>
            read_status &= ~(1 << 7);                                   /**< clear polarity bit */
 800213c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
            read_status |= (polarity << 7);
 8002144:	ea43 12c6 	orr.w	r2, r3, r6, lsl #7
 8002148:	f88d 2007 	strb.w	r2, [sp, #7]
            err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM1_WKDAY_REG, (uint8_t *)&read_status);
 800214c:	2114      	movs	r1, #20
 800214e:	f10d 0207 	add.w	r2, sp, #7
 8002152:	e7de      	b.n	8002112 <mcp794xx_set_alarm_interrupt_output_polarity+0x52>
        return 2;     /**< return failed error */
 8002154:	2402      	movs	r4, #2
 8002156:	e7e3      	b.n	8002120 <mcp794xx_set_alarm_interrupt_output_polarity+0x60>
        return 3;      /**< return failed error */
 8002158:	2403      	movs	r4, #3
 800215a:	e7e1      	b.n	8002120 <mcp794xx_set_alarm_interrupt_output_polarity+0x60>
 800215c:	08008ede 	.word	0x08008ede
 8002160:	200003bc 	.word	0x200003bc
 8002164:	08008ea0 	.word	0x08008ea0
 8002168:	08008ebf 	.word	0x08008ebf

0800216c <mcp794xx_set_alarm_time_date>:
            - 2 handle null
 *          - 3 handle is not initialized
 *          - 5 invalid mask
 */
uint8_t mcp794xx_set_alarm_time_date(mcp794xx_handle_t *const pHandle, mcp794xx_alarm_t alarm, mcp794xx_time_t *pTime)
{
 800216c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002170:	4688      	mov	r8, r1
 8002172:	4615      	mov	r5, r2

    uint8_t ptimeBuffer[MCP794XX_TIME_BUFFER_SIZE];
    uint8_t status;

    if(pHandle == NULL)
 8002174:	4604      	mov	r4, r0
 8002176:	2800      	cmp	r0, #0
 8002178:	f000 81a1 	beq.w	80024be <mcp794xx_set_alarm_time_date+0x352>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 800217c:	7fc6      	ldrb	r6, [r0, #31]
 800217e:	2e01      	cmp	r6, #1
 8002180:	f040 819f 	bne.w	80024c2 <mcp794xx_set_alarm_time_date+0x356>
        return 3;      /**< return failed error */

    if(pHandle->time_param.time_Format == MCP794XX_24HR_FORMAT)
 8002184:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002188:	bb23      	cbnz	r3, 80021d4 <mcp794xx_set_alarm_time_date+0x68>
    {

        if((pTime->month < 1) || (pTime->month > 12))
 800218a:	7993      	ldrb	r3, [r2, #6]
 800218c:	3b01      	subs	r3, #1
 800218e:	2b0b      	cmp	r3, #11
 8002190:	d902      	bls.n	8002198 <mcp794xx_set_alarm_time_date+0x2c>
        {
            a_mcp794xx_print_error_msg(pHandle, "set alarm time, month can not be less than 0 or greater than 12");
 8002192:	49ad      	ldr	r1, [pc, #692]	; (8002448 <mcp794xx_set_alarm_time_date+0x2dc>)
			return 1;
		}
    }

    else{
        a_mcp794xx_print_error_msg(pHandle, "invalid alarm selected");
 8002194:	4620      	mov	r0, r4
 8002196:	e00f      	b.n	80021b8 <mcp794xx_set_alarm_time_date+0x4c>
        if((pTime->date < 1) || (pTime->date > 31))
 8002198:	7893      	ldrb	r3, [r2, #2]
 800219a:	3b01      	subs	r3, #1
 800219c:	2b1e      	cmp	r3, #30
 800219e:	d901      	bls.n	80021a4 <mcp794xx_set_alarm_time_date+0x38>
            a_mcp794xx_print_error_msg(pHandle, "set alarm time, date can not be less than 0 or greater than 31");
 80021a0:	49aa      	ldr	r1, [pc, #680]	; (800244c <mcp794xx_set_alarm_time_date+0x2e0>)
 80021a2:	e7f7      	b.n	8002194 <mcp794xx_set_alarm_time_date+0x28>
        if((pTime->weekDay < 1) || (pTime->weekDay > 7))
 80021a4:	79d3      	ldrb	r3, [r2, #7]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	2b06      	cmp	r3, #6
 80021aa:	d901      	bls.n	80021b0 <mcp794xx_set_alarm_time_date+0x44>
            a_mcp794xx_print_error_msg(pHandle, "set alarm time, week day can not be less than 1 or greater than 7");
 80021ac:	49a8      	ldr	r1, [pc, #672]	; (8002450 <mcp794xx_set_alarm_time_date+0x2e4>)
 80021ae:	e7f1      	b.n	8002194 <mcp794xx_set_alarm_time_date+0x28>
        if((pTime->hour < 0) || (pTime->hour > 23))
 80021b0:	78d3      	ldrb	r3, [r2, #3]
 80021b2:	2b17      	cmp	r3, #23
 80021b4:	d904      	bls.n	80021c0 <mcp794xx_set_alarm_time_date+0x54>
            a_mcp794xx_print_error_msg(pHandle, "set alarm time, hour can not be less than 0 or greater than 23");
 80021b6:	49a7      	ldr	r1, [pc, #668]	; (8002454 <mcp794xx_set_alarm_time_date+0x2e8>)
        a_mcp794xx_print_error_msg(pHandle, "invalid alarm selected");
 80021b8:	f7ff fb9e 	bl	80018f8 <a_mcp794xx_print_error_msg>
        return 4;
 80021bc:	2604      	movs	r6, #4
 80021be:	e0b6      	b.n	800232e <mcp794xx_set_alarm_time_date+0x1c2>
        if((pTime->minute < 0) || (pTime->minute > 59))
 80021c0:	792b      	ldrb	r3, [r5, #4]
 80021c2:	2b3b      	cmp	r3, #59	; 0x3b
 80021c4:	d901      	bls.n	80021ca <mcp794xx_set_alarm_time_date+0x5e>
            a_mcp794xx_print_error_msg(pHandle, "set alarm time, minute can not be less than 0 or greater than 59");
 80021c6:	49a4      	ldr	r1, [pc, #656]	; (8002458 <mcp794xx_set_alarm_time_date+0x2ec>)
 80021c8:	e7e4      	b.n	8002194 <mcp794xx_set_alarm_time_date+0x28>
        if((pTime->second < 0) || (pTime->second > 59))
 80021ca:	796b      	ldrb	r3, [r5, #5]
 80021cc:	2b3b      	cmp	r3, #59	; 0x3b
 80021ce:	d916      	bls.n	80021fe <mcp794xx_set_alarm_time_date+0x92>
            a_mcp794xx_print_error_msg(pHandle, "set alarm time, seconds can not be less than 0 or greater than 59");
 80021d0:	49a2      	ldr	r1, [pc, #648]	; (800245c <mcp794xx_set_alarm_time_date+0x2f0>)
 80021d2:	e7df      	b.n	8002194 <mcp794xx_set_alarm_time_date+0x28>
    else if(pHandle->time_param.time_Format == MCP794XX_12HR_FORMAT)
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d110      	bne.n	80021fa <mcp794xx_set_alarm_time_date+0x8e>
        if((pTime->month < 0) || (pTime->month > 12))
 80021d8:	7993      	ldrb	r3, [r2, #6]
 80021da:	2b0c      	cmp	r3, #12
 80021dc:	d8d9      	bhi.n	8002192 <mcp794xx_set_alarm_time_date+0x26>
        if((pTime->date < 1) || (pTime->date > 31))
 80021de:	7893      	ldrb	r3, [r2, #2]
 80021e0:	3b01      	subs	r3, #1
 80021e2:	2b1e      	cmp	r3, #30
 80021e4:	d8dc      	bhi.n	80021a0 <mcp794xx_set_alarm_time_date+0x34>
        if((pTime->weekDay < 1) || (pTime->weekDay > 7))
 80021e6:	79d3      	ldrb	r3, [r2, #7]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	2b06      	cmp	r3, #6
 80021ec:	d8de      	bhi.n	80021ac <mcp794xx_set_alarm_time_date+0x40>
        if((pTime->hour < 1) || (pTime->hour > 12))
 80021ee:	78d3      	ldrb	r3, [r2, #3]
 80021f0:	3b01      	subs	r3, #1
 80021f2:	2b0b      	cmp	r3, #11
 80021f4:	d9e4      	bls.n	80021c0 <mcp794xx_set_alarm_time_date+0x54>
            a_mcp794xx_print_error_msg(pHandle, "set alarm time, hour can not be less than 0 or greater than 12");
 80021f6:	499a      	ldr	r1, [pc, #616]	; (8002460 <mcp794xx_set_alarm_time_date+0x2f4>)
 80021f8:	e7de      	b.n	80021b8 <mcp794xx_set_alarm_time_date+0x4c>
        a_mcp794xx_print_error_msg(pHandle, "set alarm time, invalid time format");
 80021fa:	499a      	ldr	r1, [pc, #616]	; (8002464 <mcp794xx_set_alarm_time_date+0x2f8>)
 80021fc:	e7dc      	b.n	80021b8 <mcp794xx_set_alarm_time_date+0x4c>
    memset(ptimeBuffer, 0, sizeof(ptimeBuffer));              /**< clear buffer */
 80021fe:	2300      	movs	r3, #0
 8002200:	9302      	str	r3, [sp, #8]
 8002202:	f8cd 300b 	str.w	r3, [sp, #11]
    if(alarm == MCP794XX_ALARM0)
 8002206:	f1b8 0f00 	cmp.w	r8, #0
 800220a:	f040 8096 	bne.w	800233a <mcp794xx_set_alarm_time_date+0x1ce>
        err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_ALM0_SEC_REG, (uint8_t *)ptimeBuffer, (MCP794XX_TIME_BUFFER_SIZE - 1) );
 800220e:	2306      	movs	r3, #6
 8002210:	aa02      	add	r2, sp, #8
 8002212:	210a      	movs	r1, #10
 8002214:	4620      	mov	r0, r4
 8002216:	f7ff faff 	bl	8001818 <rtc_mcp794xx_i2c_read>
 800221a:	4f93      	ldr	r7, [pc, #588]	; (8002468 <mcp794xx_set_alarm_time_date+0x2fc>)
 800221c:	7038      	strb	r0, [r7, #0]
        status =  a_pcf85xxx_dec2bcd(pTime->second);
 800221e:	7968      	ldrb	r0, [r5, #5]
 8002220:	f7ff fb70 	bl	8001904 <a_pcf85xxx_dec2bcd>
        err =  rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM0_SEC_REG,(uint8_t *)&status);
 8002224:	210a      	movs	r1, #10
        status =  a_pcf85xxx_dec2bcd(pTime->second);
 8002226:	f88d 0007 	strb.w	r0, [sp, #7]
        err =  rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM0_SEC_REG,(uint8_t *)&status);
 800222a:	f10d 0207 	add.w	r2, sp, #7
 800222e:	4620      	mov	r0, r4
 8002230:	f7ff fae1 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8002234:	7038      	strb	r0, [r7, #0]
        if(err)
 8002236:	b120      	cbz	r0, 8002242 <mcp794xx_set_alarm_time_date+0xd6>
            a_mcp794xx_print_error_msg(pHandle, "to write alarm 0 seconds");
 8002238:	498c      	ldr	r1, [pc, #560]	; (800246c <mcp794xx_set_alarm_time_date+0x300>)
            a_mcp794xx_print_error_msg(pHandle, "to write alarm 0 month");
 800223a:	4620      	mov	r0, r4
 800223c:	f7ff fb5c 	bl	80018f8 <a_mcp794xx_print_error_msg>
            return 1;
 8002240:	e075      	b.n	800232e <mcp794xx_set_alarm_time_date+0x1c2>
        status = a_pcf85xxx_dec2bcd(pTime->minute);
 8002242:	7928      	ldrb	r0, [r5, #4]
 8002244:	f7ff fb5e 	bl	8001904 <a_pcf85xxx_dec2bcd>
        err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM0_MIN_REG, (uint8_t *)&status);
 8002248:	210b      	movs	r1, #11
        status = a_pcf85xxx_dec2bcd(pTime->minute);
 800224a:	f88d 0007 	strb.w	r0, [sp, #7]
        err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM0_MIN_REG, (uint8_t *)&status);
 800224e:	f10d 0207 	add.w	r2, sp, #7
 8002252:	4620      	mov	r0, r4
 8002254:	f7ff facf 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8002258:	7038      	strb	r0, [r7, #0]
        if(err)
 800225a:	b108      	cbz	r0, 8002260 <mcp794xx_set_alarm_time_date+0xf4>
            a_mcp794xx_print_error_msg(pHandle, "to write alarm 0 minutes");
 800225c:	4984      	ldr	r1, [pc, #528]	; (8002470 <mcp794xx_set_alarm_time_date+0x304>)
 800225e:	e7ec      	b.n	800223a <mcp794xx_set_alarm_time_date+0xce>
        if(pHandle->time_param.time_Format == MCP794XX_24HR_FORMAT)
 8002260:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8002264:	bb3b      	cbnz	r3, 80022b6 <mcp794xx_set_alarm_time_date+0x14a>
            status = a_pcf85xxx_dec2bcd(pTime->hour) | (ptimeBuffer[2] & MCP794XX_ALARMx_12HR_24HR_FRMT_STAT_MASK);
 8002266:	78e8      	ldrb	r0, [r5, #3]
 8002268:	f7ff fb4c 	bl	8001904 <a_pcf85xxx_dec2bcd>
 800226c:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8002270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002274:	4318      	orrs	r0, r3
 8002276:	f88d 0007 	strb.w	r0, [sp, #7]
            err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM0_HOUR_REG,(uint8_t *)&status);
 800227a:	f10d 0207 	add.w	r2, sp, #7
 800227e:	210c      	movs	r1, #12
 8002280:	4620      	mov	r0, r4
 8002282:	f7ff fab8 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8002286:	7038      	strb	r0, [r7, #0]
            if(err)
 8002288:	b998      	cbnz	r0, 80022b2 <mcp794xx_set_alarm_time_date+0x146>
        status = a_pcf85xxx_dec2bcd(pTime->weekDay) | (ptimeBuffer[3] & (MCP794XX_ALARMx_INT_POL_MASK | MCP794XX_ALARMx_TYPE_MASK | MCP794XX_ALARMx_IF_MASK));
 800228a:	79e8      	ldrb	r0, [r5, #7]
 800228c:	f7ff fb3a 	bl	8001904 <a_pcf85xxx_dec2bcd>
 8002290:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8002294:	f023 0307 	bic.w	r3, r3, #7
 8002298:	4318      	orrs	r0, r3
 800229a:	f88d 0007 	strb.w	r0, [sp, #7]
        err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM0_WKDAY_REG, (uint8_t *)&status);
 800229e:	f10d 0207 	add.w	r2, sp, #7
 80022a2:	210d      	movs	r1, #13
 80022a4:	4620      	mov	r0, r4
 80022a6:	f7ff faa6 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 80022aa:	7038      	strb	r0, [r7, #0]
        if(err)
 80022ac:	b310      	cbz	r0, 80022f4 <mcp794xx_set_alarm_time_date+0x188>
            a_mcp794xx_print_error_msg(pHandle, "to write alarm 0 week day");
 80022ae:	4971      	ldr	r1, [pc, #452]	; (8002474 <mcp794xx_set_alarm_time_date+0x308>)
 80022b0:	e7c3      	b.n	800223a <mcp794xx_set_alarm_time_date+0xce>
                a_mcp794xx_print_error_msg(pHandle, "to write alarm 0 hours");
 80022b2:	4971      	ldr	r1, [pc, #452]	; (8002478 <mcp794xx_set_alarm_time_date+0x30c>)
 80022b4:	e7c1      	b.n	800223a <mcp794xx_set_alarm_time_date+0xce>
        else if(pHandle->time_param.time_Format == MCP794XX_12HR_FORMAT)
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d1e7      	bne.n	800228a <mcp794xx_set_alarm_time_date+0x11e>
        	status = a_pcf85xxx_dec2bcd(pTime->hour) | (ptimeBuffer[2] & (MCP794XX_ALARMx_12HR_24HR_FRMT_STAT_MASK | MCP794XX_ALARMx_AM_PM_MASK));
 80022ba:	78e8      	ldrb	r0, [r5, #3]
 80022bc:	f7ff fb22 	bl	8001904 <a_pcf85xxx_dec2bcd>
 80022c0:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80022c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80022c8:	4318      	orrs	r0, r3
 80022ca:	f88d 0007 	strb.w	r0, [sp, #7]
            err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM0_HOUR_REG, (uint8_t *)&status);
 80022ce:	f10d 0207 	add.w	r2, sp, #7
 80022d2:	210c      	movs	r1, #12
 80022d4:	4620      	mov	r0, r4
 80022d6:	f7ff fa8e 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 80022da:	7038      	strb	r0, [r7, #0]
            if(err)
 80022dc:	2800      	cmp	r0, #0
 80022de:	d1e8      	bne.n	80022b2 <mcp794xx_set_alarm_time_date+0x146>
            err = mcp794xx_set_am_pm(pHandle, MCP794XX_ALM0_HOUR_REG, pTime->am_pm_indicator);
 80022e0:	7a6a      	ldrb	r2, [r5, #9]
 80022e2:	210c      	movs	r1, #12
 80022e4:	4620      	mov	r0, r4
 80022e6:	f7ff fc3f 	bl	8001b68 <mcp794xx_set_am_pm>
 80022ea:	7038      	strb	r0, [r7, #0]
            if(err)
 80022ec:	2800      	cmp	r0, #0
 80022ee:	d0cc      	beq.n	800228a <mcp794xx_set_alarm_time_date+0x11e>
 80022f0:	4606      	mov	r6, r0
 80022f2:	e01c      	b.n	800232e <mcp794xx_set_alarm_time_date+0x1c2>
        status = a_pcf85xxx_dec2bcd(pTime->date);
 80022f4:	78a8      	ldrb	r0, [r5, #2]
 80022f6:	f7ff fb05 	bl	8001904 <a_pcf85xxx_dec2bcd>
        err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM0_DATE_REG, (uint8_t *)&status);
 80022fa:	210e      	movs	r1, #14
        status = a_pcf85xxx_dec2bcd(pTime->date);
 80022fc:	f88d 0007 	strb.w	r0, [sp, #7]
        err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM0_DATE_REG, (uint8_t *)&status);
 8002300:	f10d 0207 	add.w	r2, sp, #7
 8002304:	4620      	mov	r0, r4
 8002306:	f7ff fa76 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 800230a:	7038      	strb	r0, [r7, #0]
        if(err)
 800230c:	b108      	cbz	r0, 8002312 <mcp794xx_set_alarm_time_date+0x1a6>
            a_mcp794xx_print_error_msg(pHandle, "to write alarm 0 date");
 800230e:	495b      	ldr	r1, [pc, #364]	; (800247c <mcp794xx_set_alarm_time_date+0x310>)
 8002310:	e793      	b.n	800223a <mcp794xx_set_alarm_time_date+0xce>
        status =  a_pcf85xxx_dec2bcd(pTime->month);
 8002312:	79a8      	ldrb	r0, [r5, #6]
 8002314:	f7ff faf6 	bl	8001904 <a_pcf85xxx_dec2bcd>
        err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM0_MONTH_REG, (uint8_t *)&status);
 8002318:	210f      	movs	r1, #15
        status =  a_pcf85xxx_dec2bcd(pTime->month);
 800231a:	f88d 0007 	strb.w	r0, [sp, #7]
        err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM0_MONTH_REG, (uint8_t *)&status);
 800231e:	f10d 0207 	add.w	r2, sp, #7
 8002322:	4620      	mov	r0, r4
 8002324:	f7ff fa67 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8002328:	7038      	strb	r0, [r7, #0]
        if(err)
 800232a:	b920      	cbnz	r0, 8002336 <mcp794xx_set_alarm_time_date+0x1ca>
    }


    return 0;     /**< success */
 800232c:	2600      	movs	r6, #0

}
 800232e:	4630      	mov	r0, r6
 8002330:	b004      	add	sp, #16
 8002332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            a_mcp794xx_print_error_msg(pHandle, "to write alarm 0 month");
 8002336:	4952      	ldr	r1, [pc, #328]	; (8002480 <mcp794xx_set_alarm_time_date+0x314>)
 8002338:	e77f      	b.n	800223a <mcp794xx_set_alarm_time_date+0xce>
    else if(alarm == MCP794XX_ALARM1)
 800233a:	f1b8 0f01 	cmp.w	r8, #1
 800233e:	f040 80bc 	bne.w	80024ba <mcp794xx_set_alarm_time_date+0x34e>
        err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_ALM1_SEC_REG, (uint8_t *)ptimeBuffer, (MCP794XX_TIME_BUFFER_SIZE - 1) );
 8002342:	2306      	movs	r3, #6
 8002344:	aa02      	add	r2, sp, #8
 8002346:	2111      	movs	r1, #17
 8002348:	4620      	mov	r0, r4
 800234a:	f7ff fa65 	bl	8001818 <rtc_mcp794xx_i2c_read>
 800234e:	4f46      	ldr	r7, [pc, #280]	; (8002468 <mcp794xx_set_alarm_time_date+0x2fc>)
 8002350:	7038      	strb	r0, [r7, #0]
        status =  a_pcf85xxx_dec2bcd(pTime->second);
 8002352:	7968      	ldrb	r0, [r5, #5]
 8002354:	f7ff fad6 	bl	8001904 <a_pcf85xxx_dec2bcd>
		err =  rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM1_SEC_REG,(uint8_t *)&status);
 8002358:	2111      	movs	r1, #17
        status =  a_pcf85xxx_dec2bcd(pTime->second);
 800235a:	f88d 0007 	strb.w	r0, [sp, #7]
		err =  rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM1_SEC_REG,(uint8_t *)&status);
 800235e:	f10d 0207 	add.w	r2, sp, #7
 8002362:	4620      	mov	r0, r4
 8002364:	f7ff fa47 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8002368:	7038      	strb	r0, [r7, #0]
		if(err)
 800236a:	b128      	cbz	r0, 8002378 <mcp794xx_set_alarm_time_date+0x20c>
			a_mcp794xx_print_error_msg(pHandle, "to write alarm 1 seconds");
 800236c:	4945      	ldr	r1, [pc, #276]	; (8002484 <mcp794xx_set_alarm_time_date+0x318>)
			a_mcp794xx_print_error_msg(pHandle, "to write alarm 1 month");
 800236e:	4620      	mov	r0, r4
 8002370:	f7ff fac2 	bl	80018f8 <a_mcp794xx_print_error_msg>
			return 1;
 8002374:	2601      	movs	r6, #1
 8002376:	e7da      	b.n	800232e <mcp794xx_set_alarm_time_date+0x1c2>
		status = a_pcf85xxx_dec2bcd(pTime->minute);
 8002378:	7928      	ldrb	r0, [r5, #4]
 800237a:	f7ff fac3 	bl	8001904 <a_pcf85xxx_dec2bcd>
		err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM1_MIN_REG, (uint8_t *)&status);
 800237e:	2112      	movs	r1, #18
		status = a_pcf85xxx_dec2bcd(pTime->minute);
 8002380:	f88d 0007 	strb.w	r0, [sp, #7]
		err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM1_MIN_REG, (uint8_t *)&status);
 8002384:	f10d 0207 	add.w	r2, sp, #7
 8002388:	4620      	mov	r0, r4
 800238a:	f7ff fa34 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 800238e:	7038      	strb	r0, [r7, #0]
		if(err)
 8002390:	b108      	cbz	r0, 8002396 <mcp794xx_set_alarm_time_date+0x22a>
			a_mcp794xx_print_error_msg(pHandle, "to write alarm 1 minutes");
 8002392:	493d      	ldr	r1, [pc, #244]	; (8002488 <mcp794xx_set_alarm_time_date+0x31c>)
 8002394:	e7eb      	b.n	800236e <mcp794xx_set_alarm_time_date+0x202>
		if(pHandle->time_param.time_Format == MCP794XX_24HR_FORMAT)
 8002396:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 800239a:	bb3b      	cbnz	r3, 80023ec <mcp794xx_set_alarm_time_date+0x280>
			status = a_pcf85xxx_dec2bcd(pTime->hour) | (ptimeBuffer[2] & MCP794XX_ALARMx_12HR_24HR_FRMT_STAT_MASK);
 800239c:	78e8      	ldrb	r0, [r5, #3]
 800239e:	f7ff fab1 	bl	8001904 <a_pcf85xxx_dec2bcd>
 80023a2:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80023a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023aa:	4318      	orrs	r0, r3
 80023ac:	f88d 0007 	strb.w	r0, [sp, #7]
			err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM1_HOUR_REG,(uint8_t *)&status);
 80023b0:	f10d 0207 	add.w	r2, sp, #7
 80023b4:	2113      	movs	r1, #19
 80023b6:	4620      	mov	r0, r4
 80023b8:	f7ff fa1d 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 80023bc:	7038      	strb	r0, [r7, #0]
			if(err)
 80023be:	b998      	cbnz	r0, 80023e8 <mcp794xx_set_alarm_time_date+0x27c>
		status = a_pcf85xxx_dec2bcd(pTime->weekDay) | (ptimeBuffer[3] & (MCP794XX_ALARMx_INT_POL_MASK | MCP794XX_ALARMx_TYPE_MASK | MCP794XX_ALARMx_IF_MASK));
 80023c0:	79e8      	ldrb	r0, [r5, #7]
 80023c2:	f7ff fa9f 	bl	8001904 <a_pcf85xxx_dec2bcd>
 80023c6:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80023ca:	f023 0307 	bic.w	r3, r3, #7
 80023ce:	4318      	orrs	r0, r3
 80023d0:	f88d 0007 	strb.w	r0, [sp, #7]
		err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM1_WKDAY_REG, (uint8_t *)&status);
 80023d4:	f10d 0207 	add.w	r2, sp, #7
 80023d8:	2114      	movs	r1, #20
 80023da:	4620      	mov	r0, r4
 80023dc:	f7ff fa0b 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 80023e0:	7038      	strb	r0, [r7, #0]
		if(err)
 80023e2:	b310      	cbz	r0, 800242a <mcp794xx_set_alarm_time_date+0x2be>
			a_mcp794xx_print_error_msg(pHandle, "to write alarm 1 week day");
 80023e4:	4929      	ldr	r1, [pc, #164]	; (800248c <mcp794xx_set_alarm_time_date+0x320>)
 80023e6:	e7c2      	b.n	800236e <mcp794xx_set_alarm_time_date+0x202>
				a_mcp794xx_print_error_msg(pHandle, "to write alarm 1 hours");
 80023e8:	4929      	ldr	r1, [pc, #164]	; (8002490 <mcp794xx_set_alarm_time_date+0x324>)
 80023ea:	e7c0      	b.n	800236e <mcp794xx_set_alarm_time_date+0x202>
		else if(pHandle->time_param.time_Format == MCP794XX_12HR_FORMAT)
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d1e7      	bne.n	80023c0 <mcp794xx_set_alarm_time_date+0x254>
			status = a_pcf85xxx_dec2bcd(pTime->hour) | (ptimeBuffer[2] & (MCP794XX_ALARMx_12HR_24HR_FRMT_STAT_MASK | MCP794XX_ALARMx_AM_PM_MASK));
 80023f0:	78e8      	ldrb	r0, [r5, #3]
 80023f2:	f7ff fa87 	bl	8001904 <a_pcf85xxx_dec2bcd>
 80023f6:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80023fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80023fe:	4318      	orrs	r0, r3
 8002400:	f88d 0007 	strb.w	r0, [sp, #7]
			err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM1_HOUR_REG, (uint8_t *)&status);
 8002404:	f10d 0207 	add.w	r2, sp, #7
 8002408:	2113      	movs	r1, #19
 800240a:	4620      	mov	r0, r4
 800240c:	f7ff f9f3 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8002410:	7038      	strb	r0, [r7, #0]
			if(err)
 8002412:	2800      	cmp	r0, #0
 8002414:	d1e8      	bne.n	80023e8 <mcp794xx_set_alarm_time_date+0x27c>
			err = mcp794xx_set_am_pm(pHandle, MCP794XX_ALM1_HOUR_REG, pTime->am_pm_indicator);
 8002416:	7a6a      	ldrb	r2, [r5, #9]
 8002418:	2113      	movs	r1, #19
 800241a:	4620      	mov	r0, r4
 800241c:	f7ff fba4 	bl	8001b68 <mcp794xx_set_am_pm>
 8002420:	4606      	mov	r6, r0
 8002422:	7038      	strb	r0, [r7, #0]
			if(err)
 8002424:	2800      	cmp	r0, #0
 8002426:	d0cb      	beq.n	80023c0 <mcp794xx_set_alarm_time_date+0x254>
 8002428:	e781      	b.n	800232e <mcp794xx_set_alarm_time_date+0x1c2>
		status = a_pcf85xxx_dec2bcd(pTime->date);
 800242a:	78a8      	ldrb	r0, [r5, #2]
 800242c:	f7ff fa6a 	bl	8001904 <a_pcf85xxx_dec2bcd>
		err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM1_DATE_REG, (uint8_t *)&status);
 8002430:	2115      	movs	r1, #21
		status = a_pcf85xxx_dec2bcd(pTime->date);
 8002432:	f88d 0007 	strb.w	r0, [sp, #7]
		err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM1_DATE_REG, (uint8_t *)&status);
 8002436:	f10d 0207 	add.w	r2, sp, #7
 800243a:	4620      	mov	r0, r4
 800243c:	f7ff f9db 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8002440:	7038      	strb	r0, [r7, #0]
		if(err)
 8002442:	b348      	cbz	r0, 8002498 <mcp794xx_set_alarm_time_date+0x32c>
			a_mcp794xx_print_error_msg(pHandle, "to write alarm 1 date");
 8002444:	4913      	ldr	r1, [pc, #76]	; (8002494 <mcp794xx_set_alarm_time_date+0x328>)
 8002446:	e792      	b.n	800236e <mcp794xx_set_alarm_time_date+0x202>
 8002448:	08008ef5 	.word	0x08008ef5
 800244c:	08008f35 	.word	0x08008f35
 8002450:	08008f74 	.word	0x08008f74
 8002454:	08008fb6 	.word	0x08008fb6
 8002458:	08008ff5 	.word	0x08008ff5
 800245c:	08009036 	.word	0x08009036
 8002460:	08009078 	.word	0x08009078
 8002464:	080090b7 	.word	0x080090b7
 8002468:	200003bc 	.word	0x200003bc
 800246c:	080090db 	.word	0x080090db
 8002470:	080090f4 	.word	0x080090f4
 8002474:	08009124 	.word	0x08009124
 8002478:	0800910d 	.word	0x0800910d
 800247c:	0800913e 	.word	0x0800913e
 8002480:	08009154 	.word	0x08009154
 8002484:	0800916b 	.word	0x0800916b
 8002488:	08009184 	.word	0x08009184
 800248c:	080091b4 	.word	0x080091b4
 8002490:	0800919d 	.word	0x0800919d
 8002494:	080091ce 	.word	0x080091ce
		status =  a_pcf85xxx_dec2bcd(pTime->month);
 8002498:	79a8      	ldrb	r0, [r5, #6]
 800249a:	f7ff fa33 	bl	8001904 <a_pcf85xxx_dec2bcd>
		err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM1_MONTH_REG, (uint8_t *)&status);
 800249e:	2116      	movs	r1, #22
		status =  a_pcf85xxx_dec2bcd(pTime->month);
 80024a0:	f88d 0007 	strb.w	r0, [sp, #7]
		err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM1_MONTH_REG, (uint8_t *)&status);
 80024a4:	f10d 0207 	add.w	r2, sp, #7
 80024a8:	4620      	mov	r0, r4
 80024aa:	f7ff f9a4 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 80024ae:	7038      	strb	r0, [r7, #0]
		if(err)
 80024b0:	2800      	cmp	r0, #0
 80024b2:	f43f af3b 	beq.w	800232c <mcp794xx_set_alarm_time_date+0x1c0>
			a_mcp794xx_print_error_msg(pHandle, "to write alarm 1 month");
 80024b6:	4904      	ldr	r1, [pc, #16]	; (80024c8 <mcp794xx_set_alarm_time_date+0x35c>)
 80024b8:	e759      	b.n	800236e <mcp794xx_set_alarm_time_date+0x202>
        a_mcp794xx_print_error_msg(pHandle, "invalid alarm selected");
 80024ba:	4904      	ldr	r1, [pc, #16]	; (80024cc <mcp794xx_set_alarm_time_date+0x360>)
 80024bc:	e66a      	b.n	8002194 <mcp794xx_set_alarm_time_date+0x28>
        return 2;     /**< return failed error */
 80024be:	2602      	movs	r6, #2
 80024c0:	e735      	b.n	800232e <mcp794xx_set_alarm_time_date+0x1c2>
        return 3;      /**< return failed error */
 80024c2:	2603      	movs	r6, #3
 80024c4:	e733      	b.n	800232e <mcp794xx_set_alarm_time_date+0x1c2>
 80024c6:	bf00      	nop
 80024c8:	080091e4 	.word	0x080091e4
 80024cc:	08008ede 	.word	0x08008ede

080024d0 <mcp794xx_set_alarm>:
 *          - 3 handle is not initialized
 *          - 4 invalid alarm
 *          - 5 invalid mask
 */
uint8_t mcp794xx_set_alarm(mcp794xx_handle_t *const pHandle, mcp794xx_alarm_t alarm, mcp794xx_alarm_mask_t mask, mcp794xx_time_t *pTime)
{
 80024d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80024d4:	4690      	mov	r8, r2
 80024d6:	461e      	mov	r6, r3
    uint8_t read_status;

    if(pHandle == NULL)
 80024d8:	4605      	mov	r5, r0
 80024da:	2800      	cmp	r0, #0
 80024dc:	d065      	beq.n	80025aa <mcp794xx_set_alarm+0xda>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 80024de:	7fc4      	ldrb	r4, [r0, #31]
 80024e0:	2c01      	cmp	r4, #1
 80024e2:	d164      	bne.n	80025ae <mcp794xx_set_alarm+0xde>
        return 3;      /**< return failed error */

    switch((int)alarm)
 80024e4:	b131      	cbz	r1, 80024f4 <mcp794xx_set_alarm+0x24>
 80024e6:	2901      	cmp	r1, #1
 80024e8:	d035      	beq.n	8002556 <mcp794xx_set_alarm+0x86>
            break;
        }

        default :
        {
            a_mcp794xx_print_error_msg(pHandle, "invalid alarm selected");
 80024ea:	4932      	ldr	r1, [pc, #200]	; (80025b4 <mcp794xx_set_alarm+0xe4>)
 80024ec:	f7ff fa04 	bl	80018f8 <a_mcp794xx_print_error_msg>
            return 4;
 80024f0:	2404      	movs	r4, #4
 80024f2:	e00c      	b.n	800250e <mcp794xx_set_alarm+0x3e>
            err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_ALM0_WKDAY_REG, (uint8_t *)&read_status, 1);
 80024f4:	4623      	mov	r3, r4
 80024f6:	f10d 0207 	add.w	r2, sp, #7
 80024fa:	210d      	movs	r1, #13
 80024fc:	f7ff f98c 	bl	8001818 <rtc_mcp794xx_i2c_read>
 8002500:	4f2d      	ldr	r7, [pc, #180]	; (80025b8 <mcp794xx_set_alarm+0xe8>)
 8002502:	7038      	strb	r0, [r7, #0]
            if(err)
 8002504:	b138      	cbz	r0, 8002516 <mcp794xx_set_alarm+0x46>
                a_mcp794xx_print_error_msg(pHandle, "read alarm 0 mask register");
 8002506:	492d      	ldr	r1, [pc, #180]	; (80025bc <mcp794xx_set_alarm+0xec>)
 8002508:	4628      	mov	r0, r5
 800250a:	f7ff f9f5 	bl	80018f8 <a_mcp794xx_print_error_msg>

    }

    return 0;              /**< success */

}
 800250e:	4620      	mov	r0, r4
 8002510:	b002      	add	sp, #8
 8002512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            read_status &= ~(0b111 << 4);                           /**< clear alarm mask bit */
 8002516:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800251a:	f021 0370 	bic.w	r3, r1, #112	; 0x70
            read_status |= (mask << 4);
 800251e:	ea43 1108 	orr.w	r1, r3, r8, lsl #4
 8002522:	f88d 1007 	strb.w	r1, [sp, #7]
            err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM0_WKDAY_REG, (uint8_t *)&read_status);
 8002526:	f10d 0207 	add.w	r2, sp, #7
 800252a:	210d      	movs	r1, #13
 800252c:	4628      	mov	r0, r5
 800252e:	f7ff f962 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8002532:	4601      	mov	r1, r0
 8002534:	7038      	strb	r0, [r7, #0]
            if(err)
 8002536:	2800      	cmp	r0, #0
 8002538:	d1e5      	bne.n	8002506 <mcp794xx_set_alarm+0x36>
            err = mcp794xx_set_alarm_time_date(pHandle, alarm, pTime);
 800253a:	4632      	mov	r2, r6
 800253c:	4628      	mov	r0, r5
 800253e:	f7ff fe15 	bl	800216c <mcp794xx_set_alarm_time_date>
 8002542:	7038      	strb	r0, [r7, #0]
            if(err)
 8002544:	b908      	cbnz	r0, 800254a <mcp794xx_set_alarm+0x7a>
    return 0;              /**< success */
 8002546:	2400      	movs	r4, #0
 8002548:	e7e1      	b.n	800250e <mcp794xx_set_alarm+0x3e>
                a_mcp794xx_print_error_msg(pHandle, "failed to set alarm 0");
 800254a:	491d      	ldr	r1, [pc, #116]	; (80025c0 <mcp794xx_set_alarm+0xf0>)
                a_mcp794xx_print_error_msg(pHandle, "failed to set alarm 1");
 800254c:	4628      	mov	r0, r5
 800254e:	f7ff f9d3 	bl	80018f8 <a_mcp794xx_print_error_msg>
                return err;           /**< failed error */
 8002552:	783c      	ldrb	r4, [r7, #0]
 8002554:	e7db      	b.n	800250e <mcp794xx_set_alarm+0x3e>
            err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_ALM1_WKDAY_REG, (uint8_t *)&read_status, 1);
 8002556:	4623      	mov	r3, r4
 8002558:	f10d 0207 	add.w	r2, sp, #7
 800255c:	2114      	movs	r1, #20
 800255e:	f7ff f95b 	bl	8001818 <rtc_mcp794xx_i2c_read>
 8002562:	4f15      	ldr	r7, [pc, #84]	; (80025b8 <mcp794xx_set_alarm+0xe8>)
 8002564:	7038      	strb	r0, [r7, #0]
            if(err)
 8002566:	b128      	cbz	r0, 8002574 <mcp794xx_set_alarm+0xa4>
                a_mcp794xx_print_error_msg(pHandle, "read alarm 1 mask register");
 8002568:	4916      	ldr	r1, [pc, #88]	; (80025c4 <mcp794xx_set_alarm+0xf4>)
 800256a:	4628      	mov	r0, r5
 800256c:	f7ff f9c4 	bl	80018f8 <a_mcp794xx_print_error_msg>
                return 1;           /**< failed error */
 8002570:	2401      	movs	r4, #1
 8002572:	e7cc      	b.n	800250e <mcp794xx_set_alarm+0x3e>
            read_status &= ~(0b111 << 4);                           /**< clear alarm mask bit */
 8002574:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002578:	f020 0070 	bic.w	r0, r0, #112	; 0x70
            read_status |= (mask << 4);
 800257c:	ea40 1108 	orr.w	r1, r0, r8, lsl #4
 8002580:	f88d 1007 	strb.w	r1, [sp, #7]
            err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM1_WKDAY_REG, (uint8_t *)&read_status);
 8002584:	f10d 0207 	add.w	r2, sp, #7
 8002588:	2114      	movs	r1, #20
 800258a:	4628      	mov	r0, r5
 800258c:	f7ff f933 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8002590:	7038      	strb	r0, [r7, #0]
            if(err)
 8002592:	2800      	cmp	r0, #0
 8002594:	d1e8      	bne.n	8002568 <mcp794xx_set_alarm+0x98>
            err = mcp794xx_set_alarm_time_date(pHandle, alarm, pTime);
 8002596:	4632      	mov	r2, r6
 8002598:	4621      	mov	r1, r4
 800259a:	4628      	mov	r0, r5
 800259c:	f7ff fde6 	bl	800216c <mcp794xx_set_alarm_time_date>
 80025a0:	7038      	strb	r0, [r7, #0]
            if(err)
 80025a2:	2800      	cmp	r0, #0
 80025a4:	d0cf      	beq.n	8002546 <mcp794xx_set_alarm+0x76>
                a_mcp794xx_print_error_msg(pHandle, "failed to set alarm 1");
 80025a6:	4908      	ldr	r1, [pc, #32]	; (80025c8 <mcp794xx_set_alarm+0xf8>)
 80025a8:	e7d0      	b.n	800254c <mcp794xx_set_alarm+0x7c>
        return 2;     /**< return failed error */
 80025aa:	2402      	movs	r4, #2
 80025ac:	e7af      	b.n	800250e <mcp794xx_set_alarm+0x3e>
        return 3;      /**< return failed error */
 80025ae:	2403      	movs	r4, #3
 80025b0:	e7ad      	b.n	800250e <mcp794xx_set_alarm+0x3e>
 80025b2:	bf00      	nop
 80025b4:	08008ede 	.word	0x08008ede
 80025b8:	200003bc 	.word	0x200003bc
 80025bc:	080091fb 	.word	0x080091fb
 80025c0:	08009216 	.word	0x08009216
 80025c4:	0800922c 	.word	0x0800922c
 80025c8:	08009247 	.word	0x08009247

080025cc <mcp794xx_get_alarm_time_date>:
            - 2 handle null
 *          - 3 handle is not initialized
 *          - 4 invalid alarm
 */
uint8_t mcp794xx_get_alarm_time_date(mcp794xx_handle_t *const pHandle, mcp794xx_alarm_t alarm, mcp794xx_time_t *pTime)
{
 80025cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80025ce:	4614      	mov	r4, r2
    uint8_t timeBuffer[MCP794XX_TIME_BUFFER_SIZE];

    if(pHandle == NULL)
 80025d0:	4605      	mov	r5, r0
 80025d2:	2800      	cmp	r0, #0
 80025d4:	d063      	beq.n	800269e <mcp794xx_get_alarm_time_date+0xd2>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 80025d6:	7fc6      	ldrb	r6, [r0, #31]
 80025d8:	2e01      	cmp	r6, #1
 80025da:	d162      	bne.n	80026a2 <mcp794xx_get_alarm_time_date+0xd6>
        return 3;      /**< return failed error */

    memset(timeBuffer, 0, sizeof(timeBuffer));              /**< clear buffer */
 80025dc:	2300      	movs	r3, #0
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	f8cd 3003 	str.w	r3, [sp, #3]

    if(alarm == MCP794XX_ALARM0)
 80025e4:	b971      	cbnz	r1, 8002604 <mcp794xx_get_alarm_time_date+0x38>
    {

        err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_ALM0_SEC_REG, (uint8_t *)timeBuffer, (MCP794XX_TIME_BUFFER_SIZE - 1));    /**< read alarm time and date registers */
 80025e6:	2306      	movs	r3, #6
 80025e8:	466a      	mov	r2, sp
 80025ea:	210a      	movs	r1, #10
 80025ec:	f7ff f914 	bl	8001818 <rtc_mcp794xx_i2c_read>
 80025f0:	4b2d      	ldr	r3, [pc, #180]	; (80026a8 <mcp794xx_get_alarm_time_date+0xdc>)
 80025f2:	7018      	strb	r0, [r3, #0]
        if(err)
 80025f4:	b1b8      	cbz	r0, 8002626 <mcp794xx_get_alarm_time_date+0x5a>
        {
            a_mcp794xx_print_error_msg(pHandle, "read alarm 0 time and date");
 80025f6:	492d      	ldr	r1, [pc, #180]	; (80026ac <mcp794xx_get_alarm_time_date+0xe0>)
    else if(alarm == MCP794XX_ALARM1)
    {
        err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_ALM1_SEC_REG, (uint8_t *)timeBuffer, (MCP794XX_TIME_BUFFER_SIZE - 1));    /**< read alarm time and date registers */
        if(err)
        {
            a_mcp794xx_print_error_msg(pHandle, "read alarm 1 time and date");
 80025f8:	4628      	mov	r0, r5
 80025fa:	f7ff f97d 	bl	80018f8 <a_mcp794xx_print_error_msg>
    pTime->weekDay = a_pcf85xxx_bcd2dec(timeBuffer[3] & MCP794XX_ALARMx_WDAY_MASK);
    pTime->date = a_pcf85xxx_bcd2dec(timeBuffer[4] & MCP794XX_ALARMx_DATE_MASK);
    pTime->month = a_pcf85xxx_bcd2dec(timeBuffer[5] & MCP794XX_ALARMx_MONTH_MASK);

    return 0;              /**< success */
}
 80025fe:	4630      	mov	r0, r6
 8002600:	b002      	add	sp, #8
 8002602:	bd70      	pop	{r4, r5, r6, pc}
    else if(alarm == MCP794XX_ALARM1)
 8002604:	2901      	cmp	r1, #1
 8002606:	d109      	bne.n	800261c <mcp794xx_get_alarm_time_date+0x50>
        err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_ALM1_SEC_REG, (uint8_t *)timeBuffer, (MCP794XX_TIME_BUFFER_SIZE - 1));    /**< read alarm time and date registers */
 8002608:	2306      	movs	r3, #6
 800260a:	466a      	mov	r2, sp
 800260c:	2111      	movs	r1, #17
 800260e:	f7ff f903 	bl	8001818 <rtc_mcp794xx_i2c_read>
 8002612:	4b25      	ldr	r3, [pc, #148]	; (80026a8 <mcp794xx_get_alarm_time_date+0xdc>)
 8002614:	7018      	strb	r0, [r3, #0]
        if(err)
 8002616:	b130      	cbz	r0, 8002626 <mcp794xx_get_alarm_time_date+0x5a>
            a_mcp794xx_print_error_msg(pHandle, "read alarm 1 time and date");
 8002618:	4925      	ldr	r1, [pc, #148]	; (80026b0 <mcp794xx_get_alarm_time_date+0xe4>)
 800261a:	e7ed      	b.n	80025f8 <mcp794xx_get_alarm_time_date+0x2c>
        a_mcp794xx_print_error_msg(pHandle, "invalid alarm selected");
 800261c:	4925      	ldr	r1, [pc, #148]	; (80026b4 <mcp794xx_get_alarm_time_date+0xe8>)
 800261e:	f7ff f96b 	bl	80018f8 <a_mcp794xx_print_error_msg>
        return 4;
 8002622:	2604      	movs	r6, #4
 8002624:	e7eb      	b.n	80025fe <mcp794xx_get_alarm_time_date+0x32>
    pTime->second = a_pcf85xxx_bcd2dec(timeBuffer[0] & MCP794XX_ALARMx_SEC_BCD_MASK);
 8002626:	f89d 0000 	ldrb.w	r0, [sp]
 800262a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800262e:	f7ff f972 	bl	8001916 <a_pcf85xxx_bcd2dec>
 8002632:	7160      	strb	r0, [r4, #5]
    pTime->minute = a_pcf85xxx_bcd2dec(timeBuffer[1] & MCP794XX_ALARMx_MIN_BCD_MASK);
 8002634:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8002638:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800263c:	f7ff f96b 	bl	8001916 <a_pcf85xxx_bcd2dec>
 8002640:	7120      	strb	r0, [r4, #4]
    if(pHandle->time_param.time_Format == MCP794XX_24HR_FORMAT)
 8002642:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
 8002646:	b9eb      	cbnz	r3, 8002684 <mcp794xx_get_alarm_time_date+0xb8>
        pTime->hour = a_pcf85xxx_bcd2dec(timeBuffer[2] & MCP794XX_ALARMx_24HR_FRMT_BCD_MASK);
 8002648:	f89d 0002 	ldrb.w	r0, [sp, #2]
 800264c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8002650:	f7ff f961 	bl	8001916 <a_pcf85xxx_bcd2dec>
 8002654:	70e0      	strb	r0, [r4, #3]
    pTime->weekDay = a_pcf85xxx_bcd2dec(timeBuffer[3] & MCP794XX_ALARMx_WDAY_MASK);
 8002656:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800265a:	f000 0007 	and.w	r0, r0, #7
 800265e:	f7ff f95a 	bl	8001916 <a_pcf85xxx_bcd2dec>
 8002662:	71e0      	strb	r0, [r4, #7]
    pTime->date = a_pcf85xxx_bcd2dec(timeBuffer[4] & MCP794XX_ALARMx_DATE_MASK);
 8002664:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8002668:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800266c:	f7ff f953 	bl	8001916 <a_pcf85xxx_bcd2dec>
 8002670:	70a0      	strb	r0, [r4, #2]
    pTime->month = a_pcf85xxx_bcd2dec(timeBuffer[5] & MCP794XX_ALARMx_MONTH_MASK);
 8002672:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8002676:	f000 001f 	and.w	r0, r0, #31
 800267a:	f7ff f94c 	bl	8001916 <a_pcf85xxx_bcd2dec>
    return 0;              /**< success */
 800267e:	2600      	movs	r6, #0
    pTime->month = a_pcf85xxx_bcd2dec(timeBuffer[5] & MCP794XX_ALARMx_MONTH_MASK);
 8002680:	71a0      	strb	r0, [r4, #6]
    return 0;              /**< success */
 8002682:	e7bc      	b.n	80025fe <mcp794xx_get_alarm_time_date+0x32>
    else if(pHandle->time_param.time_Format == MCP794XX_12HR_FORMAT)
 8002684:	2b01      	cmp	r3, #1
 8002686:	d1e6      	bne.n	8002656 <mcp794xx_get_alarm_time_date+0x8a>
        pTime->hour = a_pcf85xxx_bcd2dec(timeBuffer[2] & MCP794XX_ALARMx_12HR_FRMT_BCD_MASK);
 8002688:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800268c:	f002 001f 	and.w	r0, r2, #31
 8002690:	f7ff f941 	bl	8001916 <a_pcf85xxx_bcd2dec>
        pTime->am_pm_indicator = ((timeBuffer[2] & MCP794XX_ALARMx_AM_PM_MASK) >> 5) ;
 8002694:	f3c2 1240 	ubfx	r2, r2, #5, #1
        pTime->hour = a_pcf85xxx_bcd2dec(timeBuffer[2] & MCP794XX_ALARMx_12HR_FRMT_BCD_MASK);
 8002698:	70e0      	strb	r0, [r4, #3]
        pTime->am_pm_indicator = ((timeBuffer[2] & MCP794XX_ALARMx_AM_PM_MASK) >> 5) ;
 800269a:	7262      	strb	r2, [r4, #9]
 800269c:	e7db      	b.n	8002656 <mcp794xx_get_alarm_time_date+0x8a>
        return 2;     /**< return failed error */
 800269e:	2602      	movs	r6, #2
 80026a0:	e7ad      	b.n	80025fe <mcp794xx_get_alarm_time_date+0x32>
        return 3;      /**< return failed error */
 80026a2:	2603      	movs	r6, #3
 80026a4:	e7ab      	b.n	80025fe <mcp794xx_get_alarm_time_date+0x32>
 80026a6:	bf00      	nop
 80026a8:	200003bc 	.word	0x200003bc
 80026ac:	0800925d 	.word	0x0800925d
 80026b0:	08009278 	.word	0x08009278
 80026b4:	08008ede 	.word	0x08008ede

080026b8 <mcp794xx_get_alarm>:
            - 2 handle null
 *          - 3 handle is not initialized
 *          - 4 invalid alarm
 */
uint8_t mcp794xx_get_alarm(mcp794xx_handle_t *const pHandle, mcp794xx_alarm_t alarm, mcp794xx_alarm_mask_t *pMask, mcp794xx_time_t *pTime)
{
 80026b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80026bc:	4690      	mov	r8, r2
 80026be:	460f      	mov	r7, r1
 80026c0:	461a      	mov	r2, r3
    uint8_t read_status;

    if(pHandle == NULL)
 80026c2:	4605      	mov	r5, r0
 80026c4:	b398      	cbz	r0, 800272e <mcp794xx_get_alarm+0x76>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 80026c6:	f890 901f 	ldrb.w	r9, [r0, #31]
 80026ca:	f1b9 0f01 	cmp.w	r9, #1
 80026ce:	d130      	bne.n	8002732 <mcp794xx_get_alarm+0x7a>
        return 3;      /**< return failed error */

    err = mcp794xx_get_alarm_time_date(pHandle, alarm, pTime);
 80026d0:	f7ff ff7c 	bl	80025cc <mcp794xx_get_alarm_time_date>
 80026d4:	4e18      	ldr	r6, [pc, #96]	; (8002738 <mcp794xx_get_alarm+0x80>)
 80026d6:	4604      	mov	r4, r0
 80026d8:	7030      	strb	r0, [r6, #0]
    if(err){
 80026da:	b140      	cbz	r0, 80026ee <mcp794xx_get_alarm+0x36>
         a_mcp794xx_print_error_msg(pHandle, "failed to get alarm time and date");
 80026dc:	4917      	ldr	r1, [pc, #92]	; (800273c <mcp794xx_get_alarm+0x84>)
    if(alarm == MCP794XX_ALARM0)
    {
        err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_ALM0_WKDAY_REG, (uint8_t *)&read_status, 1);
        if(err)
        {
            a_mcp794xx_print_error_msg(pHandle, "failed read alarm mask");
 80026de:	4628      	mov	r0, r5
 80026e0:	f7ff f90a 	bl	80018f8 <a_mcp794xx_print_error_msg>
            return err;
 80026e4:	7834      	ldrb	r4, [r6, #0]
    }

    *pMask = (mcp794xx_alarm_mask_t)((read_status & MCP794XX_ALARMx_TYPE_MASK) >> 4);

    return 0;
}
 80026e6:	4620      	mov	r0, r4
 80026e8:	b003      	add	sp, #12
 80026ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(alarm == MCP794XX_ALARM0)
 80026ee:	b957      	cbnz	r7, 8002706 <mcp794xx_get_alarm+0x4e>
        err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_ALM0_WKDAY_REG, (uint8_t *)&read_status, 1);
 80026f0:	464b      	mov	r3, r9
 80026f2:	f10d 0207 	add.w	r2, sp, #7
 80026f6:	210d      	movs	r1, #13
 80026f8:	4628      	mov	r0, r5
 80026fa:	f7ff f88d 	bl	8001818 <rtc_mcp794xx_i2c_read>
 80026fe:	7030      	strb	r0, [r6, #0]
        if(err)
 8002700:	b170      	cbz	r0, 8002720 <mcp794xx_get_alarm+0x68>
            a_mcp794xx_print_error_msg(pHandle, "failed read alarm mask");
 8002702:	490f      	ldr	r1, [pc, #60]	; (8002740 <mcp794xx_get_alarm+0x88>)
 8002704:	e7eb      	b.n	80026de <mcp794xx_get_alarm+0x26>
    else if(alarm == MCP794XX_ALARM1)
 8002706:	2f01      	cmp	r7, #1
 8002708:	d104      	bne.n	8002714 <mcp794xx_get_alarm+0x5c>
        err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_ALM1_WKDAY_REG, (uint8_t *)&read_status, 1);
 800270a:	463b      	mov	r3, r7
 800270c:	f10d 0207 	add.w	r2, sp, #7
 8002710:	2114      	movs	r1, #20
 8002712:	e7f1      	b.n	80026f8 <mcp794xx_get_alarm+0x40>
        a_mcp794xx_print_error_msg(pHandle, "invalid alarm selected");
 8002714:	490b      	ldr	r1, [pc, #44]	; (8002744 <mcp794xx_get_alarm+0x8c>)
 8002716:	4628      	mov	r0, r5
 8002718:	f7ff f8ee 	bl	80018f8 <a_mcp794xx_print_error_msg>
        return 4;
 800271c:	2404      	movs	r4, #4
 800271e:	e7e2      	b.n	80026e6 <mcp794xx_get_alarm+0x2e>
    *pMask = (mcp794xx_alarm_mask_t)((read_status & MCP794XX_ALARMx_TYPE_MASK) >> 4);
 8002720:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002724:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002728:	f888 3000 	strb.w	r3, [r8]
    return 0;
 800272c:	e7db      	b.n	80026e6 <mcp794xx_get_alarm+0x2e>
        return 2;     /**< return failed error */
 800272e:	2402      	movs	r4, #2
 8002730:	e7d9      	b.n	80026e6 <mcp794xx_get_alarm+0x2e>
        return 3;      /**< return failed error */
 8002732:	2403      	movs	r4, #3
 8002734:	e7d7      	b.n	80026e6 <mcp794xx_get_alarm+0x2e>
 8002736:	bf00      	nop
 8002738:	200003bc 	.word	0x200003bc
 800273c:	08009293 	.word	0x08009293
 8002740:	080092b5 	.word	0x080092b5
 8002744:	08008ede 	.word	0x08008ede

08002748 <mcp794xx_get_alarm_interrupt_flag>:
            - 2 handle null
 *          - 3 handle is not initialized
 *          - 4 invalid alarm
 */
uint8_t mcp794xx_get_alarm_interrupt_flag(mcp794xx_handle_t *const pHandle, mcp794xx_alarm_t alarm, mcp794xx_alarm_int_flag_t *pFlag)
{
 8002748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800274a:	460c      	mov	r4, r1
 800274c:	4616      	mov	r6, r2
    uint8_t read_status;

    if(pHandle == NULL)
 800274e:	4605      	mov	r5, r0
 8002750:	b378      	cbz	r0, 80027b2 <mcp794xx_get_alarm_interrupt_flag+0x6a>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 8002752:	7fc7      	ldrb	r7, [r0, #31]
 8002754:	2f01      	cmp	r7, #1
 8002756:	d12e      	bne.n	80027b6 <mcp794xx_get_alarm_interrupt_flag+0x6e>
        return 3;      /**< return failed error */

    if(alarm == MCP794XX_ALARM0)
 8002758:	b979      	cbnz	r1, 800277a <mcp794xx_get_alarm_interrupt_flag+0x32>
    {
         err = rtc_mcp794xx_i2c_read(pHandle,MCP794XX_ALM0_WKDAY_REG, (uint8_t *)&read_status, 1);
 800275a:	463b      	mov	r3, r7
 800275c:	f10d 0207 	add.w	r2, sp, #7
 8002760:	210d      	movs	r1, #13
 8002762:	f7ff f859 	bl	8001818 <rtc_mcp794xx_i2c_read>
 8002766:	4b15      	ldr	r3, [pc, #84]	; (80027bc <mcp794xx_get_alarm_interrupt_flag+0x74>)
 8002768:	7018      	strb	r0, [r3, #0]
        if(err)
 800276a:	b1b8      	cbz	r0, 800279c <mcp794xx_get_alarm_interrupt_flag+0x54>
        {
            a_mcp794xx_print_error_msg(pHandle, "failed to read alarm 0 interrupt flag");
 800276c:	4628      	mov	r0, r5
 800276e:	4914      	ldr	r1, [pc, #80]	; (80027c0 <mcp794xx_get_alarm_interrupt_flag+0x78>)
 8002770:	f7ff f8c2 	bl	80018f8 <a_mcp794xx_print_error_msg>
            return 1;           /**< failed error */
 8002774:	4638      	mov	r0, r7
        a_mcp794xx_print_error_msg(pHandle, "invalid alarm selected");
        return 4;
    }

    return 0;              /**< success */
}
 8002776:	b003      	add	sp, #12
 8002778:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(alarm == MCP794XX_ALARM1)
 800277a:	2901      	cmp	r1, #1
 800277c:	d114      	bne.n	80027a8 <mcp794xx_get_alarm_interrupt_flag+0x60>
        err = rtc_mcp794xx_i2c_read(pHandle,MCP794XX_ALM1_WKDAY_REG, (uint8_t *)&read_status, 1);
 800277e:	460b      	mov	r3, r1
 8002780:	f10d 0207 	add.w	r2, sp, #7
 8002784:	2114      	movs	r1, #20
 8002786:	f7ff f847 	bl	8001818 <rtc_mcp794xx_i2c_read>
 800278a:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <mcp794xx_get_alarm_interrupt_flag+0x74>)
 800278c:	7018      	strb	r0, [r3, #0]
        if(err)
 800278e:	b128      	cbz	r0, 800279c <mcp794xx_get_alarm_interrupt_flag+0x54>
            a_mcp794xx_print_error_msg(pHandle, "failed to read alarm 1 interrupt flag");
 8002790:	4628      	mov	r0, r5
 8002792:	490c      	ldr	r1, [pc, #48]	; (80027c4 <mcp794xx_get_alarm_interrupt_flag+0x7c>)
 8002794:	f7ff f8b0 	bl	80018f8 <a_mcp794xx_print_error_msg>
            return 1;           /**< failed error */
 8002798:	4620      	mov	r0, r4
 800279a:	e7ec      	b.n	8002776 <mcp794xx_get_alarm_interrupt_flag+0x2e>
       *pFlag = (mcp794xx_alarm_int_flag_t)((read_status & MCP794XX_ALARMx_IF_MASK ) >> 3);
 800279c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80027a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80027a4:	7033      	strb	r3, [r6, #0]
 80027a6:	e7e6      	b.n	8002776 <mcp794xx_get_alarm_interrupt_flag+0x2e>
        a_mcp794xx_print_error_msg(pHandle, "invalid alarm selected");
 80027a8:	4907      	ldr	r1, [pc, #28]	; (80027c8 <mcp794xx_get_alarm_interrupt_flag+0x80>)
 80027aa:	f7ff f8a5 	bl	80018f8 <a_mcp794xx_print_error_msg>
        return 4;
 80027ae:	2004      	movs	r0, #4
 80027b0:	e7e1      	b.n	8002776 <mcp794xx_get_alarm_interrupt_flag+0x2e>
        return 2;     /**< return failed error */
 80027b2:	2002      	movs	r0, #2
 80027b4:	e7df      	b.n	8002776 <mcp794xx_get_alarm_interrupt_flag+0x2e>
        return 3;      /**< return failed error */
 80027b6:	2003      	movs	r0, #3
 80027b8:	e7dd      	b.n	8002776 <mcp794xx_get_alarm_interrupt_flag+0x2e>
 80027ba:	bf00      	nop
 80027bc:	200003bc 	.word	0x200003bc
 80027c0:	080092cc 	.word	0x080092cc
 80027c4:	080092f2 	.word	0x080092f2
 80027c8:	08008ede 	.word	0x08008ede

080027cc <mcp794xx_clr_alarm_interrupt_flag>:
            - 2 handle null
 *          - 3 handle is not initialized
 *          - 4 invalid alarm
 */
uint8_t mcp794xx_clr_alarm_interrupt_flag(mcp794xx_handle_t *const pHandle, mcp794xx_alarm_t alarm)
{
 80027cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t read_status;

    if(pHandle == NULL)
 80027ce:	4604      	mov	r4, r0
 80027d0:	2800      	cmp	r0, #0
 80027d2:	d048      	beq.n	8002866 <mcp794xx_clr_alarm_interrupt_flag+0x9a>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 80027d4:	7fc5      	ldrb	r5, [r0, #31]
 80027d6:	2d01      	cmp	r5, #1
 80027d8:	d147      	bne.n	800286a <mcp794xx_clr_alarm_interrupt_flag+0x9e>
        return 3;      /**< return failed error */

    if(alarm == MCP794XX_ALARM0)
 80027da:	bb09      	cbnz	r1, 8002820 <mcp794xx_clr_alarm_interrupt_flag+0x54>
    {
        err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_ALM0_WKDAY_REG, (uint8_t *)&read_status, 1);
 80027dc:	462b      	mov	r3, r5
 80027de:	f10d 0207 	add.w	r2, sp, #7
 80027e2:	210d      	movs	r1, #13
 80027e4:	f7ff f818 	bl	8001818 <rtc_mcp794xx_i2c_read>
 80027e8:	4e21      	ldr	r6, [pc, #132]	; (8002870 <mcp794xx_clr_alarm_interrupt_flag+0xa4>)
 80027ea:	7030      	strb	r0, [r6, #0]
        if(err)
 80027ec:	b120      	cbz	r0, 80027f8 <mcp794xx_clr_alarm_interrupt_flag+0x2c>
        {
            a_mcp794xx_print_error_msg(pHandle, "read alarm 0 interrupt flag register");
 80027ee:	4921      	ldr	r1, [pc, #132]	; (8002874 <mcp794xx_clr_alarm_interrupt_flag+0xa8>)

        read_status &= ~(1 << 3);
        err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM1_WKDAY_REG, (uint8_t *)&read_status);
        if(err)
        {
            a_mcp794xx_print_error_msg(pHandle, "clear alarm 1 interrupt flag bit");
 80027f0:	4620      	mov	r0, r4
 80027f2:	f7ff f881 	bl	80018f8 <a_mcp794xx_print_error_msg>
            return 1;           /**< failed error */
 80027f6:	e00e      	b.n	8002816 <mcp794xx_clr_alarm_interrupt_flag+0x4a>
        read_status &= ~(1 << 3);
 80027f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
        err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM0_WKDAY_REG, (uint8_t *)&read_status);
 80027fc:	f10d 0207 	add.w	r2, sp, #7
        read_status &= ~(1 << 3);
 8002800:	f023 0308 	bic.w	r3, r3, #8
        err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM0_WKDAY_REG, (uint8_t *)&read_status);
 8002804:	210d      	movs	r1, #13
 8002806:	4620      	mov	r0, r4
        read_status &= ~(1 << 3);
 8002808:	f88d 3007 	strb.w	r3, [sp, #7]
        err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM0_WKDAY_REG, (uint8_t *)&read_status);
 800280c:	f7fe fff3 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8002810:	7030      	strb	r0, [r6, #0]
        if(err)
 8002812:	b918      	cbnz	r0, 800281c <mcp794xx_clr_alarm_interrupt_flag+0x50>

        a_mcp794xx_print_error_msg(pHandle, "invalid alarm selected");
        return 4;
    }

    return 0;              /**< success */
 8002814:	2500      	movs	r5, #0
}
 8002816:	4628      	mov	r0, r5
 8002818:	b002      	add	sp, #8
 800281a:	bd70      	pop	{r4, r5, r6, pc}
            a_mcp794xx_print_error_msg(pHandle, "clear alarm 0 interrupt flag bit");
 800281c:	4916      	ldr	r1, [pc, #88]	; (8002878 <mcp794xx_clr_alarm_interrupt_flag+0xac>)
 800281e:	e7e7      	b.n	80027f0 <mcp794xx_clr_alarm_interrupt_flag+0x24>
    else if(alarm == MCP794XX_ALARM1)
 8002820:	2901      	cmp	r1, #1
 8002822:	d11b      	bne.n	800285c <mcp794xx_clr_alarm_interrupt_flag+0x90>
        err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_ALM1_WKDAY_REG, (uint8_t *)&read_status, 1);
 8002824:	462b      	mov	r3, r5
 8002826:	f10d 0207 	add.w	r2, sp, #7
 800282a:	2114      	movs	r1, #20
 800282c:	f7fe fff4 	bl	8001818 <rtc_mcp794xx_i2c_read>
 8002830:	4e0f      	ldr	r6, [pc, #60]	; (8002870 <mcp794xx_clr_alarm_interrupt_flag+0xa4>)
 8002832:	7030      	strb	r0, [r6, #0]
        if(err)
 8002834:	b108      	cbz	r0, 800283a <mcp794xx_clr_alarm_interrupt_flag+0x6e>
            a_mcp794xx_print_error_msg(pHandle, "read alarm 1 interrupt flag register");
 8002836:	4911      	ldr	r1, [pc, #68]	; (800287c <mcp794xx_clr_alarm_interrupt_flag+0xb0>)
 8002838:	e7da      	b.n	80027f0 <mcp794xx_clr_alarm_interrupt_flag+0x24>
        read_status &= ~(1 << 3);
 800283a:	f89d 3007 	ldrb.w	r3, [sp, #7]
        err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM1_WKDAY_REG, (uint8_t *)&read_status);
 800283e:	f10d 0207 	add.w	r2, sp, #7
        read_status &= ~(1 << 3);
 8002842:	f023 0308 	bic.w	r3, r3, #8
        err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM1_WKDAY_REG, (uint8_t *)&read_status);
 8002846:	2114      	movs	r1, #20
 8002848:	4620      	mov	r0, r4
        read_status &= ~(1 << 3);
 800284a:	f88d 3007 	strb.w	r3, [sp, #7]
        err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_ALM1_WKDAY_REG, (uint8_t *)&read_status);
 800284e:	f7fe ffd2 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8002852:	7030      	strb	r0, [r6, #0]
        if(err)
 8002854:	2800      	cmp	r0, #0
 8002856:	d0dd      	beq.n	8002814 <mcp794xx_clr_alarm_interrupt_flag+0x48>
            a_mcp794xx_print_error_msg(pHandle, "clear alarm 1 interrupt flag bit");
 8002858:	4909      	ldr	r1, [pc, #36]	; (8002880 <mcp794xx_clr_alarm_interrupt_flag+0xb4>)
 800285a:	e7c9      	b.n	80027f0 <mcp794xx_clr_alarm_interrupt_flag+0x24>
        a_mcp794xx_print_error_msg(pHandle, "invalid alarm selected");
 800285c:	4909      	ldr	r1, [pc, #36]	; (8002884 <mcp794xx_clr_alarm_interrupt_flag+0xb8>)
 800285e:	f7ff f84b 	bl	80018f8 <a_mcp794xx_print_error_msg>
        return 4;
 8002862:	2504      	movs	r5, #4
 8002864:	e7d7      	b.n	8002816 <mcp794xx_clr_alarm_interrupt_flag+0x4a>
        return 2;     /**< return failed error */
 8002866:	2502      	movs	r5, #2
 8002868:	e7d5      	b.n	8002816 <mcp794xx_clr_alarm_interrupt_flag+0x4a>
        return 3;      /**< return failed error */
 800286a:	2503      	movs	r5, #3
 800286c:	e7d3      	b.n	8002816 <mcp794xx_clr_alarm_interrupt_flag+0x4a>
 800286e:	bf00      	nop
 8002870:	200003bc 	.word	0x200003bc
 8002874:	08009318 	.word	0x08009318
 8002878:	0800933d 	.word	0x0800933d
 800287c:	0800935e 	.word	0x0800935e
 8002880:	08009383 	.word	0x08009383
 8002884:	08008ede 	.word	0x08008ede

08002888 <mcp794xx_set_mfp_logic_level>:
 *          - 1 failed
            - 2 handle null
 *          - 3 handle is not initialized
 */
uint8_t mcp794xx_set_mfp_logic_level(mcp794xx_handle_t *const pHandle, mcp794xx_mfp_logic_level_t logicLevel)
{
 8002888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800288a:	460f      	mov	r7, r1
    uint8_t read_status;

    if(pHandle == NULL)
 800288c:	4604      	mov	r4, r0
 800288e:	b320      	cbz	r0, 80028da <mcp794xx_set_mfp_logic_level+0x52>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 8002890:	7fc5      	ldrb	r5, [r0, #31]
 8002892:	2d01      	cmp	r5, #1
 8002894:	d123      	bne.n	80028de <mcp794xx_set_mfp_logic_level+0x56>
        return 3;      /**< return failed error */

    err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_CONTROL_REG, (uint8_t *)&read_status, 1);
 8002896:	462b      	mov	r3, r5
 8002898:	f10d 0207 	add.w	r2, sp, #7
 800289c:	2107      	movs	r1, #7
 800289e:	f7fe ffbb 	bl	8001818 <rtc_mcp794xx_i2c_read>
 80028a2:	4e11      	ldr	r6, [pc, #68]	; (80028e8 <mcp794xx_set_mfp_logic_level+0x60>)
 80028a4:	7030      	strb	r0, [r6, #0]
    if(err)
 80028a6:	b130      	cbz	r0, 80028b6 <mcp794xx_set_mfp_logic_level+0x2e>
    {
        a_mcp794xx_print_error_msg(pHandle, "read ctrl register");
 80028a8:	4910      	ldr	r1, [pc, #64]	; (80028ec <mcp794xx_set_mfp_logic_level+0x64>)
    read_status |= (logicLevel << 7);

    err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_CONTROL_REG, (uint8_t *)&read_status);
    if(err)
    {
        a_mcp794xx_print_error_msg(pHandle, "write ctrl register");
 80028aa:	4620      	mov	r0, r4
 80028ac:	f7ff f824 	bl	80018f8 <a_mcp794xx_print_error_msg>
        return 1;           /**< failed error */
    }

    return 0;              /**< success */
}
 80028b0:	4628      	mov	r0, r5
 80028b2:	b003      	add	sp, #12
 80028b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    read_status &= ~(1 << 7);
 80028b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80028ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    read_status |= (logicLevel << 7);
 80028be:	ea43 11c7 	orr.w	r1, r3, r7, lsl #7
 80028c2:	f88d 1007 	strb.w	r1, [sp, #7]
    err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_CONTROL_REG, (uint8_t *)&read_status);
 80028c6:	f10d 0207 	add.w	r2, sp, #7
 80028ca:	2107      	movs	r1, #7
 80028cc:	4620      	mov	r0, r4
 80028ce:	f7fe ff92 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 80028d2:	7030      	strb	r0, [r6, #0]
    if(err)
 80028d4:	b128      	cbz	r0, 80028e2 <mcp794xx_set_mfp_logic_level+0x5a>
        a_mcp794xx_print_error_msg(pHandle, "write ctrl register");
 80028d6:	4906      	ldr	r1, [pc, #24]	; (80028f0 <mcp794xx_set_mfp_logic_level+0x68>)
 80028d8:	e7e7      	b.n	80028aa <mcp794xx_set_mfp_logic_level+0x22>
        return 2;     /**< return failed error */
 80028da:	2502      	movs	r5, #2
 80028dc:	e7e8      	b.n	80028b0 <mcp794xx_set_mfp_logic_level+0x28>
        return 3;      /**< return failed error */
 80028de:	2503      	movs	r5, #3
 80028e0:	e7e6      	b.n	80028b0 <mcp794xx_set_mfp_logic_level+0x28>
    return 0;              /**< success */
 80028e2:	4605      	mov	r5, r0
 80028e4:	e7e4      	b.n	80028b0 <mcp794xx_set_mfp_logic_level+0x28>
 80028e6:	bf00      	nop
 80028e8:	200003bc 	.word	0x200003bc
 80028ec:	080093a4 	.word	0x080093a4
 80028f0:	080093b7 	.word	0x080093b7

080028f4 <mcp94xx_set_sqr_wave_output_freq>:
            - 2 handle null
 *          - 3 handle is not initialized
 * @note prior to setting frequency output, the "mcp794xx_set_sqr_wave_enable_status" must called first to enable this feature.
 */
uint8_t mcp94xx_set_sqr_wave_output_freq(mcp794xx_handle_t *const pHandle, mcp94xx_sqr_wave_freq_t freq)
{
 80028f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028f6:	460e      	mov	r6, r1
    uint8_t read_status;

    if(pHandle == NULL)
 80028f8:	4604      	mov	r4, r0
 80028fa:	b318      	cbz	r0, 8002944 <mcp94xx_set_sqr_wave_output_freq+0x50>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 80028fc:	7fc5      	ldrb	r5, [r0, #31]
 80028fe:	2d01      	cmp	r5, #1
 8002900:	d122      	bne.n	8002948 <mcp94xx_set_sqr_wave_output_freq+0x54>
        return 3;      /**< return failed error */

    err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_CONTROL_REG, (uint8_t *)&read_status, 1);
 8002902:	462b      	mov	r3, r5
 8002904:	f10d 0207 	add.w	r2, sp, #7
 8002908:	2107      	movs	r1, #7
 800290a:	f7fe ff85 	bl	8001818 <rtc_mcp794xx_i2c_read>
 800290e:	4f10      	ldr	r7, [pc, #64]	; (8002950 <mcp94xx_set_sqr_wave_output_freq+0x5c>)
 8002910:	7038      	strb	r0, [r7, #0]
    if(err)
 8002912:	b130      	cbz	r0, 8002922 <mcp94xx_set_sqr_wave_output_freq+0x2e>
    {
        a_mcp794xx_print_error_msg(pHandle, "read ctrl register");
 8002914:	490f      	ldr	r1, [pc, #60]	; (8002954 <mcp94xx_set_sqr_wave_output_freq+0x60>)
    read_status |= (freq << 0);

    err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_CONTROL_REG, (uint8_t *)&read_status);
    if(err)
    {
        a_mcp794xx_print_error_msg(pHandle, "write ctrl register");
 8002916:	4620      	mov	r0, r4
 8002918:	f7fe ffee 	bl	80018f8 <a_mcp794xx_print_error_msg>
        return 1;           /**< failed error */
    }

    return 0;              /**< success */
}
 800291c:	4628      	mov	r0, r5
 800291e:	b003      	add	sp, #12
 8002920:	bdf0      	pop	{r4, r5, r6, r7, pc}
    read_status &= ~ (0b11 << 0);
 8002922:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002926:	f021 0103 	bic.w	r1, r1, #3
    read_status |= (freq << 0);
 800292a:	430e      	orrs	r6, r1
    err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_CONTROL_REG, (uint8_t *)&read_status);
 800292c:	f10d 0207 	add.w	r2, sp, #7
 8002930:	2107      	movs	r1, #7
 8002932:	4620      	mov	r0, r4
    read_status |= (freq << 0);
 8002934:	f88d 6007 	strb.w	r6, [sp, #7]
    err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_CONTROL_REG, (uint8_t *)&read_status);
 8002938:	f7fe ff5d 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 800293c:	7038      	strb	r0, [r7, #0]
    if(err)
 800293e:	b128      	cbz	r0, 800294c <mcp94xx_set_sqr_wave_output_freq+0x58>
        a_mcp794xx_print_error_msg(pHandle, "write ctrl register");
 8002940:	4905      	ldr	r1, [pc, #20]	; (8002958 <mcp94xx_set_sqr_wave_output_freq+0x64>)
 8002942:	e7e8      	b.n	8002916 <mcp94xx_set_sqr_wave_output_freq+0x22>
        return 2;     /**< return failed error */
 8002944:	2502      	movs	r5, #2
 8002946:	e7e9      	b.n	800291c <mcp94xx_set_sqr_wave_output_freq+0x28>
        return 3;      /**< return failed error */
 8002948:	2503      	movs	r5, #3
 800294a:	e7e7      	b.n	800291c <mcp94xx_set_sqr_wave_output_freq+0x28>
    return 0;              /**< success */
 800294c:	4605      	mov	r5, r0
 800294e:	e7e5      	b.n	800291c <mcp94xx_set_sqr_wave_output_freq+0x28>
 8002950:	200003bc 	.word	0x200003bc
 8002954:	080093a4 	.word	0x080093a4
 8002958:	080093b7 	.word	0x080093b7

0800295c <mcp794xx_set_sqr_wave_enable_status>:
 *          - 1 failed
            - 2 handle null
 *          - 3 handle is not initialized
 */
uint8_t mcp794xx_set_sqr_wave_enable_status(mcp794xx_handle_t *const pHandle, mcp794xx_bool_t enable)
{
 800295c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800295e:	460f      	mov	r7, r1
    uint8_t read_status;

    if(pHandle == NULL)
 8002960:	4604      	mov	r4, r0
 8002962:	b320      	cbz	r0, 80029ae <mcp794xx_set_sqr_wave_enable_status+0x52>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 8002964:	7fc5      	ldrb	r5, [r0, #31]
 8002966:	2d01      	cmp	r5, #1
 8002968:	d123      	bne.n	80029b2 <mcp794xx_set_sqr_wave_enable_status+0x56>
        return 3;      /**< return failed error */

    err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_CONTROL_REG, (uint8_t *)&read_status, 1);
 800296a:	462b      	mov	r3, r5
 800296c:	f10d 0207 	add.w	r2, sp, #7
 8002970:	2107      	movs	r1, #7
 8002972:	f7fe ff51 	bl	8001818 <rtc_mcp794xx_i2c_read>
 8002976:	4e11      	ldr	r6, [pc, #68]	; (80029bc <mcp794xx_set_sqr_wave_enable_status+0x60>)
 8002978:	7030      	strb	r0, [r6, #0]
    if(err)
 800297a:	b130      	cbz	r0, 800298a <mcp794xx_set_sqr_wave_enable_status+0x2e>
    {
        a_mcp794xx_print_error_msg(pHandle, "read ctrl register");
 800297c:	4910      	ldr	r1, [pc, #64]	; (80029c0 <mcp794xx_set_sqr_wave_enable_status+0x64>)
    read_status |= (enable << 6);

    err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_CONTROL_REG, (uint8_t *)&read_status);
    if(err)
    {
        a_mcp794xx_print_error_msg(pHandle, "write ctrl register");
 800297e:	4620      	mov	r0, r4
 8002980:	f7fe ffba 	bl	80018f8 <a_mcp794xx_print_error_msg>
        return 1;           /**< failed error */
    }

    return 0;           /**< success */
}
 8002984:	4628      	mov	r0, r5
 8002986:	b003      	add	sp, #12
 8002988:	bdf0      	pop	{r4, r5, r6, r7, pc}
    read_status &= ~ (1 << 6);
 800298a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800298e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    read_status |= (enable << 6);
 8002992:	ea43 1187 	orr.w	r1, r3, r7, lsl #6
 8002996:	f88d 1007 	strb.w	r1, [sp, #7]
    err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_CONTROL_REG, (uint8_t *)&read_status);
 800299a:	f10d 0207 	add.w	r2, sp, #7
 800299e:	2107      	movs	r1, #7
 80029a0:	4620      	mov	r0, r4
 80029a2:	f7fe ff28 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 80029a6:	7030      	strb	r0, [r6, #0]
    if(err)
 80029a8:	b128      	cbz	r0, 80029b6 <mcp794xx_set_sqr_wave_enable_status+0x5a>
        a_mcp794xx_print_error_msg(pHandle, "write ctrl register");
 80029aa:	4906      	ldr	r1, [pc, #24]	; (80029c4 <mcp794xx_set_sqr_wave_enable_status+0x68>)
 80029ac:	e7e7      	b.n	800297e <mcp794xx_set_sqr_wave_enable_status+0x22>
        return 2;     /**< return failed error */
 80029ae:	2502      	movs	r5, #2
 80029b0:	e7e8      	b.n	8002984 <mcp794xx_set_sqr_wave_enable_status+0x28>
        return 3;      /**< return failed error */
 80029b2:	2503      	movs	r5, #3
 80029b4:	e7e6      	b.n	8002984 <mcp794xx_set_sqr_wave_enable_status+0x28>
    return 0;           /**< success */
 80029b6:	4605      	mov	r5, r0
 80029b8:	e7e4      	b.n	8002984 <mcp794xx_set_sqr_wave_enable_status+0x28>
 80029ba:	bf00      	nop
 80029bc:	200003bc 	.word	0x200003bc
 80029c0:	080093a4 	.word	0x080093a4
 80029c4:	080093b7 	.word	0x080093b7

080029c8 <mcp794xx_set_coarse_trim_mode_status>:
            - 2 handle null
 *          - 3 handle is not initialized
 * @note Coarse Trim mode results in the MCP7941X applying digital trimming every 64 Hz clock cycle.
 */
uint8_t mcp794xx_set_coarse_trim_mode_status(mcp794xx_handle_t *const pHandle, mcp794xx_bool_t status)
{
 80029c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029ca:	460f      	mov	r7, r1

    uint8_t read_status;

    if(pHandle == NULL)
 80029cc:	4604      	mov	r4, r0
 80029ce:	b320      	cbz	r0, 8002a1a <mcp794xx_set_coarse_trim_mode_status+0x52>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 80029d0:	7fc5      	ldrb	r5, [r0, #31]
 80029d2:	2d01      	cmp	r5, #1
 80029d4:	d123      	bne.n	8002a1e <mcp794xx_set_coarse_trim_mode_status+0x56>
        return 3;      /**< return failed error */

    err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_CONTROL_REG, (uint8_t *)&read_status, 1);
 80029d6:	462b      	mov	r3, r5
 80029d8:	f10d 0207 	add.w	r2, sp, #7
 80029dc:	2107      	movs	r1, #7
 80029de:	f7fe ff1b 	bl	8001818 <rtc_mcp794xx_i2c_read>
 80029e2:	4e11      	ldr	r6, [pc, #68]	; (8002a28 <mcp794xx_set_coarse_trim_mode_status+0x60>)
 80029e4:	7030      	strb	r0, [r6, #0]
    if(err)
 80029e6:	b130      	cbz	r0, 80029f6 <mcp794xx_set_coarse_trim_mode_status+0x2e>
    {
        a_mcp794xx_print_error_msg(pHandle, "read ctrl register");
 80029e8:	4910      	ldr	r1, [pc, #64]	; (8002a2c <mcp794xx_set_coarse_trim_mode_status+0x64>)
    read_status |= (status << 2);

    err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_CONTROL_REG, (uint8_t *)&read_status);
    if(err)
    {
        a_mcp794xx_print_error_msg(pHandle, "write ctrl register");
 80029ea:	4620      	mov	r0, r4
 80029ec:	f7fe ff84 	bl	80018f8 <a_mcp794xx_print_error_msg>
        return 1;           /**< failed error */
    }

    return 0;           /**< success */
}
 80029f0:	4628      	mov	r0, r5
 80029f2:	b003      	add	sp, #12
 80029f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    read_status &= ~ (1 << 2);
 80029f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80029fa:	f023 0304 	bic.w	r3, r3, #4
    read_status |= (status << 2);
 80029fe:	ea43 0187 	orr.w	r1, r3, r7, lsl #2
 8002a02:	f88d 1007 	strb.w	r1, [sp, #7]
    err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_CONTROL_REG, (uint8_t *)&read_status);
 8002a06:	f10d 0207 	add.w	r2, sp, #7
 8002a0a:	2107      	movs	r1, #7
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f7fe fef2 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8002a12:	7030      	strb	r0, [r6, #0]
    if(err)
 8002a14:	b128      	cbz	r0, 8002a22 <mcp794xx_set_coarse_trim_mode_status+0x5a>
        a_mcp794xx_print_error_msg(pHandle, "write ctrl register");
 8002a16:	4906      	ldr	r1, [pc, #24]	; (8002a30 <mcp794xx_set_coarse_trim_mode_status+0x68>)
 8002a18:	e7e7      	b.n	80029ea <mcp794xx_set_coarse_trim_mode_status+0x22>
        return 2;     /**< return failed error */
 8002a1a:	2502      	movs	r5, #2
 8002a1c:	e7e8      	b.n	80029f0 <mcp794xx_set_coarse_trim_mode_status+0x28>
        return 3;      /**< return failed error */
 8002a1e:	2503      	movs	r5, #3
 8002a20:	e7e6      	b.n	80029f0 <mcp794xx_set_coarse_trim_mode_status+0x28>
    return 0;           /**< success */
 8002a22:	4605      	mov	r5, r0
 8002a24:	e7e4      	b.n	80029f0 <mcp794xx_set_coarse_trim_mode_status+0x28>
 8002a26:	bf00      	nop
 8002a28:	200003bc 	.word	0x200003bc
 8002a2c:	080093a4 	.word	0x080093a4
 8002a30:	080093b7 	.word	0x080093b7

08002a34 <mcp794xx_set_ext_batt_enable_status>:
            - 2 handle null
 *          - 3 handle is not initialized
 *          - 4 variant not supported
 */
uint8_t  mcp794xx_set_ext_batt_enable_status(mcp794xx_handle_t *const pHandle, mcp794xx_bool_t status)
{
 8002a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a36:	460f      	mov	r7, r1

    uint8_t read_status;

    if(pHandle == NULL)
 8002a38:	4604      	mov	r4, r0
 8002a3a:	b360      	cbz	r0, 8002a96 <mcp794xx_set_ext_batt_enable_status+0x62>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 8002a3c:	7fc5      	ldrb	r5, [r0, #31]
 8002a3e:	2d01      	cmp	r5, #1
 8002a40:	d12b      	bne.n	8002a9a <mcp794xx_set_ext_batt_enable_status+0x66>
        return 3;      /**< return failed error */

    if(pHandle->device_variant == MCP7940M_VARIANT){
 8002a42:	7f83      	ldrb	r3, [r0, #30]
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d106      	bne.n	8002a56 <mcp794xx_set_ext_batt_enable_status+0x22>
         a_mcp794xx_print_error_msg(pHandle, "set external battery bckup, not supported for the mcp7940M variant");
 8002a48:	4916      	ldr	r1, [pc, #88]	; (8002aa4 <mcp794xx_set_ext_batt_enable_status+0x70>)
 8002a4a:	f7fe ff55 	bl	80018f8 <a_mcp794xx_print_error_msg>
        return 4;
 8002a4e:	2504      	movs	r5, #4
        a_mcp794xx_print_error_msg(pHandle, "set external battery bckup status");
        return 1;           /**< failed error */
    }

    return 0;           /**< success */
}
 8002a50:	4628      	mov	r0, r5
 8002a52:	b003      	add	sp, #12
 8002a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_RTC_WKDAY_REG, (uint8_t *)&read_status, 1);
 8002a56:	462b      	mov	r3, r5
 8002a58:	f10d 0207 	add.w	r2, sp, #7
 8002a5c:	2103      	movs	r1, #3
 8002a5e:	f7fe fedb 	bl	8001818 <rtc_mcp794xx_i2c_read>
 8002a62:	4e11      	ldr	r6, [pc, #68]	; (8002aa8 <mcp794xx_set_ext_batt_enable_status+0x74>)
 8002a64:	7030      	strb	r0, [r6, #0]
    if(err)
 8002a66:	b120      	cbz	r0, 8002a72 <mcp794xx_set_ext_batt_enable_status+0x3e>
        a_mcp794xx_print_error_msg(pHandle, "set external battery bckup");
 8002a68:	4910      	ldr	r1, [pc, #64]	; (8002aac <mcp794xx_set_ext_batt_enable_status+0x78>)
        a_mcp794xx_print_error_msg(pHandle, "set external battery bckup status");
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	f7fe ff44 	bl	80018f8 <a_mcp794xx_print_error_msg>
        return 1;           /**< failed error */
 8002a70:	e7ee      	b.n	8002a50 <mcp794xx_set_ext_batt_enable_status+0x1c>
    read_status &= ~ (1 << 3);
 8002a72:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002a76:	f023 0308 	bic.w	r3, r3, #8
    read_status |= (status << 3);
 8002a7a:	ea43 01c7 	orr.w	r1, r3, r7, lsl #3
 8002a7e:	f88d 1007 	strb.w	r1, [sp, #7]
    err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_RTC_WKDAY_REG, (uint8_t *)&read_status);
 8002a82:	f10d 0207 	add.w	r2, sp, #7
 8002a86:	2103      	movs	r1, #3
 8002a88:	4620      	mov	r0, r4
 8002a8a:	f7fe feb4 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8002a8e:	7030      	strb	r0, [r6, #0]
    if(err)
 8002a90:	b128      	cbz	r0, 8002a9e <mcp794xx_set_ext_batt_enable_status+0x6a>
        a_mcp794xx_print_error_msg(pHandle, "set external battery bckup status");
 8002a92:	4907      	ldr	r1, [pc, #28]	; (8002ab0 <mcp794xx_set_ext_batt_enable_status+0x7c>)
 8002a94:	e7e9      	b.n	8002a6a <mcp794xx_set_ext_batt_enable_status+0x36>
        return 2;     /**< return failed error */
 8002a96:	2502      	movs	r5, #2
 8002a98:	e7da      	b.n	8002a50 <mcp794xx_set_ext_batt_enable_status+0x1c>
        return 3;      /**< return failed error */
 8002a9a:	2503      	movs	r5, #3
 8002a9c:	e7d8      	b.n	8002a50 <mcp794xx_set_ext_batt_enable_status+0x1c>
    return 0;           /**< success */
 8002a9e:	4605      	mov	r5, r0
 8002aa0:	e7d6      	b.n	8002a50 <mcp794xx_set_ext_batt_enable_status+0x1c>
 8002aa2:	bf00      	nop
 8002aa4:	080093cb 	.word	0x080093cb
 8002aa8:	200003bc 	.word	0x200003bc
 8002aac:	0800940e 	.word	0x0800940e
 8002ab0:	08009429 	.word	0x08009429

08002ab4 <mcp794xx_set_ext_osc_enable_status>:
 *          - 1 failed
            - 2 handle null
 *          - 3 handle is not initialized
 */
uint8_t mcp794xx_set_ext_osc_enable_status(mcp794xx_handle_t *const pHandle, mcp794xx_osc_status_t status)
{
 8002ab4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ab6:	460d      	mov	r5, r1

    uint8_t read_status;

    if(pHandle == NULL)
 8002ab8:	4604      	mov	r4, r0
 8002aba:	b318      	cbz	r0, 8002b04 <mcp794xx_set_ext_osc_enable_status+0x50>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 8002abc:	7fc3      	ldrb	r3, [r0, #31]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d122      	bne.n	8002b08 <mcp794xx_set_ext_osc_enable_status+0x54>
        return 3;      /**< return failed error */

    err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_CONTROL_REG, (uint8_t *)&read_status, 1);
 8002ac2:	f10d 0207 	add.w	r2, sp, #7
 8002ac6:	2107      	movs	r1, #7
 8002ac8:	f7fe fea6 	bl	8001818 <rtc_mcp794xx_i2c_read>
 8002acc:	4e0f      	ldr	r6, [pc, #60]	; (8002b0c <mcp794xx_set_ext_osc_enable_status+0x58>)
 8002ace:	7030      	strb	r0, [r6, #0]
    if(err)
 8002ad0:	b130      	cbz	r0, 8002ae0 <mcp794xx_set_ext_osc_enable_status+0x2c>
    {
        a_mcp794xx_print_error_msg(pHandle, "set external oscillator");
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	490e      	ldr	r1, [pc, #56]	; (8002b10 <mcp794xx_set_ext_osc_enable_status+0x5c>)
 8002ad6:	f7fe ff0f 	bl	80018f8 <a_mcp794xx_print_error_msg>
        return 1;           /**< failed error */
 8002ada:	2001      	movs	r0, #1
        a_mcp794xx_print_error_msg(pHandle, "set external oscillator");
        return 1;           /**< failed error */
    }

    return 0;           /**< success */
}
 8002adc:	b002      	add	sp, #8
 8002ade:	bd70      	pop	{r4, r5, r6, pc}
    read_status &= ~ (1 << 3);
 8002ae0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002ae4:	f023 0308 	bic.w	r3, r3, #8
    read_status |= (status << 3);
 8002ae8:	ea43 01c5 	orr.w	r1, r3, r5, lsl #3
 8002aec:	f88d 1007 	strb.w	r1, [sp, #7]
    err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_CONTROL_REG, (uint8_t *)&read_status);
 8002af0:	f10d 0207 	add.w	r2, sp, #7
 8002af4:	2107      	movs	r1, #7
 8002af6:	4620      	mov	r0, r4
 8002af8:	f7fe fe7d 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8002afc:	7030      	strb	r0, [r6, #0]
    if(err)
 8002afe:	2800      	cmp	r0, #0
 8002b00:	d0ec      	beq.n	8002adc <mcp794xx_set_ext_osc_enable_status+0x28>
 8002b02:	e7e6      	b.n	8002ad2 <mcp794xx_set_ext_osc_enable_status+0x1e>
        return 2;     /**< return failed error */
 8002b04:	2002      	movs	r0, #2
 8002b06:	e7e9      	b.n	8002adc <mcp794xx_set_ext_osc_enable_status+0x28>
        return 3;      /**< return failed error */
 8002b08:	2003      	movs	r0, #3
 8002b0a:	e7e7      	b.n	8002adc <mcp794xx_set_ext_osc_enable_status+0x28>
 8002b0c:	200003bc 	.word	0x200003bc
 8002b10:	0800944b 	.word	0x0800944b

08002b14 <mcp794xx_set_osc_start_bit>:
 *            - 2 pHandle is NULL
 *            - 3 pHandle is not initialized
 * @note      none
 */
uint8_t mcp794xx_set_osc_start_bit(mcp794xx_handle_t *const pHandle, mcp794xx_bool_t status)
{
 8002b14:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b16:	460d      	mov	r5, r1
    uint8_t read_status;

    if(pHandle == NULL)
 8002b18:	4604      	mov	r4, r0
 8002b1a:	b318      	cbz	r0, 8002b64 <mcp794xx_set_osc_start_bit+0x50>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 8002b1c:	7fc3      	ldrb	r3, [r0, #31]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d122      	bne.n	8002b68 <mcp794xx_set_osc_start_bit+0x54>
        return 3;      /**< return failed error */

    err = rtc_mcp794xx_i2c_read(pHandle, MCP794XX_RTC_SECOND_REG, (uint8_t *)&read_status, 1);
 8002b22:	f10d 0207 	add.w	r2, sp, #7
 8002b26:	2100      	movs	r1, #0
 8002b28:	f7fe fe76 	bl	8001818 <rtc_mcp794xx_i2c_read>
 8002b2c:	4e0f      	ldr	r6, [pc, #60]	; (8002b6c <mcp794xx_set_osc_start_bit+0x58>)
 8002b2e:	7030      	strb	r0, [r6, #0]
    if(err)
 8002b30:	b130      	cbz	r0, 8002b40 <mcp794xx_set_osc_start_bit+0x2c>
    {
        a_mcp794xx_print_error_msg(pHandle, "set osc start bit");
 8002b32:	4620      	mov	r0, r4
 8002b34:	490e      	ldr	r1, [pc, #56]	; (8002b70 <mcp794xx_set_osc_start_bit+0x5c>)
 8002b36:	f7fe fedf 	bl	80018f8 <a_mcp794xx_print_error_msg>
        return 1;           /**< failed error */
 8002b3a:	2001      	movs	r0, #1
    {
        a_mcp794xx_print_error_msg(pHandle, "set osc start bit");
        return 1;           /**< failed error */
    }
     return 0;  /**< success */
}
 8002b3c:	b002      	add	sp, #8
 8002b3e:	bd70      	pop	{r4, r5, r6, pc}
    read_status &= ~ (1 << 7);
 8002b40:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002b44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    read_status |= (status << 7);
 8002b48:	ea43 11c5 	orr.w	r1, r3, r5, lsl #7
 8002b4c:	f88d 1007 	strb.w	r1, [sp, #7]
    err = rtc_mcp794xx_i2c_write(pHandle, MCP794XX_RTC_SECOND_REG, (uint8_t *)&read_status);
 8002b50:	f10d 0207 	add.w	r2, sp, #7
 8002b54:	4601      	mov	r1, r0
 8002b56:	4620      	mov	r0, r4
 8002b58:	f7fe fe4d 	bl	80017f6 <rtc_mcp794xx_i2c_write>
 8002b5c:	7030      	strb	r0, [r6, #0]
    if(err)
 8002b5e:	2800      	cmp	r0, #0
 8002b60:	d0ec      	beq.n	8002b3c <mcp794xx_set_osc_start_bit+0x28>
 8002b62:	e7e6      	b.n	8002b32 <mcp794xx_set_osc_start_bit+0x1e>
        return 2;     /**< return failed error */
 8002b64:	2002      	movs	r0, #2
 8002b66:	e7e9      	b.n	8002b3c <mcp794xx_set_osc_start_bit+0x28>
        return 3;      /**< return failed error */
 8002b68:	2003      	movs	r0, #3
 8002b6a:	e7e7      	b.n	8002b3c <mcp794xx_set_osc_start_bit+0x28>
 8002b6c:	200003bc 	.word	0x200003bc
 8002b70:	08009463 	.word	0x08009463

08002b74 <mcp794xx_read_epoch_unix_time_stamp>:
 *            - 2 pHandle is NULL
 *            - 3 pHandle is not initialized
 * @note      This function will fail to execute from January 19, 2038
 */
uint8_t mcp794xx_read_epoch_unix_time_stamp(mcp794xx_handle_t *const pHandle, mcp794xx_time_t *pTime, uint32_t *pEpoch_time)
{
 8002b74:	b5f0      	push	{r4, r5, r6, r7, lr}
     uint32_t total_days_from_months = 0;
     uint32_t total_num_days = 0;
	 int index;
	 

    if(pHandle == NULL)
 8002b76:	2800      	cmp	r0, #0
 8002b78:	d035      	beq.n	8002be6 <mcp794xx_read_epoch_unix_time_stamp+0x72>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 8002b7a:	7fc3      	ldrb	r3, [r0, #31]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d134      	bne.n	8002bea <mcp794xx_read_epoch_unix_time_stamp+0x76>
        return 3;      /**< return failed error */

    num_years = pTime->year - 1970;   /**< number years since 1970*/
 8002b80:	880e      	ldrh	r6, [r1, #0]
    num_months = pTime->month - 1;    /**< number of months from January */
 8002b82:	798d      	ldrb	r5, [r1, #6]
    num_days = pTime->date - 1;		  /**< number of days since the 1st of the current month*/
 8002b84:	7888      	ldrb	r0, [r1, #2]
    num_years = pTime->year - 1970;   /**< number years since 1970*/
 8002b86:	364e      	adds	r6, #78	; 0x4e
    num_months = pTime->month - 1;    /**< number of months from January */
 8002b88:	3d01      	subs	r5, #1
    num_days = pTime->date - 1;		  /**< number of days since the 1st of the current month*/
 8002b8a:	3801      	subs	r0, #1

    for(index = 0; index < num_years; index++)
 8002b8c:	2300      	movs	r3, #0
    num_years = pTime->year - 1970;   /**< number years since 1970*/
 8002b8e:	b2f6      	uxtb	r6, r6
    num_months = pTime->month - 1;    /**< number of months from January */
 8002b90:	b2ed      	uxtb	r5, r5
    num_days = pTime->date - 1;		  /**< number of days since the 1st of the current month*/
 8002b92:	b2c0      	uxtb	r0, r0
     uint32_t total_days_from_years = 0;
 8002b94:	461c      	mov	r4, r3
    for(index = 0; index < num_years; index++)
 8002b96:	42b3      	cmp	r3, r6
 8002b98:	db18      	blt.n	8002bcc <mcp794xx_read_epoch_unix_time_stamp+0x58>
    	{
    		total_days_from_years += 366;
    	}
    }

    for(index = 0; index < num_months; index++)
 8002b9a:	2600      	movs	r6, #0
 8002b9c:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <mcp794xx_read_epoch_unix_time_stamp+0x7c>)
     uint32_t total_days_from_months = 0;
 8002b9e:	4637      	mov	r7, r6
    for(index = 0; index < num_months; index++)
 8002ba0:	42ae      	cmp	r6, r5
 8002ba2:	db1b      	blt.n	8002bdc <mcp794xx_read_epoch_unix_time_stamp+0x68>
       total_days_from_months += days_in_month[index];
    }

    total_num_days = (total_days_from_years + total_days_from_months + num_days) - 1;                           /**< calculate total number of days since 1 January 1970 */

    *pEpoch_time = (total_num_days * 86400) + (pTime->hour * 3600) + (pTime->minute * 60) + pTime->second;      /**< calculate number of seconds from current time and date */
 8002ba4:	790b      	ldrb	r3, [r1, #4]
 8002ba6:	78cd      	ldrb	r5, [r1, #3]
 8002ba8:	7949      	ldrb	r1, [r1, #5]
 8002baa:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	f44f 6661 	mov.w	r6, #3600	; 0xe10
 8002bb4:	fb06 3305 	mla	r3, r6, r5, r3
 8002bb8:	440b      	add	r3, r1
    total_num_days = (total_days_from_years + total_days_from_months + num_days) - 1;                           /**< calculate total number of days since 1 January 1970 */
 8002bba:	1e41      	subs	r1, r0, #1
 8002bbc:	4421      	add	r1, r4
    *pEpoch_time = (total_num_days * 86400) + (pTime->hour * 3600) + (pTime->minute * 60) + pTime->second;      /**< calculate number of seconds from current time and date */
 8002bbe:	480d      	ldr	r0, [pc, #52]	; (8002bf4 <mcp794xx_read_epoch_unix_time_stamp+0x80>)
    total_num_days = (total_days_from_years + total_days_from_months + num_days) - 1;                           /**< calculate total number of days since 1 January 1970 */
 8002bc0:	4439      	add	r1, r7
    *pEpoch_time = (total_num_days * 86400) + (pTime->hour * 3600) + (pTime->minute * 60) + pTime->second;      /**< calculate number of seconds from current time and date */
 8002bc2:	fb00 3301 	mla	r3, r0, r1, r3
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	2000      	movs	r0, #0

	return 0;   /**< success */
}
 8002bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	if(index % 4)
 8002bcc:	079f      	lsls	r7, r3, #30
    		total_days_from_years += 365;
 8002bce:	bf14      	ite	ne
 8002bd0:	f204 146d 	addwne	r4, r4, #365	; 0x16d
    		total_days_from_years += 366;
 8002bd4:	f504 74b7 	addeq.w	r4, r4, #366	; 0x16e
    for(index = 0; index < num_years; index++)
 8002bd8:	3301      	adds	r3, #1
 8002bda:	e7dc      	b.n	8002b96 <mcp794xx_read_epoch_unix_time_stamp+0x22>
       total_days_from_months += days_in_month[index];
 8002bdc:	f813 cb01 	ldrb.w	ip, [r3], #1
    for(index = 0; index < num_months; index++)
 8002be0:	3601      	adds	r6, #1
       total_days_from_months += days_in_month[index];
 8002be2:	4467      	add	r7, ip
    for(index = 0; index < num_months; index++)
 8002be4:	e7dc      	b.n	8002ba0 <mcp794xx_read_epoch_unix_time_stamp+0x2c>
        return 2;     /**< return failed error */
 8002be6:	2002      	movs	r0, #2
 8002be8:	e7ef      	b.n	8002bca <mcp794xx_read_epoch_unix_time_stamp+0x56>
        return 3;      /**< return failed error */
 8002bea:	2003      	movs	r0, #3
 8002bec:	e7ed      	b.n	8002bca <mcp794xx_read_epoch_unix_time_stamp+0x56>
 8002bee:	bf00      	nop
 8002bf0:	0800991f 	.word	0x0800991f
 8002bf4:	00015180 	.word	0x00015180

08002bf8 <mcp794xx_convert_epoch_unix_time_stamp>:
 *            - 2 pHandle is NULL
 *            - 3 pHandle is not initialized
 * @note      This function will fail to execute from January 19, 2038
 */
uint8_t mcp794xx_convert_epoch_unix_time_stamp(mcp794xx_handle_t *const pHandle, uint32_t u32Epoch_time, mcp794xx_time_t *pTime_out)
{
 8002bf8:	b570      	push	{r4, r5, r6, lr}
    uint32_t sec_of_day;
    uint16_t num_days;

	if(pHandle == NULL)
 8002bfa:	2800      	cmp	r0, #0
 8002bfc:	f000 80a0 	beq.w	8002d40 <mcp794xx_convert_epoch_unix_time_stamp+0x148>
	return 2;     /**< return failed error */
	if(pHandle->inited != 1)
 8002c00:	7fc3      	ldrb	r3, [r0, #31]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	f040 809e 	bne.w	8002d44 <mcp794xx_convert_epoch_unix_time_stamp+0x14c>
	return 3;      /**< return failed error */

	/**< get hour, minute and seconds */
    sec_of_day = u32Epoch_time % (24 * 60 * 60);
 8002c08:	4c4f      	ldr	r4, [pc, #316]	; (8002d48 <mcp794xx_convert_epoch_unix_time_stamp+0x150>)
 8002c0a:	fbb1 f0f4 	udiv	r0, r1, r4

    pTime_out->hour       = sec_of_day / (60 * 60);
 8002c0e:	f44f 6561 	mov.w	r5, #3600	; 0xe10
    sec_of_day = u32Epoch_time % (24 * 60 * 60);
 8002c12:	fb04 1010 	mls	r0, r4, r0, r1
    pTime_out->hour       = sec_of_day / (60 * 60);
 8002c16:	fbb0 f3f5 	udiv	r3, r0, r5
    pTime_out->minute     = sec_of_day % (60 * 60) / 60;
 8002c1a:	fb05 0013 	mls	r0, r5, r3, r0
 8002c1e:	253c      	movs	r5, #60	; 0x3c
    pTime_out->hour       = sec_of_day / (60 * 60);
 8002c20:	70d3      	strb	r3, [r2, #3]
    pTime_out->second     = u32Epoch_time % 60;
 8002c22:	fbb1 f3f5 	udiv	r3, r1, r5
 8002c26:	fb05 1313 	mls	r3, r5, r3, r1
 8002c2a:	7153      	strb	r3, [r2, #5]

    /**< get years */
    num_days = (u32Epoch_time - SECONDS_FROM_Y1970_TO_Y2000) / 86400;
 8002c2c:	4b47      	ldr	r3, [pc, #284]	; (8002d4c <mcp794xx_convert_epoch_unix_time_stamp+0x154>)
    pTime_out->minute     = sec_of_day % (60 * 60) / 60;
 8002c2e:	fbb0 f0f5 	udiv	r0, r0, r5
    num_days = (u32Epoch_time - SECONDS_FROM_Y1970_TO_Y2000) / 86400;
 8002c32:	440b      	add	r3, r1
 8002c34:	fbb3 f3f4 	udiv	r3, r3, r4

    num_days += 1401;           			/**< move starting point to 1996-03-01 */
 8002c38:	f203 5379 	addw	r3, r3, #1401	; 0x579
 8002c3c:	b29b      	uxth	r3, r3
    pTime_out->year = (num_days/1461)*4;    /**< take care of 4-year intervals */
 8002c3e:	f240 54b5 	movw	r4, #1461	; 0x5b5
    pTime_out->minute     = sec_of_day % (60 * 60) / 60;
 8002c42:	7110      	strb	r0, [r2, #4]
    pTime_out->year = (num_days/1461)*4;    /**< take care of 4-year intervals */
 8002c44:	fbb3 f0f4 	udiv	r0, r3, r4
    num_days%=1461; 						/**< max 3 years 365 days (not 4 years!) remaining */
 8002c48:	fb04 3310 	mls	r3, r4, r0, r3
 8002c4c:	b29b      	uxth	r3, r3
    pTime_out->year = (num_days/1461)*4;    /**< take care of 4-year intervals */
 8002c4e:	0081      	lsls	r1, r0, #2

    if (num_days>=730) {num_days-=730; pTime_out->year+=2;} /**< 2 years */
 8002c50:	f240 20d9 	movw	r0, #729	; 0x2d9
 8002c54:	4283      	cmp	r3, r0
 8002c56:	bf88      	it	hi
 8002c58:	f2a3 23da 	subwhi	r3, r3, #730	; 0x2da
    pTime_out->year = (num_days/1461)*4;    /**< take care of 4-year intervals */
 8002c5c:	b289      	uxth	r1, r1
    if (num_days>=730) {num_days-=730; pTime_out->year+=2;} /**< 2 years */
 8002c5e:	bf84      	itt	hi
 8002c60:	b29b      	uxthhi	r3, r3
 8002c62:	3102      	addhi	r1, #2
    if (num_days>=365) {num_days-=365; pTime_out->year++;}  /**< 1 year */
 8002c64:	f5b3 7fb6 	cmp.w	r3, #364	; 0x16c
    if (num_days>=730) {num_days-=730; pTime_out->year+=2;} /**< 2 years */
 8002c68:	8011      	strh	r1, [r2, #0]
    if (num_days>=365) {num_days-=365; pTime_out->year++;}  /**< 1 year */
 8002c6a:	d906      	bls.n	8002c7a <mcp794xx_convert_epoch_unix_time_stamp+0x82>
 8002c6c:	f46f 71b6 	mvn.w	r1, #364	; 0x16c
 8002c70:	440b      	add	r3, r1
 8002c72:	8811      	ldrh	r1, [r2, #0]
 8002c74:	3101      	adds	r1, #1
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	8011      	strh	r1, [r2, #0]

    /**< get months */
    pTime_out->month = 3; 									/**< get started on the month */
 8002c7a:	2103      	movs	r1, #3

    if (num_days>=306) {num_days-=306; pTime_out->year++; pTime_out->month=1;}  /**< for Jan. and Feb. */
 8002c7c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
    pTime_out->month = 3; 									/**< get started on the month */
 8002c80:	7191      	strb	r1, [r2, #6]
    if (num_days>=306) {num_days-=306; pTime_out->year++; pTime_out->month=1;}  /**< for Jan. and Feb. */
 8002c82:	d30e      	bcc.n	8002ca2 <mcp794xx_convert_epoch_unix_time_stamp+0xaa>
 8002c84:	8811      	ldrh	r1, [r2, #0]
 8002c86:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8002c8a:	3101      	adds	r1, #1
 8002c8c:	8011      	strh	r1, [r2, #0]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	2101      	movs	r1, #1
    else if (num_days>=153) {num_days-=153; pTime_out->month=8;} 				/**< for Aug. thru Dec. */
    if (num_days>=122) {num_days-=122; pTime_out->month+=4;} 					/**< here, 122 days mean 4 months */
    else if (num_days>=61) {num_days-=61; pTime_out->month+=2;} 				/**< 61 days mean 2 months */
 8002c92:	7191      	strb	r1, [r2, #6]
    if (num_days>=31) {num_days-=31; pTime_out->month++;} 						/**< 31 days means exactly 1 month */
 8002c94:	2b1e      	cmp	r3, #30
 8002c96:	7991      	ldrb	r1, [r2, #6]
 8002c98:	d910      	bls.n	8002cbc <mcp794xx_convert_epoch_unix_time_stamp+0xc4>
 8002c9a:	3b1f      	subs	r3, #31
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3101      	adds	r1, #1
 8002ca0:	e00b      	b.n	8002cba <mcp794xx_convert_epoch_unix_time_stamp+0xc2>
    else if (num_days>=153) {num_days-=153; pTime_out->month=8;} 				/**< for Aug. thru Dec. */
 8002ca2:	2b98      	cmp	r3, #152	; 0x98
 8002ca4:	bf81      	itttt	hi
 8002ca6:	3b99      	subhi	r3, #153	; 0x99
 8002ca8:	2108      	movhi	r1, #8
 8002caa:	b29b      	uxthhi	r3, r3
 8002cac:	7191      	strbhi	r1, [r2, #6]
    if (num_days>=122) {num_days-=122; pTime_out->month+=4;} 					/**< here, 122 days mean 4 months */
 8002cae:	2b79      	cmp	r3, #121	; 0x79
 8002cb0:	7991      	ldrb	r1, [r2, #6]
 8002cb2:	d93f      	bls.n	8002d34 <mcp794xx_convert_epoch_unix_time_stamp+0x13c>
 8002cb4:	3b7a      	subs	r3, #122	; 0x7a
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3104      	adds	r1, #4
    if (num_days>=31) {num_days-=31; pTime_out->month++;} 						/**< 31 days means exactly 1 month */
 8002cba:	7191      	strb	r1, [r2, #6]

    pTime_out->date = num_days + 1; 											/**< get the day of the month */

    pTime_out->year+=(2000 - 4); 												/**< make y be 0 for AD 2000 */
 8002cbc:	8814      	ldrh	r4, [r2, #0]

    /**< get weekdays */
    pTime_out->weekDay = ((pTime_out->date + ((153 * (pTime_out->month + 12 * ((14 - pTime_out->month) / 12) - 3) + 2) / 5)
 8002cbe:	7991      	ldrb	r1, [r2, #6]
    pTime_out->year+=(2000 - 4); 												/**< make y be 0 for AD 2000 */
 8002cc0:	f204 74cc 	addw	r4, r4, #1996	; 0x7cc
 8002cc4:	b2a4      	uxth	r4, r4
    pTime_out->date = num_days + 1; 											/**< get the day of the month */
 8002cc6:	3301      	adds	r3, #1
    pTime_out->weekDay = ((pTime_out->date + ((153 * (pTime_out->month + 12 * ((14 - pTime_out->month) / 12) - 3) + 2) / 5)
 8002cc8:	260c      	movs	r6, #12
    pTime_out->year+=(2000 - 4); 												/**< make y be 0 for AD 2000 */
 8002cca:	8014      	strh	r4, [r2, #0]
               + (365 * (pTime_out->year + 4800 - ((14 - pTime_out->month) / 12)))
 8002ccc:	f504 5496 	add.w	r4, r4, #4800	; 0x12c0
    pTime_out->date = num_days + 1; 											/**< get the day of the month */
 8002cd0:	b2d8      	uxtb	r0, r3
    pTime_out->weekDay = ((pTime_out->date + ((153 * (pTime_out->month + 12 * ((14 - pTime_out->month) / 12) - 3) + 2) / 5)
 8002cd2:	f1c1 050e 	rsb	r5, r1, #14
               + (365 * (pTime_out->year + 4800 - ((14 - pTime_out->month) / 12)))
 8002cd6:	f06f 030b 	mvn.w	r3, #11
 8002cda:	fb95 f3f3 	sdiv	r3, r5, r3
 8002cde:	441c      	add	r4, r3
    pTime_out->weekDay = ((pTime_out->date + ((153 * (pTime_out->month + 12 * ((14 - pTime_out->month) / 12) - 3) + 2) / 5)
 8002ce0:	fb95 f3f6 	sdiv	r3, r5, r6
 8002ce4:	fb06 1303 	mla	r3, r6, r3, r1
 8002ce8:	3b03      	subs	r3, #3
 8002cea:	2199      	movs	r1, #153	; 0x99
 8002cec:	434b      	muls	r3, r1
 8002cee:	3302      	adds	r3, #2
 8002cf0:	2105      	movs	r1, #5
 8002cf2:	fb93 f3f1 	sdiv	r3, r3, r1
               + (365 * (pTime_out->year + 4800 - ((14 - pTime_out->month) / 12)))
 8002cf6:	f240 116d 	movw	r1, #365	; 0x16d
    pTime_out->weekDay = ((pTime_out->date + ((153 * (pTime_out->month + 12 * ((14 - pTime_out->month) / 12) - 3) + 2) / 5)
 8002cfa:	4403      	add	r3, r0
               + (365 * (pTime_out->year + 4800 - ((14 - pTime_out->month) / 12)))
 8002cfc:	fb01 3304 	mla	r3, r1, r4, r3
               + ((pTime_out->year + 4800 - ((14 - pTime_out->month) / 12)) / 4)
 8002d00:	eb03 03a4 	add.w	r3, r3, r4, asr #2
               - ((pTime_out->year + 4800 - ((14 - pTime_out->month) / 12)) / 100)
 8002d04:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8002d08:	fb94 f1f1 	sdiv	r1, r4, r1
 8002d0c:	440b      	add	r3, r1
               + ((pTime_out->year + 4800 - ((14 - pTime_out->month) / 12)) / 400)
 8002d0e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002d12:	fbb4 f4f1 	udiv	r4, r4, r1
 8002d16:	4423      	add	r3, r4
               - 32045)
 8002d18:	f5a3 43fa 	sub.w	r3, r3, #32000	; 0x7d00
 8002d1c:	3b2d      	subs	r3, #45	; 0x2d
        % 7) + 2;
 8002d1e:	2107      	movs	r1, #7
 8002d20:	fbb3 f1f1 	udiv	r1, r3, r1
 8002d24:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002d28:	1a5b      	subs	r3, r3, r1
 8002d2a:	3302      	adds	r3, #2
    pTime_out->date = num_days + 1; 											/**< get the day of the month */
 8002d2c:	7090      	strb	r0, [r2, #2]
    pTime_out->weekDay = ((pTime_out->date + ((153 * (pTime_out->month + 12 * ((14 - pTime_out->month) / 12) - 3) + 2) / 5)
 8002d2e:	71d3      	strb	r3, [r2, #7]
 8002d30:	2000      	movs	r0, #0
//		a_mcp794xx_print_error_msg(pHandle, "convert epoch time to human readable time");
//		return 1;						/**< failed */
//	}

    return 0;							/**< success */
}
 8002d32:	bd70      	pop	{r4, r5, r6, pc}
    else if (num_days>=61) {num_days-=61; pTime_out->month+=2;} 				/**< 61 days mean 2 months */
 8002d34:	2b3c      	cmp	r3, #60	; 0x3c
 8002d36:	d9ad      	bls.n	8002c94 <mcp794xx_convert_epoch_unix_time_stamp+0x9c>
 8002d38:	3b3d      	subs	r3, #61	; 0x3d
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	3102      	adds	r1, #2
 8002d3e:	e7a8      	b.n	8002c92 <mcp794xx_convert_epoch_unix_time_stamp+0x9a>
	return 2;     /**< return failed error */
 8002d40:	2002      	movs	r0, #2
 8002d42:	e7f6      	b.n	8002d32 <mcp794xx_convert_epoch_unix_time_stamp+0x13a>
	return 3;      /**< return failed error */
 8002d44:	2003      	movs	r0, #3
 8002d46:	e7f4      	b.n	8002d32 <mcp794xx_convert_epoch_unix_time_stamp+0x13a>
 8002d48:	00015180 	.word	0x00015180
 8002d4c:	c792bc80 	.word	0xc792bc80

08002d50 <mcp794xx_get_compile_time_date>:
 *             - 2 handle or time is NULL
 *             - 3 handle is not initialized
 * @note       this function returns time in 24Hr format
 */
uint8_t mcp794xx_get_compile_time_date(mcp794xx_handle_t *const pHandle, char *pCompile_time, char *pCompile_date,  mcp794xx_time_t *pTime)
{
 8002d50:	b530      	push	{r4, r5, lr}
 8002d52:	461c      	mov	r4, r3
 8002d54:	b089      	sub	sp, #36	; 0x24
    char year_string[3], month_string[3], date_string[3], /* week_day_string[1],*/ hour_string[3], minute_string[3], second_string[3];
    uint32_t epoch_time;
    uint8_t sec_offset = 15;      /**< this is an offset time to compensate lost seconds during compiling and programming the device,
    									purely depends on how fast your computer does the job */
	
    if(pHandle == NULL)
 8002d56:	4605      	mov	r5, r0
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	f000 80b6 	beq.w	8002eca <mcp794xx_get_compile_time_date+0x17a>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 8002d5e:	7fc3      	ldrb	r3, [r0, #31]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	f040 80b4 	bne.w	8002ece <mcp794xx_get_compile_time_date+0x17e>
        return 3;      /**< return failed error */

    year_string[0] = BUILD_YEAR_CH2(pCompile_date);
 8002d66:	7a53      	ldrb	r3, [r2, #9]
 8002d68:	f88d 3004 	strb.w	r3, [sp, #4]
    year_string[1] = BUILD_YEAR_CH3(pCompile_date);
 8002d6c:	7a93      	ldrb	r3, [r2, #10]
 8002d6e:	f88d 3005 	strb.w	r3, [sp, #5]

    month_string[0] = BUILD_MONTH_CH0(pCompile_date);
 8002d72:	7813      	ldrb	r3, [r2, #0]
 8002d74:	f1a3 004e 	sub.w	r0, r3, #78	; 0x4e
 8002d78:	2801      	cmp	r0, #1
 8002d7a:	d95e      	bls.n	8002e3a <mcp794xx_get_compile_time_date+0xea>
 8002d7c:	2b44      	cmp	r3, #68	; 0x44
 8002d7e:	bf0c      	ite	eq
 8002d80:	2031      	moveq	r0, #49	; 0x31
 8002d82:	2030      	movne	r0, #48	; 0x30
    month_string[1] = BUILD_MONTH_CH1(pCompile_date);
 8002d84:	2b4a      	cmp	r3, #74	; 0x4a
    month_string[0] = BUILD_MONTH_CH0(pCompile_date);
 8002d86:	f88d 0008 	strb.w	r0, [sp, #8]
    month_string[1] = BUILD_MONTH_CH1(pCompile_date);
 8002d8a:	d158      	bne.n	8002e3e <mcp794xx_get_compile_time_date+0xee>
 8002d8c:	7853      	ldrb	r3, [r2, #1]
 8002d8e:	2b61      	cmp	r3, #97	; 0x61
 8002d90:	d167      	bne.n	8002e62 <mcp794xx_get_compile_time_date+0x112>
 8002d92:	7893      	ldrb	r3, [r2, #2]
 8002d94:	2b6e      	cmp	r3, #110	; 0x6e
 8002d96:	bf14      	ite	ne
 8002d98:	233f      	movne	r3, #63	; 0x3f
 8002d9a:	2331      	moveq	r3, #49	; 0x31
 8002d9c:	f88d 3009 	strb.w	r3, [sp, #9]

    date_string[0] = BUILD_DATE_CH0(pCompile_date);
 8002da0:	7913      	ldrb	r3, [r2, #4]
 8002da2:	2b30      	cmp	r3, #48	; 0x30
 8002da4:	bf38      	it	cc
 8002da6:	2330      	movcc	r3, #48	; 0x30
 8002da8:	f88d 300c 	strb.w	r3, [sp, #12]
    date_string[1] = BUILD_DATE_CH1(pCompile_date);
 8002dac:	7953      	ldrb	r3, [r2, #5]
 8002dae:	f88d 300d 	strb.w	r3, [sp, #13]

    hour_string[0] = BUILD_HOUR_CH0(pCompile_time);
 8002db2:	780b      	ldrb	r3, [r1, #0]
 8002db4:	f88d 3010 	strb.w	r3, [sp, #16]
    hour_string[1] = BUILD_HOUR_CH1(pCompile_time);
 8002db8:	784b      	ldrb	r3, [r1, #1]
 8002dba:	f88d 3011 	strb.w	r3, [sp, #17]

    minute_string[0] = BUILD_MIN_CH0(pCompile_time);
 8002dbe:	78cb      	ldrb	r3, [r1, #3]
 8002dc0:	f88d 3014 	strb.w	r3, [sp, #20]
    minute_string[1] = BUILD_MIN_CH1(pCompile_time);
 8002dc4:	790b      	ldrb	r3, [r1, #4]
 8002dc6:	f88d 3015 	strb.w	r3, [sp, #21]

    second_string[0] = BUILD_SEC_CH0(pCompile_time);
 8002dca:	798b      	ldrb	r3, [r1, #6]
 8002dcc:	f88d 3018 	strb.w	r3, [sp, #24]
    second_string[1] = BUILD_SEC_CH1(pCompile_time);

    //week_day_string[0] = BUILD_WEEK_DAY_CH(pCompile_time_date);

    pTime->year = atoi((const char *)year_string);
 8002dd0:	a801      	add	r0, sp, #4
    second_string[1] = BUILD_SEC_CH1(pCompile_time);
 8002dd2:	79cb      	ldrb	r3, [r1, #7]
 8002dd4:	f88d 3019 	strb.w	r3, [sp, #25]
    pTime->year = atoi((const char *)year_string);
 8002dd8:	f002 fb9f 	bl	800551a <atoi>
 8002ddc:	8020      	strh	r0, [r4, #0]
    pTime->month = atoi((const char *) month_string);
 8002dde:	a802      	add	r0, sp, #8
 8002de0:	f002 fb9b 	bl	800551a <atoi>
 8002de4:	71a0      	strb	r0, [r4, #6]
    pTime->date = atoi((const char *) date_string);
 8002de6:	a803      	add	r0, sp, #12
 8002de8:	f002 fb97 	bl	800551a <atoi>
 8002dec:	70a0      	strb	r0, [r4, #2]
    //pTime->weekDay = atoi((const char *) week_day_string);
    pTime->hour = atoi((const char *) hour_string);
 8002dee:	a804      	add	r0, sp, #16
 8002df0:	f002 fb93 	bl	800551a <atoi>
 8002df4:	70e0      	strb	r0, [r4, #3]
    pTime->minute = atoi((const char *) minute_string);
 8002df6:	a805      	add	r0, sp, #20
 8002df8:	f002 fb8f 	bl	800551a <atoi>
 8002dfc:	7120      	strb	r0, [r4, #4]
    pTime->second = atoi((const char *) second_string);
 8002dfe:	a806      	add	r0, sp, #24
 8002e00:	f002 fb8b 	bl	800551a <atoi>
	
	pTime->year = pTime->year + 2000;
 8002e04:	8823      	ldrh	r3, [r4, #0]
    pTime->second = atoi((const char *) second_string);
 8002e06:	7160      	strb	r0, [r4, #5]
	pTime->year = pTime->year + 2000;
 8002e08:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002e0c:	8023      	strh	r3, [r4, #0]
	//pHandle->debug_print("hour:%d \n",pTime->hour);
	//pHandle->debug_print("minute:%d \n",pTime->minute);
	//pHandle->debug_print("sec:%d \n",pTime->second);
	//pHandle->debug_print("weekday:%d \n",pTime->weekDay);

	mcp794xx_read_epoch_unix_time_stamp(pHandle, pTime, (uint32_t *)&epoch_time);
 8002e0e:	aa07      	add	r2, sp, #28
 8002e10:	4621      	mov	r1, r4
 8002e12:	4628      	mov	r0, r5
 8002e14:	f7ff feae 	bl	8002b74 <mcp794xx_read_epoch_unix_time_stamp>
	mcp794xx_convert_epoch_unix_time_stamp(pHandle, epoch_time, pTime);
 8002e18:	9907      	ldr	r1, [sp, #28]
 8002e1a:	4622      	mov	r2, r4
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	f7ff feeb 	bl	8002bf8 <mcp794xx_convert_epoch_unix_time_stamp>
	
	pTime->year = pTime->year - 2000;
 8002e22:	8823      	ldrh	r3, [r4, #0]
 8002e24:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8002e28:	8023      	strh	r3, [r4, #0]

	if(pTime->second < 45){
 8002e2a:	7963      	ldrb	r3, [r4, #5]
 8002e2c:	2b2c      	cmp	r3, #44	; 0x2c
 8002e2e:	d83c      	bhi.n	8002eaa <mcp794xx_get_compile_time_date+0x15a>
		pTime->second += sec_offset;
 8002e30:	330f      	adds	r3, #15
 8002e32:	7163      	strb	r3, [r4, #5]
			pTime->hour += 1;
			pTime->minute = 0;
		}
	}

    return 0;
 8002e34:	2000      	movs	r0, #0
}
 8002e36:	b009      	add	sp, #36	; 0x24
 8002e38:	bd30      	pop	{r4, r5, pc}
    month_string[0] = BUILD_MONTH_CH0(pCompile_date);
 8002e3a:	2031      	movs	r0, #49	; 0x31
 8002e3c:	e7a2      	b.n	8002d84 <mcp794xx_get_compile_time_date+0x34>
    month_string[1] = BUILD_MONTH_CH1(pCompile_date);
 8002e3e:	2b46      	cmp	r3, #70	; 0x46
 8002e40:	d027      	beq.n	8002e92 <mcp794xx_get_compile_time_date+0x142>
 8002e42:	2b4d      	cmp	r3, #77	; 0x4d
 8002e44:	d145      	bne.n	8002ed2 <mcp794xx_get_compile_time_date+0x182>
 8002e46:	7853      	ldrb	r3, [r2, #1]
 8002e48:	2b61      	cmp	r3, #97	; 0x61
 8002e4a:	d124      	bne.n	8002e96 <mcp794xx_get_compile_time_date+0x146>
 8002e4c:	7893      	ldrb	r3, [r2, #2]
 8002e4e:	2b72      	cmp	r3, #114	; 0x72
 8002e50:	d101      	bne.n	8002e56 <mcp794xx_get_compile_time_date+0x106>
 8002e52:	2333      	movs	r3, #51	; 0x33
 8002e54:	e7a2      	b.n	8002d9c <mcp794xx_get_compile_time_date+0x4c>
 8002e56:	2b79      	cmp	r3, #121	; 0x79
 8002e58:	bf08      	it	eq
 8002e5a:	2335      	moveq	r3, #53	; 0x35
 8002e5c:	bf18      	it	ne
 8002e5e:	233f      	movne	r3, #63	; 0x3f
 8002e60:	e79c      	b.n	8002d9c <mcp794xx_get_compile_time_date+0x4c>
 8002e62:	2b75      	cmp	r3, #117	; 0x75
 8002e64:	d117      	bne.n	8002e96 <mcp794xx_get_compile_time_date+0x146>
 8002e66:	7893      	ldrb	r3, [r2, #2]
 8002e68:	2b6e      	cmp	r3, #110	; 0x6e
 8002e6a:	d016      	beq.n	8002e9a <mcp794xx_get_compile_time_date+0x14a>
 8002e6c:	2b6c      	cmp	r3, #108	; 0x6c
 8002e6e:	bf08      	it	eq
 8002e70:	2337      	moveq	r3, #55	; 0x37
 8002e72:	e7f3      	b.n	8002e5c <mcp794xx_get_compile_time_date+0x10c>
 8002e74:	2b75      	cmp	r3, #117	; 0x75
 8002e76:	bf08      	it	eq
 8002e78:	2338      	moveq	r3, #56	; 0x38
 8002e7a:	e7ef      	b.n	8002e5c <mcp794xx_get_compile_time_date+0x10c>
 8002e7c:	2b53      	cmp	r3, #83	; 0x53
 8002e7e:	d00e      	beq.n	8002e9e <mcp794xx_get_compile_time_date+0x14e>
 8002e80:	2b4f      	cmp	r3, #79	; 0x4f
 8002e82:	d00e      	beq.n	8002ea2 <mcp794xx_get_compile_time_date+0x152>
 8002e84:	2b4e      	cmp	r3, #78	; 0x4e
 8002e86:	d00e      	beq.n	8002ea6 <mcp794xx_get_compile_time_date+0x156>
 8002e88:	2b44      	cmp	r3, #68	; 0x44
 8002e8a:	bf14      	ite	ne
 8002e8c:	233f      	movne	r3, #63	; 0x3f
 8002e8e:	2332      	moveq	r3, #50	; 0x32
 8002e90:	e784      	b.n	8002d9c <mcp794xx_get_compile_time_date+0x4c>
 8002e92:	2332      	movs	r3, #50	; 0x32
 8002e94:	e782      	b.n	8002d9c <mcp794xx_get_compile_time_date+0x4c>
 8002e96:	233f      	movs	r3, #63	; 0x3f
 8002e98:	e780      	b.n	8002d9c <mcp794xx_get_compile_time_date+0x4c>
 8002e9a:	2336      	movs	r3, #54	; 0x36
 8002e9c:	e77e      	b.n	8002d9c <mcp794xx_get_compile_time_date+0x4c>
 8002e9e:	2339      	movs	r3, #57	; 0x39
 8002ea0:	e77c      	b.n	8002d9c <mcp794xx_get_compile_time_date+0x4c>
 8002ea2:	2330      	movs	r3, #48	; 0x30
 8002ea4:	e77a      	b.n	8002d9c <mcp794xx_get_compile_time_date+0x4c>
 8002ea6:	2331      	movs	r3, #49	; 0x31
 8002ea8:	e778      	b.n	8002d9c <mcp794xx_get_compile_time_date+0x4c>
		pTime->second = (pTime->second + sec_offset) - 60;
 8002eaa:	3b2d      	subs	r3, #45	; 0x2d
 8002eac:	7163      	strb	r3, [r4, #5]
		if(pTime->minute < 58){
 8002eae:	7923      	ldrb	r3, [r4, #4]
 8002eb0:	2b39      	cmp	r3, #57	; 0x39
			pTime->hour += 1;
 8002eb2:	bf88      	it	hi
 8002eb4:	78e3      	ldrbhi	r3, [r4, #3]
 8002eb6:	f04f 0000 	mov.w	r0, #0
			pTime->minute += 1;
 8002eba:	bf95      	itete	ls
 8002ebc:	3301      	addls	r3, #1
			pTime->hour += 1;
 8002ebe:	3301      	addhi	r3, #1
			pTime->minute += 1;
 8002ec0:	7123      	strbls	r3, [r4, #4]
			pTime->hour += 1;
 8002ec2:	70e3      	strbhi	r3, [r4, #3]
			pTime->minute = 0;
 8002ec4:	bf88      	it	hi
 8002ec6:	7120      	strbhi	r0, [r4, #4]
 8002ec8:	e7b5      	b.n	8002e36 <mcp794xx_get_compile_time_date+0xe6>
        return 2;     /**< return failed error */
 8002eca:	2002      	movs	r0, #2
 8002ecc:	e7b3      	b.n	8002e36 <mcp794xx_get_compile_time_date+0xe6>
        return 3;      /**< return failed error */
 8002ece:	2003      	movs	r0, #3
 8002ed0:	e7b1      	b.n	8002e36 <mcp794xx_get_compile_time_date+0xe6>
    month_string[1] = BUILD_MONTH_CH1(pCompile_date);
 8002ed2:	2b41      	cmp	r3, #65	; 0x41
 8002ed4:	d1d2      	bne.n	8002e7c <mcp794xx_get_compile_time_date+0x12c>
 8002ed6:	7853      	ldrb	r3, [r2, #1]
 8002ed8:	2b70      	cmp	r3, #112	; 0x70
 8002eda:	d1cb      	bne.n	8002e74 <mcp794xx_get_compile_time_date+0x124>
 8002edc:	2334      	movs	r3, #52	; 0x34
 8002ede:	e75d      	b.n	8002d9c <mcp794xx_get_compile_time_date+0x4c>

08002ee0 <mcp794xx_set_countdown_interrupt_enable_status>:
 *            - 2 pHandle is NULL
 *            - 3 pHandle is not initialized
 * @note      This function use ALARM1 and disables ALARM 0
 */
uint8_t mcp794xx_set_countdown_interrupt_enable_status(mcp794xx_handle_t *const pHandle, mcp794xx_bool_t status)
{
 8002ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee2:	460e      	mov	r6, r1
    if(pHandle == NULL)
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	b1c0      	cbz	r0, 8002f1a <mcp794xx_set_countdown_interrupt_enable_status+0x3a>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 8002ee8:	7fc5      	ldrb	r5, [r0, #31]
 8002eea:	2d01      	cmp	r5, #1
 8002eec:	d117      	bne.n	8002f1e <mcp794xx_set_countdown_interrupt_enable_status+0x3e>
        return 3;      /**< return failed error */

	err = mcp794xx_set_alarm_enable_status(pHandle, MCP794XX_ALARM0, MCP794XX_BOOL_FALSE);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	f7ff f897 	bl	8002024 <mcp794xx_set_alarm_enable_status>
 8002ef6:	4f0c      	ldr	r7, [pc, #48]	; (8002f28 <mcp794xx_set_countdown_interrupt_enable_status+0x48>)
 8002ef8:	7038      	strb	r0, [r7, #0]
	if(err != MCP794XX_DRV_OK)
 8002efa:	b128      	cbz	r0, 8002f08 <mcp794xx_set_countdown_interrupt_enable_status+0x28>
	{
		a_mcp794xx_print_error_msg(pHandle, "set countdown interrupt, ALARM 0 not disabled");
 8002efc:	490b      	ldr	r1, [pc, #44]	; (8002f2c <mcp794xx_set_countdown_interrupt_enable_status+0x4c>)
	}

    err = mcp794xx_set_alarm_enable_status(pHandle, MCP794XX_ALARM1, status);
    if(err != MCP794XX_DRV_OK)
    {
        a_mcp794xx_print_error_msg(pHandle, "set countdown interrupt");
 8002efe:	4620      	mov	r0, r4
 8002f00:	f7fe fcfa 	bl	80018f8 <a_mcp794xx_print_error_msg>
        return 1;
    }

    return 0;
}
 8002f04:	4628      	mov	r0, r5
 8002f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    err = mcp794xx_set_alarm_enable_status(pHandle, MCP794XX_ALARM1, status);
 8002f08:	4632      	mov	r2, r6
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	4620      	mov	r0, r4
 8002f0e:	f7ff f889 	bl	8002024 <mcp794xx_set_alarm_enable_status>
 8002f12:	7038      	strb	r0, [r7, #0]
    if(err != MCP794XX_DRV_OK)
 8002f14:	b128      	cbz	r0, 8002f22 <mcp794xx_set_countdown_interrupt_enable_status+0x42>
        a_mcp794xx_print_error_msg(pHandle, "set countdown interrupt");
 8002f16:	4906      	ldr	r1, [pc, #24]	; (8002f30 <mcp794xx_set_countdown_interrupt_enable_status+0x50>)
 8002f18:	e7f1      	b.n	8002efe <mcp794xx_set_countdown_interrupt_enable_status+0x1e>
        return 2;     /**< return failed error */
 8002f1a:	2502      	movs	r5, #2
 8002f1c:	e7f2      	b.n	8002f04 <mcp794xx_set_countdown_interrupt_enable_status+0x24>
        return 3;      /**< return failed error */
 8002f1e:	2503      	movs	r5, #3
 8002f20:	e7f0      	b.n	8002f04 <mcp794xx_set_countdown_interrupt_enable_status+0x24>
    return 0;
 8002f22:	4605      	mov	r5, r0
 8002f24:	e7ee      	b.n	8002f04 <mcp794xx_set_countdown_interrupt_enable_status+0x24>
 8002f26:	bf00      	nop
 8002f28:	200003bc 	.word	0x200003bc
 8002f2c:	08009475 	.word	0x08009475
 8002f30:	080094a3 	.word	0x080094a3

08002f34 <mcp794xx_set_countdown_interrupt_time>:
 *            - "mcp794xx_set_countdown_interrupt_enable_status"  must be called before using this function
 *            - Time and date must be set prior to calling this function
 *            - day of the week must be accurate when setting time
 */
uint8_t mcp794xx_set_countdown_interrupt_time(mcp794xx_handle_t *const pHandle, uint16_t u16Time_value, mcp794xx_countdwon_time_unit_t time_unit)
{
 8002f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f36:	460e      	mov	r6, r1
 8002f38:	b085      	sub	sp, #20
 8002f3a:	4617      	mov	r7, r2
	mcp794xx_time_t pTime;

    uint32_t countdown_time_in_seconds;
    uint32_t epoch_time;

    if(pHandle == NULL)
 8002f3c:	4604      	mov	r4, r0
 8002f3e:	2800      	cmp	r0, #0
 8002f40:	d03f      	beq.n	8002fc2 <mcp794xx_set_countdown_interrupt_time+0x8e>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 8002f42:	7fc1      	ldrb	r1, [r0, #31]
 8002f44:	2901      	cmp	r1, #1
 8002f46:	d13e      	bne.n	8002fc6 <mcp794xx_set_countdown_interrupt_time+0x92>
        return 3;      /**< return failed error */

    if((time_unit != MCP794XX_CNTDWN_SECONDS) && (time_unit != MCP794XX_CNTDWN_MINUTES) && (time_unit != MCP794XX_CNTDWN_HOURS))
 8002f48:	2a02      	cmp	r2, #2
 8002f4a:	d905      	bls.n	8002f58 <mcp794xx_set_countdown_interrupt_time+0x24>
    {
        a_mcp794xx_print_error_msg(pHandle, "countdown interrupt, invalid time unit");
 8002f4c:	491f      	ldr	r1, [pc, #124]	; (8002fcc <mcp794xx_set_countdown_interrupt_time+0x98>)
 8002f4e:	f7fe fcd3 	bl	80018f8 <a_mcp794xx_print_error_msg>
        return 4;
 8002f52:	2004      	movs	r0, #4
    {
        return err;
    }

    return 0;
}
 8002f54:	b005      	add	sp, #20
 8002f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mcp794xx_clr_alarm_interrupt_flag(pHandle, MCP794XX_ALARM1);						/**< clear alarm flag */
 8002f58:	f7ff fc38 	bl	80027cc <mcp794xx_clr_alarm_interrupt_flag>
	err = mcp794xx_get_time_and_date(pHandle, &pTime);										/**< get current time and date */
 8002f5c:	a901      	add	r1, sp, #4
 8002f5e:	4620      	mov	r0, r4
 8002f60:	f7fe fd40 	bl	80019e4 <mcp794xx_get_time_and_date>
 8002f64:	4d1a      	ldr	r5, [pc, #104]	; (8002fd0 <mcp794xx_set_countdown_interrupt_time+0x9c>)
 8002f66:	7028      	strb	r0, [r5, #0]
	if(err)
 8002f68:	b128      	cbz	r0, 8002f76 <mcp794xx_set_countdown_interrupt_time+0x42>
		a_mcp794xx_print_error_msg(pHandle, "read current time and date");
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	4919      	ldr	r1, [pc, #100]	; (8002fd4 <mcp794xx_set_countdown_interrupt_time+0xa0>)
 8002f6e:	f7fe fcc3 	bl	80018f8 <a_mcp794xx_print_error_msg>
		return err;
 8002f72:	7828      	ldrb	r0, [r5, #0]
 8002f74:	e7ee      	b.n	8002f54 <mcp794xx_set_countdown_interrupt_time+0x20>
    err = mcp794xx_read_epoch_unix_time_stamp(pHandle, &pTime, (uint32_t *)&epoch_time);
 8002f76:	466a      	mov	r2, sp
 8002f78:	a901      	add	r1, sp, #4
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	f7ff fdfa 	bl	8002b74 <mcp794xx_read_epoch_unix_time_stamp>
 8002f80:	7028      	strb	r0, [r5, #0]
    if(err)
 8002f82:	2800      	cmp	r0, #0
 8002f84:	d1e6      	bne.n	8002f54 <mcp794xx_set_countdown_interrupt_time+0x20>
    switch(time_unit)
 8002f86:	2f01      	cmp	r7, #1
                epoch_time += countdown_time_in_seconds;
 8002f88:	9b00      	ldr	r3, [sp, #0]
    switch(time_unit)
 8002f8a:	d013      	beq.n	8002fb4 <mcp794xx_set_countdown_interrupt_time+0x80>
 8002f8c:	2f02      	cmp	r7, #2
 8002f8e:	d015      	beq.n	8002fbc <mcp794xx_set_countdown_interrupt_time+0x88>
                epoch_time += countdown_time_in_seconds;
 8002f90:	4433      	add	r3, r6
                 epoch_time += countdown_time_in_seconds;
 8002f92:	9300      	str	r3, [sp, #0]
    err = mcp794xx_convert_epoch_unix_time_stamp(pHandle, epoch_time, &pTime);
 8002f94:	9900      	ldr	r1, [sp, #0]
 8002f96:	aa01      	add	r2, sp, #4
 8002f98:	4620      	mov	r0, r4
 8002f9a:	f7ff fe2d 	bl	8002bf8 <mcp794xx_convert_epoch_unix_time_stamp>
 8002f9e:	7028      	strb	r0, [r5, #0]
    if(err != MCP794XX_DRV_OK)
 8002fa0:	2800      	cmp	r0, #0
 8002fa2:	d1d7      	bne.n	8002f54 <mcp794xx_set_countdown_interrupt_time+0x20>
    err = mcp794xx_set_alarm(pHandle, MCP794XX_ALARM1, MCP794XX_MASK_S_M_H_WD_D_M, &pTime);
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	2207      	movs	r2, #7
 8002faa:	4620      	mov	r0, r4
 8002fac:	f7ff fa90 	bl	80024d0 <mcp794xx_set_alarm>
 8002fb0:	7028      	strb	r0, [r5, #0]
    if(err != MCP794XX_DRV_OK)
 8002fb2:	e7cf      	b.n	8002f54 <mcp794xx_set_countdown_interrupt_time+0x20>
                 epoch_time += countdown_time_in_seconds;
 8002fb4:	213c      	movs	r1, #60	; 0x3c
                 epoch_time += countdown_time_in_seconds;
 8002fb6:	fb01 3306 	mla	r3, r1, r6, r3
 8002fba:	e7ea      	b.n	8002f92 <mcp794xx_set_countdown_interrupt_time+0x5e>
 8002fbc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002fc0:	e7f9      	b.n	8002fb6 <mcp794xx_set_countdown_interrupt_time+0x82>
        return 2;     /**< return failed error */
 8002fc2:	2002      	movs	r0, #2
 8002fc4:	e7c6      	b.n	8002f54 <mcp794xx_set_countdown_interrupt_time+0x20>
        return 3;      /**< return failed error */
 8002fc6:	2003      	movs	r0, #3
 8002fc8:	e7c4      	b.n	8002f54 <mcp794xx_set_countdown_interrupt_time+0x20>
 8002fca:	bf00      	nop
 8002fcc:	080094bb 	.word	0x080094bb
 8002fd0:	200003bc 	.word	0x200003bc
 8002fd4:	080094e2 	.word	0x080094e2

08002fd8 <mcp794xx_uid_read>:
 *            - 2 pHandle is NULL
 *            - 3 pHandle is not initialized
 * @note      none
 */
uint8_t mcp794xx_uid_read(mcp794xx_handle_t *const pHandle, uint8_t *pUID)
{
 8002fd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002fda:	460e      	mov	r6, r1
    uint8_t temp_buffer[UID_MAX_LENGTH];

    if(pHandle == NULL)
 8002fdc:	4604      	mov	r4, r0
 8002fde:	2800      	cmp	r0, #0
 8002fe0:	d03a      	beq.n	8003058 <mcp794xx_uid_read+0x80>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 8002fe2:	7fc5      	ldrb	r5, [r0, #31]
 8002fe4:	2d01      	cmp	r5, #1
 8002fe6:	d139      	bne.n	800305c <mcp794xx_uid_read+0x84>
        return 3;      /**< return failed error */

    memset(temp_buffer, 0x00, sizeof(temp_buffer));                 /**< clear buffer before read */
 8002fe8:	2300      	movs	r3, #0
 8002fea:	e9cd 3300 	strd	r3, r3, [sp]

    switch(pHandle->device_variant)
 8002fee:	7f83      	ldrb	r3, [r0, #30]
 8002ff0:	2b07      	cmp	r3, #7
 8002ff2:	d81b      	bhi.n	800302c <mcp794xx_uid_read+0x54>
 8002ff4:	e8df f003 	tbb	[pc, r3]
 8002ff8:	2a1c0b04 	.word	0x2a1c0b04
 8002ffc:	1c0b2e2c 	.word	0x1c0b2e2c
    {
        case MCP79400_VARIANT:
        {
            a_mcp794xx_print_error_msg(pHandle, "failed to read UID, unsupported cmd for mcp79400 variant");
 8003000:	4917      	ldr	r1, [pc, #92]	; (8003060 <mcp794xx_uid_read+0x88>)
            break;
        }

        case MCP79410_VARIANT:
        {
            a_mcp794xx_print_error_msg(pHandle, "failed to read UID, unsupported cmd for mcp79410 variant");
 8003002:	4620      	mov	r0, r4
 8003004:	f7fe fc78 	bl	80018f8 <a_mcp794xx_print_error_msg>
        }

    }

    return 0;              /**< success */
}
 8003008:	4628      	mov	r0, r5
 800300a:	b002      	add	sp, #8
 800300c:	bd70      	pop	{r4, r5, r6, pc}
            err = eeprom_mcp794xx_i2c_read(pHandle, EEPROM_UID_ADDRESS + 2, (uint8_t *)temp_buffer, UID_MAX_LENGTH - 2);
 800300e:	466a      	mov	r2, sp
 8003010:	2306      	movs	r3, #6
 8003012:	21f2      	movs	r1, #242	; 0xf2
 8003014:	f7fe fc35 	bl	8001882 <eeprom_mcp794xx_i2c_read>
 8003018:	4a12      	ldr	r2, [pc, #72]	; (8003064 <mcp794xx_uid_read+0x8c>)
 800301a:	7010      	strb	r0, [r2, #0]
            if(err)
 800301c:	b108      	cbz	r0, 8003022 <mcp794xx_uid_read+0x4a>
                a_mcp794xx_print_error_msg(pHandle, "failed to read UID");
 800301e:	4912      	ldr	r1, [pc, #72]	; (8003068 <mcp794xx_uid_read+0x90>)
 8003020:	e7ef      	b.n	8003002 <mcp794xx_uid_read+0x2a>
            memcpy((uint8_t *)pUID, (uint8_t *)temp_buffer, sizeof(temp_buffer) - 2);
 8003022:	9800      	ldr	r0, [sp, #0]
 8003024:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8003028:	6030      	str	r0, [r6, #0]
 800302a:	80b2      	strh	r2, [r6, #4]
    switch(pHandle->device_variant)
 800302c:	2500      	movs	r5, #0
 800302e:	e7eb      	b.n	8003008 <mcp794xx_uid_read+0x30>
            err = eeprom_mcp794xx_i2c_read(pHandle, EEPROM_UID_ADDRESS, (uint8_t *)temp_buffer, UID_MAX_LENGTH);
 8003030:	2308      	movs	r3, #8
 8003032:	466a      	mov	r2, sp
 8003034:	21f0      	movs	r1, #240	; 0xf0
 8003036:	f7fe fc24 	bl	8001882 <eeprom_mcp794xx_i2c_read>
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <mcp794xx_uid_read+0x8c>)
 800303c:	7018      	strb	r0, [r3, #0]
            if(err)
 800303e:	2800      	cmp	r0, #0
 8003040:	d1ed      	bne.n	800301e <mcp794xx_uid_read+0x46>
            memcpy((uint8_t *)pUID, (uint8_t *)temp_buffer, sizeof(temp_buffer));
 8003042:	466b      	mov	r3, sp
 8003044:	cb03      	ldmia	r3!, {r0, r1}
 8003046:	6030      	str	r0, [r6, #0]
 8003048:	6071      	str	r1, [r6, #4]
            break;
 800304a:	e7ef      	b.n	800302c <mcp794xx_uid_read+0x54>
            a_mcp794xx_print_error_msg(pHandle, "failed to read UID, unsupported cmd for mcp7940m variant");
 800304c:	4907      	ldr	r1, [pc, #28]	; (800306c <mcp794xx_uid_read+0x94>)
 800304e:	e7d8      	b.n	8003002 <mcp794xx_uid_read+0x2a>
            a_mcp794xx_print_error_msg(pHandle, "failed to read UID, unsupported cmd for mcp7940n variant");
 8003050:	4907      	ldr	r1, [pc, #28]	; (8003070 <mcp794xx_uid_read+0x98>)
 8003052:	e7d6      	b.n	8003002 <mcp794xx_uid_read+0x2a>
            a_mcp794xx_print_error_msg(pHandle, "failed to read UID, unsupported cmd for mcp79410 variant");
 8003054:	4907      	ldr	r1, [pc, #28]	; (8003074 <mcp794xx_uid_read+0x9c>)
 8003056:	e7d4      	b.n	8003002 <mcp794xx_uid_read+0x2a>
        return 2;     /**< return failed error */
 8003058:	2502      	movs	r5, #2
 800305a:	e7d5      	b.n	8003008 <mcp794xx_uid_read+0x30>
        return 3;      /**< return failed error */
 800305c:	2503      	movs	r5, #3
 800305e:	e7d3      	b.n	8003008 <mcp794xx_uid_read+0x30>
 8003060:	080094fd 	.word	0x080094fd
 8003064:	200003bc 	.word	0x200003bc
 8003068:	08009536 	.word	0x08009536
 800306c:	08009549 	.word	0x08009549
 8003070:	08009582 	.word	0x08009582
 8003074:	080095bb 	.word	0x080095bb

08003078 <mcp794xx_sram_write_byte>:
*          - 3 pHandle is not initialized
*          - 4 invalid address
* @note none
*/
uint8_t mcp794xx_sram_write_byte(mcp794xx_handle_t *const pHandle, uint8_t addr, uint8_t *pBuffer, size_t length)
{
 8003078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307a:	460d      	mov	r5, r1

    if(pHandle == NULL)
 800307c:	4604      	mov	r4, r0
 800307e:	b330      	cbz	r0, 80030ce <mcp794xx_sram_write_byte+0x56>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 8003080:	7fc7      	ldrb	r7, [r0, #31]
 8003082:	2f01      	cmp	r7, #1
 8003084:	d125      	bne.n	80030d2 <mcp794xx_sram_write_byte+0x5a>
        return 3;      /**< return failed error */

    if(addr > SRAM_LAST_ADDRESS || addr < SRAM_FIRST_ADDRESS)
 8003086:	f1a1 0620 	sub.w	r6, r1, #32
 800308a:	2e3f      	cmp	r6, #63	; 0x3f
 800308c:	d904      	bls.n	8003098 <mcp794xx_sram_write_byte+0x20>
    {
    	a_mcp794xx_print_error_msg(pHandle, "write sram, invalid address");
 800308e:	4912      	ldr	r1, [pc, #72]	; (80030d8 <mcp794xx_sram_write_byte+0x60>)
 8003090:	f7fe fc32 	bl	80018f8 <a_mcp794xx_print_error_msg>
    	return 4;
 8003094:	2004      	movs	r0, #4
    {
       a_mcp794xx_print_error_msg(pHandle, "write to sram");
       return 1;
    }
	return 0;          /**< success */
}
 8003096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }if(length > SRAM_MEMORY_SIZE){
 8003098:	2b40      	cmp	r3, #64	; 0x40
 800309a:	d904      	bls.n	80030a6 <mcp794xx_sram_write_byte+0x2e>
    	a_mcp794xx_print_error_msg(pHandle, "write sram, address can't be greater than 0x5F");
 800309c:	490f      	ldr	r1, [pc, #60]	; (80030dc <mcp794xx_sram_write_byte+0x64>)
    	a_mcp794xx_print_error_msg(pHandle, "write sram, address out of range");
 800309e:	f7fe fc2b 	bl	80018f8 <a_mcp794xx_print_error_msg>
    	return 5;
 80030a2:	2005      	movs	r0, #5
 80030a4:	e7f7      	b.n	8003096 <mcp794xx_sram_write_byte+0x1e>
    }if((addr - SRAM_FIRST_ADDRESS)+ length > SRAM_MEMORY_SIZE){
 80030a6:	f1a3 0620 	sub.w	r6, r3, #32
 80030aa:	4435      	add	r5, r6
 80030ac:	2d40      	cmp	r5, #64	; 0x40
 80030ae:	d901      	bls.n	80030b4 <mcp794xx_sram_write_byte+0x3c>
    	a_mcp794xx_print_error_msg(pHandle, "write sram, address out of range");
 80030b0:	490b      	ldr	r1, [pc, #44]	; (80030e0 <mcp794xx_sram_write_byte+0x68>)
 80030b2:	e7f4      	b.n	800309e <mcp794xx_sram_write_byte+0x26>
    err = sram_mcp794xx_i2c_write(pHandle, addr, (uint8_t *)pBuffer, length);
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	f7fe fbfd 	bl	80018b4 <sram_mcp794xx_i2c_write>
 80030ba:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <mcp794xx_sram_write_byte+0x6c>)
 80030bc:	7018      	strb	r0, [r3, #0]
    if(err)
 80030be:	2800      	cmp	r0, #0
 80030c0:	d0e9      	beq.n	8003096 <mcp794xx_sram_write_byte+0x1e>
       a_mcp794xx_print_error_msg(pHandle, "write to sram");
 80030c2:	4620      	mov	r0, r4
 80030c4:	4908      	ldr	r1, [pc, #32]	; (80030e8 <mcp794xx_sram_write_byte+0x70>)
 80030c6:	f7fe fc17 	bl	80018f8 <a_mcp794xx_print_error_msg>
       return 1;
 80030ca:	4638      	mov	r0, r7
 80030cc:	e7e3      	b.n	8003096 <mcp794xx_sram_write_byte+0x1e>
        return 2;     /**< return failed error */
 80030ce:	2002      	movs	r0, #2
 80030d0:	e7e1      	b.n	8003096 <mcp794xx_sram_write_byte+0x1e>
        return 3;      /**< return failed error */
 80030d2:	2003      	movs	r0, #3
 80030d4:	e7df      	b.n	8003096 <mcp794xx_sram_write_byte+0x1e>
 80030d6:	bf00      	nop
 80030d8:	080095f4 	.word	0x080095f4
 80030dc:	08009610 	.word	0x08009610
 80030e0:	0800963f 	.word	0x0800963f
 80030e4:	200003bc 	.word	0x200003bc
 80030e8:	08009660 	.word	0x08009660

080030ec <mcp794xx_sram_read_byte>:
*          - 3 pHandle is not initialized
*          - 4 invalid address
* @note none
*/
uint8_t mcp794xx_sram_read_byte(mcp794xx_handle_t *const pHandle, uint8_t addr, uint8_t *pBuffer, size_t length)
{
 80030ec:	b570      	push	{r4, r5, r6, lr}

    if(pHandle == NULL)
 80030ee:	4604      	mov	r4, r0
 80030f0:	b330      	cbz	r0, 8003140 <mcp794xx_sram_read_byte+0x54>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 80030f2:	7fc6      	ldrb	r6, [r0, #31]
 80030f4:	2e01      	cmp	r6, #1
 80030f6:	d125      	bne.n	8003144 <mcp794xx_sram_read_byte+0x58>
        return 3;      /**< return failed error */

    if(addr > SRAM_LAST_ADDRESS || addr < SRAM_FIRST_ADDRESS)
 80030f8:	f1a1 0520 	sub.w	r5, r1, #32
 80030fc:	2d3f      	cmp	r5, #63	; 0x3f
 80030fe:	d904      	bls.n	800310a <mcp794xx_sram_read_byte+0x1e>
    {
    	a_mcp794xx_print_error_msg(pHandle, "read sram, invalid address");
 8003100:	4911      	ldr	r1, [pc, #68]	; (8003148 <mcp794xx_sram_read_byte+0x5c>)
 8003102:	f7fe fbf9 	bl	80018f8 <a_mcp794xx_print_error_msg>
    	return 4;
 8003106:	2004      	movs	r0, #4
       a_mcp794xx_print_error_msg(pHandle, "read sram");
       return 1;
    }

 return 0;          /**< success */
}
 8003108:	bd70      	pop	{r4, r5, r6, pc}
    }if(length > SRAM_MEMORY_SIZE){
 800310a:	2b40      	cmp	r3, #64	; 0x40
 800310c:	d904      	bls.n	8003118 <mcp794xx_sram_read_byte+0x2c>
    	a_mcp794xx_print_error_msg(pHandle, "read sram, address can't be greater than 0x5F");
 800310e:	490f      	ldr	r1, [pc, #60]	; (800314c <mcp794xx_sram_read_byte+0x60>)
    	a_mcp794xx_print_error_msg(pHandle, "read sram, address out of range");
 8003110:	f7fe fbf2 	bl	80018f8 <a_mcp794xx_print_error_msg>
    	return 5;
 8003114:	2005      	movs	r0, #5
 8003116:	e7f7      	b.n	8003108 <mcp794xx_sram_read_byte+0x1c>
    }if((addr - SRAM_FIRST_ADDRESS)+ length > SRAM_MEMORY_SIZE){
 8003118:	f1a3 0520 	sub.w	r5, r3, #32
 800311c:	440d      	add	r5, r1
 800311e:	2d40      	cmp	r5, #64	; 0x40
 8003120:	d901      	bls.n	8003126 <mcp794xx_sram_read_byte+0x3a>
    	a_mcp794xx_print_error_msg(pHandle, "read sram, address out of range");
 8003122:	490b      	ldr	r1, [pc, #44]	; (8003150 <mcp794xx_sram_read_byte+0x64>)
 8003124:	e7f4      	b.n	8003110 <mcp794xx_sram_read_byte+0x24>
    err = rtc_mcp794xx_i2c_read(pHandle, addr, (uint8_t *)pBuffer, length);
 8003126:	b2db      	uxtb	r3, r3
 8003128:	f7fe fb76 	bl	8001818 <rtc_mcp794xx_i2c_read>
 800312c:	4b09      	ldr	r3, [pc, #36]	; (8003154 <mcp794xx_sram_read_byte+0x68>)
 800312e:	7018      	strb	r0, [r3, #0]
    if(err)
 8003130:	2800      	cmp	r0, #0
 8003132:	d0e9      	beq.n	8003108 <mcp794xx_sram_read_byte+0x1c>
       a_mcp794xx_print_error_msg(pHandle, "read sram");
 8003134:	4620      	mov	r0, r4
 8003136:	4908      	ldr	r1, [pc, #32]	; (8003158 <mcp794xx_sram_read_byte+0x6c>)
 8003138:	f7fe fbde 	bl	80018f8 <a_mcp794xx_print_error_msg>
       return 1;
 800313c:	4630      	mov	r0, r6
 800313e:	e7e3      	b.n	8003108 <mcp794xx_sram_read_byte+0x1c>
        return 2;     /**< return failed error */
 8003140:	2002      	movs	r0, #2
 8003142:	e7e1      	b.n	8003108 <mcp794xx_sram_read_byte+0x1c>
        return 3;      /**< return failed error */
 8003144:	2003      	movs	r0, #3
 8003146:	e7df      	b.n	8003108 <mcp794xx_sram_read_byte+0x1c>
 8003148:	0800966e 	.word	0x0800966e
 800314c:	08009689 	.word	0x08009689
 8003150:	080096b7 	.word	0x080096b7
 8003154:	200003bc 	.word	0x200003bc
 8003158:	080096d7 	.word	0x080096d7

0800315c <mcp794xx_sram_erase_selector>:
*          - 3 pHandle is not initialized
*          - 4 invalid address
* @note data from the start to the end address will be erased
*/
uint8_t mcp794xx_sram_erase_selector(mcp794xx_handle_t *const pHandle, uint8_t start_addr, uint8_t end_addr)
{
 800315c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	int index;
	uint8_t dummy_dada = 0x00;
 8003160:	2300      	movs	r3, #0
{
 8003162:	4617      	mov	r7, r2
	uint8_t dummy_dada = 0x00;
 8003164:	f88d 3007 	strb.w	r3, [sp, #7]

    if(pHandle == NULL)
 8003168:	4605      	mov	r5, r0
 800316a:	b358      	cbz	r0, 80031c4 <mcp794xx_sram_erase_selector+0x68>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 800316c:	7fc6      	ldrb	r6, [r0, #31]
 800316e:	2e01      	cmp	r6, #1
 8003170:	d12a      	bne.n	80031c8 <mcp794xx_sram_erase_selector+0x6c>
        return 3;      /**< return failed error */

    if(start_addr > SRAM_LAST_ADDRESS || start_addr < SRAM_FIRST_ADDRESS)
 8003172:	f1a1 0320 	sub.w	r3, r1, #32
 8003176:	2b3f      	cmp	r3, #63	; 0x3f
 8003178:	d908      	bls.n	800318c <mcp794xx_sram_erase_selector+0x30>
    {
    	a_mcp794xx_print_error_msg(pHandle, "erase sram sector, invalid address (0x20 - 0x57)");
 800317a:	4914      	ldr	r1, [pc, #80]	; (80031cc <mcp794xx_sram_erase_selector+0x70>)
 800317c:	4628      	mov	r0, r5
 800317e:	f7fe fbbb 	bl	80018f8 <a_mcp794xx_print_error_msg>
    	return 4;
 8003182:	2604      	movs	r6, #4
		   return 1;
		}
    }

	return 0;   /**< success */
}
 8003184:	4630      	mov	r0, r6
 8003186:	b002      	add	sp, #8
 8003188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }if(end_addr > SRAM_LAST_ADDRESS || end_addr < SRAM_FIRST_ADDRESS){
 800318c:	f1a2 0320 	sub.w	r3, r2, #32
 8003190:	2b3f      	cmp	r3, #63	; 0x3f
 8003192:	d8f2      	bhi.n	800317a <mcp794xx_sram_erase_selector+0x1e>
		err = sram_mcp794xx_i2c_write(pHandle, index, (uint8_t *)&dummy_dada, 1);
 8003194:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80031d4 <mcp794xx_sram_erase_selector+0x78>
    for(index = start_addr; index <= end_addr; index++)
 8003198:	460c      	mov	r4, r1
 800319a:	42a7      	cmp	r7, r4
 800319c:	da01      	bge.n	80031a2 <mcp794xx_sram_erase_selector+0x46>
	return 0;   /**< success */
 800319e:	2600      	movs	r6, #0
 80031a0:	e7f0      	b.n	8003184 <mcp794xx_sram_erase_selector+0x28>
		err = sram_mcp794xx_i2c_write(pHandle, index, (uint8_t *)&dummy_dada, 1);
 80031a2:	2301      	movs	r3, #1
 80031a4:	f10d 0207 	add.w	r2, sp, #7
 80031a8:	b2e1      	uxtb	r1, r4
 80031aa:	4628      	mov	r0, r5
 80031ac:	f7fe fb82 	bl	80018b4 <sram_mcp794xx_i2c_write>
 80031b0:	f888 0000 	strb.w	r0, [r8]
		if(err)
 80031b4:	b120      	cbz	r0, 80031c0 <mcp794xx_sram_erase_selector+0x64>
		   a_mcp794xx_print_error_msg(pHandle, "erase sram sector");
 80031b6:	4906      	ldr	r1, [pc, #24]	; (80031d0 <mcp794xx_sram_erase_selector+0x74>)
 80031b8:	4628      	mov	r0, r5
 80031ba:	f7fe fb9d 	bl	80018f8 <a_mcp794xx_print_error_msg>
		   return 1;
 80031be:	e7e1      	b.n	8003184 <mcp794xx_sram_erase_selector+0x28>
    for(index = start_addr; index <= end_addr; index++)
 80031c0:	3401      	adds	r4, #1
 80031c2:	e7ea      	b.n	800319a <mcp794xx_sram_erase_selector+0x3e>
        return 2;     /**< return failed error */
 80031c4:	2602      	movs	r6, #2
 80031c6:	e7dd      	b.n	8003184 <mcp794xx_sram_erase_selector+0x28>
        return 3;      /**< return failed error */
 80031c8:	2603      	movs	r6, #3
 80031ca:	e7db      	b.n	8003184 <mcp794xx_sram_erase_selector+0x28>
 80031cc:	080096e1 	.word	0x080096e1
 80031d0:	08009712 	.word	0x08009712
 80031d4:	200003bc 	.word	0x200003bc

080031d8 <mcp794xx_wipe_sram>:
*          - 2 pHandle is NULL
*          - 3 pHandle is not initialized
* @note none
*/
uint8_t mcp794xx_wipe_sram(mcp794xx_handle_t *const pHandle)
{
 80031d8:	b530      	push	{r4, r5, lr}
 80031da:	b091      	sub	sp, #68	; 0x44
 80031dc:	4604      	mov	r4, r0
    uint8_t temp_buffer[SRAM_MEMORY_SIZE];

    memset(temp_buffer, 0x00, sizeof(temp_buffer));
 80031de:	2240      	movs	r2, #64	; 0x40
 80031e0:	2100      	movs	r1, #0
 80031e2:	4668      	mov	r0, sp
 80031e4:	f002 f9ee 	bl	80055c4 <memset>

    if(pHandle == NULL)
 80031e8:	b194      	cbz	r4, 8003210 <mcp794xx_wipe_sram+0x38>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 80031ea:	7fe5      	ldrb	r5, [r4, #31]
 80031ec:	2d01      	cmp	r5, #1
 80031ee:	d111      	bne.n	8003214 <mcp794xx_wipe_sram+0x3c>
        return 3;      /**< return failed error */

    err = sram_mcp794xx_i2c_write(pHandle, SRAM_FIRST_ADDRESS, (uint8_t *)temp_buffer, SRAM_MEMORY_SIZE);
 80031f0:	2340      	movs	r3, #64	; 0x40
 80031f2:	466a      	mov	r2, sp
 80031f4:	2120      	movs	r1, #32
 80031f6:	4620      	mov	r0, r4
 80031f8:	f7fe fb5c 	bl	80018b4 <sram_mcp794xx_i2c_write>
 80031fc:	4b06      	ldr	r3, [pc, #24]	; (8003218 <mcp794xx_wipe_sram+0x40>)
 80031fe:	7018      	strb	r0, [r3, #0]
	if(err)
 8003200:	b120      	cbz	r0, 800320c <mcp794xx_wipe_sram+0x34>
	{
	   a_mcp794xx_print_error_msg(pHandle, "wipe sram");
 8003202:	4620      	mov	r0, r4
 8003204:	4905      	ldr	r1, [pc, #20]	; (800321c <mcp794xx_wipe_sram+0x44>)
 8003206:	f7fe fb77 	bl	80018f8 <a_mcp794xx_print_error_msg>
	   return 1;
 800320a:	4628      	mov	r0, r5
	}

	return 0;    /**< success */
}
 800320c:	b011      	add	sp, #68	; 0x44
 800320e:	bd30      	pop	{r4, r5, pc}
        return 2;     /**< return failed error */
 8003210:	2002      	movs	r0, #2
 8003212:	e7fb      	b.n	800320c <mcp794xx_wipe_sram+0x34>
        return 3;      /**< return failed error */
 8003214:	2003      	movs	r0, #3
 8003216:	e7f9      	b.n	800320c <mcp794xx_wipe_sram+0x34>
 8003218:	200003bc 	.word	0x200003bc
 800321c:	08009724 	.word	0x08009724

08003220 <mcp794xx_eeprom_read_byte>:
 *            - 4 invalid address
 *            - 5 invalid device variant
 * @note      none
 */
uint8_t mcp794xx_eeprom_read_byte(mcp794xx_handle_t *const pHandle, uint8_t u8Addr, uint8_t *pBuf, uint8_t length)
{
 8003220:	b570      	push	{r4, r5, r6, lr}
 8003222:	461d      	mov	r5, r3

    if(pHandle == NULL)
 8003224:	4604      	mov	r4, r0
 8003226:	b330      	cbz	r0, 8003276 <mcp794xx_eeprom_read_byte+0x56>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 8003228:	7fc6      	ldrb	r6, [r0, #31]
 800322a:	2e01      	cmp	r6, #1
 800322c:	d125      	bne.n	800327a <mcp794xx_eeprom_read_byte+0x5a>
        return 3;      /**< return failed error */

    if(u8Addr < EEPROM_LOWEST_ADDRESS || u8Addr > EEPROM_HIGHEST_ADDRESS){
 800322e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003232:	d004      	beq.n	800323e <mcp794xx_eeprom_read_byte+0x1e>
    	a_mcp794xx_print_error_msg(pHandle, "to read eeprom, invalid address");
 8003234:	4912      	ldr	r1, [pc, #72]	; (8003280 <mcp794xx_eeprom_read_byte+0x60>)
    	return 4;
    }if((u8Addr + length) > EEPROM_MEMORY_SIZE)
    {
    	a_mcp794xx_print_error_msg(pHandle, "to read eeprom, address out of range");
 8003236:	f7fe fb5f 	bl	80018f8 <a_mcp794xx_print_error_msg>
    	return 4;
 800323a:	2004      	movs	r0, #4
    	a_mcp794xx_print_error_msg(pHandle, "read eeprom");
        return 1;           /**< failed error */
    }

    return 0;              /**< success */
}
 800323c:	bd70      	pop	{r4, r5, r6, pc}
    }if((u8Addr + length) > EEPROM_MEMORY_SIZE)
 800323e:	440d      	add	r5, r1
 8003240:	2d80      	cmp	r5, #128	; 0x80
 8003242:	dd01      	ble.n	8003248 <mcp794xx_eeprom_read_byte+0x28>
    	a_mcp794xx_print_error_msg(pHandle, "to read eeprom, address out of range");
 8003244:	490f      	ldr	r1, [pc, #60]	; (8003284 <mcp794xx_eeprom_read_byte+0x64>)
 8003246:	e7f6      	b.n	8003236 <mcp794xx_eeprom_read_byte+0x16>
    if(pHandle->device_variant == MCP79400_VARIANT || pHandle->device_variant == MCP7940M_VARIANT || pHandle->device_variant == MCP7940N_VARIANT || pHandle->device_variant == MCP79410_VARIANT){
 8003248:	7f85      	ldrb	r5, [r0, #30]
 800324a:	b115      	cbz	r5, 8003252 <mcp794xx_eeprom_read_byte+0x32>
 800324c:	3d03      	subs	r5, #3
 800324e:	2d02      	cmp	r5, #2
 8003250:	d805      	bhi.n	800325e <mcp794xx_eeprom_read_byte+0x3e>
 	   a_mcp794xx_print_error_msg(pHandle, "invalid device variant, the device does have a eeprom built-in");
 8003252:	4620      	mov	r0, r4
 8003254:	490c      	ldr	r1, [pc, #48]	; (8003288 <mcp794xx_eeprom_read_byte+0x68>)
 8003256:	f7fe fb4f 	bl	80018f8 <a_mcp794xx_print_error_msg>
 	   return 5;
 800325a:	2005      	movs	r0, #5
 800325c:	e7ee      	b.n	800323c <mcp794xx_eeprom_read_byte+0x1c>
    err = eeprom_mcp794xx_i2c_read(pHandle, u8Addr, (uint8_t *)pBuf, length);
 800325e:	f7fe fb10 	bl	8001882 <eeprom_mcp794xx_i2c_read>
 8003262:	4b0a      	ldr	r3, [pc, #40]	; (800328c <mcp794xx_eeprom_read_byte+0x6c>)
 8003264:	7018      	strb	r0, [r3, #0]
    if(err)
 8003266:	2800      	cmp	r0, #0
 8003268:	d0e8      	beq.n	800323c <mcp794xx_eeprom_read_byte+0x1c>
    	a_mcp794xx_print_error_msg(pHandle, "read eeprom");
 800326a:	4620      	mov	r0, r4
 800326c:	4908      	ldr	r1, [pc, #32]	; (8003290 <mcp794xx_eeprom_read_byte+0x70>)
 800326e:	f7fe fb43 	bl	80018f8 <a_mcp794xx_print_error_msg>
        return 1;           /**< failed error */
 8003272:	4630      	mov	r0, r6
 8003274:	e7e2      	b.n	800323c <mcp794xx_eeprom_read_byte+0x1c>
        return 2;     /**< return failed error */
 8003276:	2002      	movs	r0, #2
 8003278:	e7e0      	b.n	800323c <mcp794xx_eeprom_read_byte+0x1c>
        return 3;      /**< return failed error */
 800327a:	2003      	movs	r0, #3
 800327c:	e7de      	b.n	800323c <mcp794xx_eeprom_read_byte+0x1c>
 800327e:	bf00      	nop
 8003280:	0800972e 	.word	0x0800972e
 8003284:	0800974e 	.word	0x0800974e
 8003288:	08009773 	.word	0x08009773
 800328c:	200003bc 	.word	0x200003bc
 8003290:	080097b2 	.word	0x080097b2

08003294 <mcp794xx_eeprom_get_bp_status>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mcp794xx_eeprom_get_bp_status(mcp794xx_handle_t *const pHandle, mcp794xx_eeprom_block_protect_stat_t *pStatus)
{
 8003294:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t block_protect_status = 0;
 8003296:	2300      	movs	r3, #0
{
 8003298:	460d      	mov	r5, r1
	uint8_t block_protect_status = 0;
 800329a:	f88d 3007 	strb.w	r3, [sp, #7]

    if(pHandle == NULL)
 800329e:	4604      	mov	r4, r0
 80032a0:	b1c0      	cbz	r0, 80032d4 <mcp794xx_eeprom_get_bp_status+0x40>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 80032a2:	7fc6      	ldrb	r6, [r0, #31]
 80032a4:	2e01      	cmp	r6, #1
 80032a6:	d117      	bne.n	80032d8 <mcp794xx_eeprom_get_bp_status+0x44>
        return 3;      /**< return failed error */

    err = eeprom_mcp794xx_i2c_read(pHandle, EEPROM_BLOCK_PROTECT_REG, (uint8_t *)&block_protect_status, 1);
 80032a8:	4633      	mov	r3, r6
 80032aa:	f10d 0207 	add.w	r2, sp, #7
 80032ae:	21ff      	movs	r1, #255	; 0xff
 80032b0:	f7fe fae7 	bl	8001882 <eeprom_mcp794xx_i2c_read>
 80032b4:	4b09      	ldr	r3, [pc, #36]	; (80032dc <mcp794xx_eeprom_get_bp_status+0x48>)
 80032b6:	7018      	strb	r0, [r3, #0]
    if(err)
 80032b8:	b130      	cbz	r0, 80032c8 <mcp794xx_eeprom_get_bp_status+0x34>
    {
    	a_mcp794xx_print_error_msg(pHandle, "read eeprom block protect reg");
 80032ba:	4620      	mov	r0, r4
 80032bc:	4908      	ldr	r1, [pc, #32]	; (80032e0 <mcp794xx_eeprom_get_bp_status+0x4c>)
 80032be:	f7fe fb1b 	bl	80018f8 <a_mcp794xx_print_error_msg>
        return 1;           /**< failed error */
 80032c2:	4630      	mov	r0, r6
    }

    *pStatus = (mcp794xx_eeprom_block_protect_stat_t)(block_protect_status & EEPROM_BLOCK_PROTECT_MASK) >> 2;

    return 0;               /**< success */
}
 80032c4:	b002      	add	sp, #8
 80032c6:	bd70      	pop	{r4, r5, r6, pc}
    *pStatus = (mcp794xx_eeprom_block_protect_stat_t)(block_protect_status & EEPROM_BLOCK_PROTECT_MASK) >> 2;
 80032c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80032cc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80032d0:	702b      	strb	r3, [r5, #0]
    return 0;               /**< success */
 80032d2:	e7f7      	b.n	80032c4 <mcp794xx_eeprom_get_bp_status+0x30>
        return 2;     /**< return failed error */
 80032d4:	2002      	movs	r0, #2
 80032d6:	e7f5      	b.n	80032c4 <mcp794xx_eeprom_get_bp_status+0x30>
        return 3;      /**< return failed error */
 80032d8:	2003      	movs	r0, #3
 80032da:	e7f3      	b.n	80032c4 <mcp794xx_eeprom_get_bp_status+0x30>
 80032dc:	200003bc 	.word	0x200003bc
 80032e0:	080097be 	.word	0x080097be

080032e4 <mcp794xx_eeprom_check_bp_before_write>:
 *          - 3 handle is not initialized
 *          - 4 invalid device variant
 * @note    none
 */
uint8_t mcp794xx_eeprom_check_bp_before_write(mcp794xx_handle_t *const pHandle, uint8_t u8Address)
{
 80032e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032e6:	460e      	mov	r6, r1
	uint8_t status;

    if(pHandle == NULL)
 80032e8:	4605      	mov	r5, r0
 80032ea:	b368      	cbz	r0, 8003348 <mcp794xx_eeprom_check_bp_before_write+0x64>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 80032ec:	7fc4      	ldrb	r4, [r0, #31]
 80032ee:	2c01      	cmp	r4, #1
 80032f0:	d12c      	bne.n	800334c <mcp794xx_eeprom_check_bp_before_write+0x68>
        return 3;      /**< return failed error */

   err = mcp794xx_eeprom_get_bp_status(pHandle, (uint8_t *)&status);
 80032f2:	f10d 0107 	add.w	r1, sp, #7
 80032f6:	f7ff ffcd 	bl	8003294 <mcp794xx_eeprom_get_bp_status>
 80032fa:	4f15      	ldr	r7, [pc, #84]	; (8003350 <mcp794xx_eeprom_check_bp_before_write+0x6c>)
 80032fc:	7038      	strb	r0, [r7, #0]
   if(err != MCP794XX_DRV_OK){
 80032fe:	b138      	cbz	r0, 8003310 <mcp794xx_eeprom_check_bp_before_write+0x2c>
	   a_mcp794xx_print_error_msg(pHandle, "to verify memory block protect status");
 8003300:	4914      	ldr	r1, [pc, #80]	; (8003354 <mcp794xx_eeprom_check_bp_before_write+0x70>)
 8003302:	4628      	mov	r0, r5
 8003304:	f7fe faf8 	bl	80018f8 <a_mcp794xx_print_error_msg>
	   return err;
 8003308:	783c      	ldrb	r4, [r7, #0]
			break;
		}
   }

    return 0;              /**< success */
}
 800330a:	4620      	mov	r0, r4
 800330c:	b003      	add	sp, #12
 800330e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   if(pHandle->device_variant == MCP79400_VARIANT || pHandle->device_variant == MCP7940M_VARIANT || pHandle->device_variant == MCP7940N_VARIANT || pHandle->device_variant == MCP79410_VARIANT){
 8003310:	7fab      	ldrb	r3, [r5, #30]
 8003312:	b113      	cbz	r3, 800331a <mcp794xx_eeprom_check_bp_before_write+0x36>
 8003314:	3b03      	subs	r3, #3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d805      	bhi.n	8003326 <mcp794xx_eeprom_check_bp_before_write+0x42>
	   a_mcp794xx_print_error_msg(pHandle, "invalid device variant, the device does have a eeprom built-in");
 800331a:	490f      	ldr	r1, [pc, #60]	; (8003358 <mcp794xx_eeprom_check_bp_before_write+0x74>)
 800331c:	4628      	mov	r0, r5
 800331e:	f7fe faeb 	bl	80018f8 <a_mcp794xx_print_error_msg>
	   return 4;
 8003322:	2404      	movs	r4, #4
 8003324:	e7f1      	b.n	800330a <mcp794xx_eeprom_check_bp_before_write+0x26>
   switch(status)
 8003326:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d008      	beq.n	8003340 <mcp794xx_eeprom_check_bp_before_write+0x5c>
 800332e:	2b03      	cmp	r3, #3
 8003330:	d0eb      	beq.n	800330a <mcp794xx_eeprom_check_bp_before_write+0x26>
 8003332:	2b01      	cmp	r3, #1
 8003334:	d106      	bne.n	8003344 <mcp794xx_eeprom_check_bp_before_write+0x60>
	   return err;
 8003336:	2e5f      	cmp	r6, #95	; 0x5f
 8003338:	bf94      	ite	ls
 800333a:	2400      	movls	r4, #0
 800333c:	2401      	movhi	r4, #1
 800333e:	e7e4      	b.n	800330a <mcp794xx_eeprom_check_bp_before_write+0x26>
 8003340:	2e3f      	cmp	r6, #63	; 0x3f
 8003342:	e7f9      	b.n	8003338 <mcp794xx_eeprom_check_bp_before_write+0x54>
		   return 0;
 8003344:	4604      	mov	r4, r0
 8003346:	e7e0      	b.n	800330a <mcp794xx_eeprom_check_bp_before_write+0x26>
        return 2;     /**< return failed error */
 8003348:	2402      	movs	r4, #2
 800334a:	e7de      	b.n	800330a <mcp794xx_eeprom_check_bp_before_write+0x26>
        return 3;      /**< return failed error */
 800334c:	2403      	movs	r4, #3
 800334e:	e7dc      	b.n	800330a <mcp794xx_eeprom_check_bp_before_write+0x26>
 8003350:	200003bc 	.word	0x200003bc
 8003354:	080097dc 	.word	0x080097dc
 8003358:	08009773 	.word	0x08009773

0800335c <mcp794xx_eeprom_write_byte>:
{
 800335c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003360:	460d      	mov	r5, r1
 8003362:	461e      	mov	r6, r3
    if(pHandle == NULL)
 8003364:	4604      	mov	r4, r0
 8003366:	b370      	cbz	r0, 80033c6 <mcp794xx_eeprom_write_byte+0x6a>
    if(pHandle->inited != 1)
 8003368:	7fc7      	ldrb	r7, [r0, #31]
 800336a:	2f01      	cmp	r7, #1
 800336c:	d12d      	bne.n	80033ca <mcp794xx_eeprom_write_byte+0x6e>
    if(u8Addr < EEPROM_LOWEST_ADDRESS || u8Addr > EEPROM_HIGHEST_ADDRESS){
 800336e:	060b      	lsls	r3, r1, #24
 8003370:	d506      	bpl.n	8003380 <mcp794xx_eeprom_write_byte+0x24>
    	a_mcp794xx_print_error_msg(pHandle, "to write eeprom, invalid address");
 8003372:	4917      	ldr	r1, [pc, #92]	; (80033d0 <mcp794xx_eeprom_write_byte+0x74>)
    	a_mcp794xx_print_error_msg(pHandle, "to write eeprom, address out of range");
 8003374:	f7fe fac0 	bl	80018f8 <a_mcp794xx_print_error_msg>
    	return 4;
 8003378:	2004      	movs	r0, #4
}
 800337a:	b002      	add	sp, #8
 800337c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }if((u8Addr + length) > EEPROM_MEMORY_SIZE)
 8003380:	198b      	adds	r3, r1, r6
 8003382:	2b80      	cmp	r3, #128	; 0x80
 8003384:	dd01      	ble.n	800338a <mcp794xx_eeprom_write_byte+0x2e>
    	a_mcp794xx_print_error_msg(pHandle, "to write eeprom, address out of range");
 8003386:	4913      	ldr	r1, [pc, #76]	; (80033d4 <mcp794xx_eeprom_write_byte+0x78>)
 8003388:	e7f4      	b.n	8003374 <mcp794xx_eeprom_write_byte+0x18>
 800338a:	9201      	str	r2, [sp, #4]
    err = mcp794xx_eeprom_check_bp_before_write(pHandle, u8Addr);   /**< check to make sure that the address to write is not protected */
 800338c:	f7ff ffaa 	bl	80032e4 <mcp794xx_eeprom_check_bp_before_write>
 8003390:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80033e0 <mcp794xx_eeprom_write_byte+0x84>
    if(err != MCP794XX_DRV_OK)
 8003394:	9a01      	ldr	r2, [sp, #4]
    err = mcp794xx_eeprom_check_bp_before_write(pHandle, u8Addr);   /**< check to make sure that the address to write is not protected */
 8003396:	f888 0000 	strb.w	r0, [r8]
    if(err != MCP794XX_DRV_OK)
 800339a:	b128      	cbz	r0, 80033a8 <mcp794xx_eeprom_write_byte+0x4c>
    	a_mcp794xx_print_error_msg(pHandle, "write eeprom, attempt to write a block protected region");
 800339c:	4620      	mov	r0, r4
 800339e:	490e      	ldr	r1, [pc, #56]	; (80033d8 <mcp794xx_eeprom_write_byte+0x7c>)
 80033a0:	f7fe faaa 	bl	80018f8 <a_mcp794xx_print_error_msg>
    	return 5;
 80033a4:	2005      	movs	r0, #5
 80033a6:	e7e8      	b.n	800337a <mcp794xx_eeprom_write_byte+0x1e>
    err = eeprom_mcp794xx_i2c_write(pHandle, u8Addr, (uint8_t *)pBuf, length);
 80033a8:	4633      	mov	r3, r6
 80033aa:	4629      	mov	r1, r5
 80033ac:	4620      	mov	r0, r4
 80033ae:	f7fe fa4c 	bl	800184a <eeprom_mcp794xx_i2c_write>
 80033b2:	f888 0000 	strb.w	r0, [r8]
    if(err)
 80033b6:	2800      	cmp	r0, #0
 80033b8:	d0df      	beq.n	800337a <mcp794xx_eeprom_write_byte+0x1e>
    	a_mcp794xx_print_error_msg(pHandle, "write eeprom");
 80033ba:	4620      	mov	r0, r4
 80033bc:	4907      	ldr	r1, [pc, #28]	; (80033dc <mcp794xx_eeprom_write_byte+0x80>)
 80033be:	f7fe fa9b 	bl	80018f8 <a_mcp794xx_print_error_msg>
        return 1;           /**< failed error */
 80033c2:	4638      	mov	r0, r7
 80033c4:	e7d9      	b.n	800337a <mcp794xx_eeprom_write_byte+0x1e>
        return 2;     /**< return failed error */
 80033c6:	2002      	movs	r0, #2
 80033c8:	e7d7      	b.n	800337a <mcp794xx_eeprom_write_byte+0x1e>
        return 3;      /**< return failed error */
 80033ca:	2003      	movs	r0, #3
 80033cc:	e7d5      	b.n	800337a <mcp794xx_eeprom_write_byte+0x1e>
 80033ce:	bf00      	nop
 80033d0:	08009802 	.word	0x08009802
 80033d4:	08009823 	.word	0x08009823
 80033d8:	08009849 	.word	0x08009849
 80033dc:	08009881 	.word	0x08009881
 80033e0:	200003bc 	.word	0x200003bc

080033e4 <mcp794xx_eeprom_get_legth>:
 * @note      Tgis function returns the eeprom size
 */
uint8_t mcp794xx_eeprom_get_legth(mcp794xx_handle_t *const pHandle)
{

    if(pHandle == NULL)
 80033e4:	b128      	cbz	r0, 80033f2 <mcp794xx_eeprom_get_legth+0xe>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 80033e6:	7fc3      	ldrb	r3, [r0, #31]
        return 3;      /**< return failed error */
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	bf0c      	ite	eq
 80033ec:	2080      	moveq	r0, #128	; 0x80
 80033ee:	2003      	movne	r0, #3
 80033f0:	4770      	bx	lr
        return 2;     /**< return failed error */
 80033f2:	2002      	movs	r0, #2

    return EEPROM_MEMORY_SIZE;              /**< success */
}
 80033f4:	4770      	bx	lr
	...

080033f8 <mcp794xx_eeprom_validate_page_boundary>:
{
 80033f8:	b570      	push	{r4, r5, r6, lr}
    if(pHandle == NULL)
 80033fa:	4605      	mov	r5, r0
 80033fc:	b398      	cbz	r0, 8003466 <mcp794xx_eeprom_validate_page_boundary+0x6e>
    if(pHandle->inited != 1)
 80033fe:	7fc3      	ldrb	r3, [r0, #31]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d132      	bne.n	800346a <mcp794xx_eeprom_validate_page_boundary+0x72>
    for (index = 0; index < (mcp794xx_eeprom_get_legth(pHandle) / EEPROM_PAGE_SIZE); index++)
 8003404:	f7ff ffee 	bl	80033e4 <mcp794xx_eeprom_get_legth>
 8003408:	2400      	movs	r4, #0
 800340a:	f3c0 00c7 	ubfx	r0, r0, #3, #8
 800340e:	4284      	cmp	r4, r0
 8003410:	db01      	blt.n	8003416 <mcp794xx_eeprom_validate_page_boundary+0x1e>
    return 0;               /**< success */
 8003412:	2000      	movs	r0, #0
 8003414:	e024      	b.n	8003460 <mcp794xx_eeprom_validate_page_boundary+0x68>
        if ((index * EEPROM_PAGE_SIZE) > u8Address) /**< get start address page number(index) */
 8003416:	ebb1 0fc4 	cmp.w	r1, r4, lsl #3
 800341a:	da22      	bge.n	8003462 <mcp794xx_eeprom_validate_page_boundary+0x6a>
        	status = (u8Address + u8Length) / (float) EEPROM_PAGE_SIZE;
 800341c:	1850      	adds	r0, r2, r1
            res = ceil(status);
 800341e:	ee07 0a90 	vmov	s15, r0
 8003422:	eefa 7aee 	vcvt.f32.s32	s15, s15, #3
 8003426:	ee17 0a90 	vmov	r0, s15
 800342a:	f7fd f88d 	bl	8000548 <__aeabi_f2d>
 800342e:	ec41 0b10 	vmov	d0, r0, r1
 8003432:	f005 f855 	bl	80084e0 <ceil>
 8003436:	ec51 0b10 	vmov	r0, r1, d0
 800343a:	f7fd fb8d 	bl	8000b58 <__aeabi_d2iz>
            if (res > index)
 800343e:	4284      	cmp	r4, r0
 8003440:	dae7      	bge.n	8003412 <mcp794xx_eeprom_validate_page_boundary+0x1a>
                startAdress = (uint16_t) (EEPROM_PAGE_SIZE * (index - 1));
 8003442:	1e66      	subs	r6, r4, #1
 8003444:	00f6      	lsls	r6, r6, #3
                a_mcp794xx_print_error_msg(pHandle, "to execute, attempt to write beyond page boundary");
 8003446:	4628      	mov	r0, r5
 8003448:	4909      	ldr	r1, [pc, #36]	; (8003470 <mcp794xx_eeprom_validate_page_boundary+0x78>)
                startAdress = (uint16_t) (EEPROM_PAGE_SIZE * (index - 1));
 800344a:	b2b6      	uxth	r6, r6
                a_mcp794xx_print_error_msg(pHandle, "to execute, attempt to write beyond page boundary");
 800344c:	f7fe fa54 	bl	80018f8 <a_mcp794xx_print_error_msg>
                endAddress = (startAdress + EEPROM_PAGE_SIZE) - 1;
 8003450:	1df3      	adds	r3, r6, #7
                pHandle->debug_print("mcp794xx: page %d start address:%d end address:%d\r\n", index, startAdress, endAddress);
 8003452:	4808      	ldr	r0, [pc, #32]	; (8003474 <mcp794xx_eeprom_validate_page_boundary+0x7c>)
 8003454:	696d      	ldr	r5, [r5, #20]
 8003456:	b29b      	uxth	r3, r3
 8003458:	4632      	mov	r2, r6
 800345a:	4621      	mov	r1, r4
 800345c:	47a8      	blx	r5
                return 6; /**< return failed error **/
 800345e:	2006      	movs	r0, #6
}
 8003460:	bd70      	pop	{r4, r5, r6, pc}
    for (index = 0; index < (mcp794xx_eeprom_get_legth(pHandle) / EEPROM_PAGE_SIZE); index++)
 8003462:	3401      	adds	r4, #1
 8003464:	e7d3      	b.n	800340e <mcp794xx_eeprom_validate_page_boundary+0x16>
        return 2;     /**< return failed error */
 8003466:	2002      	movs	r0, #2
 8003468:	e7fa      	b.n	8003460 <mcp794xx_eeprom_validate_page_boundary+0x68>
        return 3;      /**< return failed error */
 800346a:	2003      	movs	r0, #3
 800346c:	e7f8      	b.n	8003460 <mcp794xx_eeprom_validate_page_boundary+0x68>
 800346e:	bf00      	nop
 8003470:	0800988e 	.word	0x0800988e
 8003474:	080098c0 	.word	0x080098c0

08003478 <mcp794xx_eeprom_put_byte>:
{
 8003478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800347c:	4688      	mov	r8, r1
 800347e:	4614      	mov	r4, r2
 8003480:	461f      	mov	r7, r3
    if(pHandle == NULL)
 8003482:	4606      	mov	r6, r0
 8003484:	2800      	cmp	r0, #0
 8003486:	d03d      	beq.n	8003504 <mcp794xx_eeprom_put_byte+0x8c>
    if(pHandle->inited != 1)
 8003488:	7fc1      	ldrb	r1, [r0, #31]
 800348a:	2901      	cmp	r1, #1
 800348c:	d13c      	bne.n	8003508 <mcp794xx_eeprom_put_byte+0x90>
    pTemp_buffer = (uint8_t*)calloc(u8Length, sizeof(uint8_t));
 800348e:	4618      	mov	r0, r3
 8003490:	f002 f848 	bl	8005524 <calloc>
	if(pTemp_buffer == NULL)
 8003494:	4605      	mov	r5, r0
 8003496:	b910      	cbnz	r0, 800349e <mcp794xx_eeprom_put_byte+0x26>
		pHandle->debug_print("failed to allocate dynamic memory\n\r");
 8003498:	6973      	ldr	r3, [r6, #20]
 800349a:	481c      	ldr	r0, [pc, #112]	; (800350c <mcp794xx_eeprom_put_byte+0x94>)
 800349c:	4798      	blx	r3
    memcpy(pTemp_buffer, pBuf, u8Length);
 800349e:	4621      	mov	r1, r4
 80034a0:	463a      	mov	r2, r7
 80034a2:	4628      	mov	r0, r5
 80034a4:	f002 f880 	bl	80055a8 <memcpy>
    err = mcp794xx_eeprom_validate_page_boundary(pHandle, u8Addr, u8Length);
 80034a8:	463a      	mov	r2, r7
 80034aa:	4641      	mov	r1, r8
 80034ac:	4630      	mov	r0, r6
 80034ae:	f7ff ffa3 	bl	80033f8 <mcp794xx_eeprom_validate_page_boundary>
 80034b2:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8003514 <mcp794xx_eeprom_put_byte+0x9c>
 80034b6:	4604      	mov	r4, r0
 80034b8:	f889 0000 	strb.w	r0, [r9]
    if(err != MCP794XX_DRV_OK){
 80034bc:	b9a0      	cbnz	r0, 80034e8 <mcp794xx_eeprom_put_byte+0x70>
 80034be:	462b      	mov	r3, r5
 80034c0:	19ea      	adds	r2, r5, r7
 80034c2:	eb05 0157 	add.w	r1, r5, r7, lsr #1
	for (index = 0; index < (uint8_t)u8Length / 2; index++)
 80034c6:	428b      	cmp	r3, r1
 80034c8:	d111      	bne.n	80034ee <mcp794xx_eeprom_put_byte+0x76>
	err = mcp794xx_eeprom_write_byte(pHandle, u8Addr, (uint8_t *)pTemp_buffer, u8Length);
 80034ca:	463b      	mov	r3, r7
 80034cc:	462a      	mov	r2, r5
 80034ce:	4641      	mov	r1, r8
 80034d0:	4630      	mov	r0, r6
 80034d2:	f7ff ff43 	bl	800335c <mcp794xx_eeprom_write_byte>
 80034d6:	4604      	mov	r4, r0
 80034d8:	f889 0000 	strb.w	r0, [r9]
	if (err)
 80034dc:	b170      	cbz	r0, 80034fc <mcp794xx_eeprom_put_byte+0x84>
		a_mcp794xx_print_error_msg(pHandle, "put bytes");
 80034de:	490c      	ldr	r1, [pc, #48]	; (8003510 <mcp794xx_eeprom_put_byte+0x98>)
 80034e0:	4630      	mov	r0, r6
 80034e2:	f7fe fa09 	bl	80018f8 <a_mcp794xx_print_error_msg>
		return 1; /**< failed to write */
 80034e6:	2401      	movs	r4, #1
}
 80034e8:	4620      	mov	r0, r4
 80034ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		dataOut = pTemp_buffer[index];
 80034ee:	7818      	ldrb	r0, [r3, #0]
		pTemp_buffer[index] = pTemp_buffer[u8Length - index - 1];
 80034f0:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
 80034f4:	f803 4b01 	strb.w	r4, [r3], #1
		pTemp_buffer[u8Length - index - 1] = dataOut;
 80034f8:	7010      	strb	r0, [r2, #0]
	for (index = 0; index < (uint8_t)u8Length / 2; index++)
 80034fa:	e7e4      	b.n	80034c6 <mcp794xx_eeprom_put_byte+0x4e>
	free(pTemp_buffer);
 80034fc:	4628      	mov	r0, r5
 80034fe:	f002 f84b 	bl	8005598 <free>
    return 0;              /**< success */
 8003502:	e7f1      	b.n	80034e8 <mcp794xx_eeprom_put_byte+0x70>
        return 2;     /**< return failed error */
 8003504:	2402      	movs	r4, #2
 8003506:	e7ef      	b.n	80034e8 <mcp794xx_eeprom_put_byte+0x70>
        return 3;      /**< return failed error */
 8003508:	2403      	movs	r4, #3
 800350a:	e7ed      	b.n	80034e8 <mcp794xx_eeprom_put_byte+0x70>
 800350c:	080087e1 	.word	0x080087e1
 8003510:	080098f4 	.word	0x080098f4
 8003514:	200003bc 	.word	0x200003bc

08003518 <mcp794xx_eeprom_get_byte>:
{
 8003518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800351c:	4688      	mov	r8, r1
 800351e:	4691      	mov	r9, r2
 8003520:	461d      	mov	r5, r3
    if(pHandle == NULL)
 8003522:	4607      	mov	r7, r0
 8003524:	2800      	cmp	r0, #0
 8003526:	d03d      	beq.n	80035a4 <mcp794xx_eeprom_get_byte+0x8c>
    if(pHandle->inited != 1)
 8003528:	f890 a01f 	ldrb.w	sl, [r0, #31]
 800352c:	f1ba 0f01 	cmp.w	sl, #1
 8003530:	d13a      	bne.n	80035a8 <mcp794xx_eeprom_get_byte+0x90>
	temp_buffer = (uint8_t*)calloc(u8Length, sizeof(uint8_t));
 8003532:	4651      	mov	r1, sl
 8003534:	4618      	mov	r0, r3
 8003536:	f001 fff5 	bl	8005524 <calloc>
    err = mcp794xx_eeprom_validate_page_boundary(pHandle, u8Addr, u8Length);
 800353a:	462a      	mov	r2, r5
	temp_buffer = (uint8_t*)calloc(u8Length, sizeof(uint8_t));
 800353c:	4606      	mov	r6, r0
    err = mcp794xx_eeprom_validate_page_boundary(pHandle, u8Addr, u8Length);
 800353e:	4641      	mov	r1, r8
 8003540:	4638      	mov	r0, r7
 8003542:	f7ff ff59 	bl	80033f8 <mcp794xx_eeprom_validate_page_boundary>
 8003546:	f8df b06c 	ldr.w	fp, [pc, #108]	; 80035b4 <mcp794xx_eeprom_get_byte+0x9c>
 800354a:	4604      	mov	r4, r0
 800354c:	f88b 0000 	strb.w	r0, [fp]
    if(err != MCP794XX_DRV_OK){
 8003550:	b9f0      	cbnz	r0, 8003590 <mcp794xx_eeprom_get_byte+0x78>
    err = (mcp794xx_eeprom_read_byte(pHandle, u8Addr, (uint8_t*) temp_buffer, u8Length));
 8003552:	462b      	mov	r3, r5
 8003554:	4632      	mov	r2, r6
 8003556:	4641      	mov	r1, r8
 8003558:	4638      	mov	r0, r7
 800355a:	f7ff fe61 	bl	8003220 <mcp794xx_eeprom_read_byte>
 800355e:	4604      	mov	r4, r0
 8003560:	f88b 0000 	strb.w	r0, [fp]
    if (err != MCP794XX_DRV_OK)
 8003564:	b978      	cbnz	r0, 8003586 <mcp794xx_eeprom_get_byte+0x6e>
 8003566:	4633      	mov	r3, r6
 8003568:	1972      	adds	r2, r6, r5
 800356a:	eb06 0155 	add.w	r1, r6, r5, lsr #1
    for (index = 0; index < (uint8_t)u8Length / 2; index++)
 800356e:	428b      	cmp	r3, r1
 8003570:	d111      	bne.n	8003596 <mcp794xx_eeprom_get_byte+0x7e>
    memcpy(eeprom.buffer, temp_buffer, u8Length);
 8003572:	4b0e      	ldr	r3, [pc, #56]	; (80035ac <mcp794xx_eeprom_get_byte+0x94>)
 8003574:	462a      	mov	r2, r5
 8003576:	4618      	mov	r0, r3
 8003578:	4631      	mov	r1, r6
 800357a:	f002 f815 	bl	80055a8 <memcpy>
    *pBuf = (uint32_t)eeprom.data;
 800357e:	6803      	ldr	r3, [r0, #0]
 8003580:	f8c9 3000 	str.w	r3, [r9]
    return 0;              /**< success */
 8003584:	e004      	b.n	8003590 <mcp794xx_eeprom_get_byte+0x78>
    	a_mcp794xx_print_error_msg(pHandle, "get bytes");
 8003586:	490a      	ldr	r1, [pc, #40]	; (80035b0 <mcp794xx_eeprom_get_byte+0x98>)
 8003588:	4638      	mov	r0, r7
 800358a:	f7fe f9b5 	bl	80018f8 <a_mcp794xx_print_error_msg>
        return 1; /**< return error code */
 800358e:	4654      	mov	r4, sl
}
 8003590:	4620      	mov	r0, r4
 8003592:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dataOut = temp_buffer[index];
 8003596:	7818      	ldrb	r0, [r3, #0]
        temp_buffer[index] = temp_buffer[u8Length - index - 1];
 8003598:	f812 7d01 	ldrb.w	r7, [r2, #-1]!
 800359c:	f803 7b01 	strb.w	r7, [r3], #1
        temp_buffer[u8Length - index - 1] = dataOut;
 80035a0:	7010      	strb	r0, [r2, #0]
    for (index = 0; index < (uint8_t)u8Length / 2; index++)
 80035a2:	e7e4      	b.n	800356e <mcp794xx_eeprom_get_byte+0x56>
        return 2;     /**< return failed error */
 80035a4:	2402      	movs	r4, #2
 80035a6:	e7f3      	b.n	8003590 <mcp794xx_eeprom_get_byte+0x78>
        return 3;      /**< return failed error */
 80035a8:	2403      	movs	r4, #3
 80035aa:	e7f1      	b.n	8003590 <mcp794xx_eeprom_get_byte+0x78>
 80035ac:	200003b4 	.word	0x200003b4
 80035b0:	080098fe 	.word	0x080098fe
 80035b4:	200003bc 	.word	0x200003bc

080035b8 <mcp794xx_info>:
 *             - 0 success
 *             - 2 pHandle is NULL
 * @note       none
 */
uint8_t mcp794xx_info(mcp794xx_handle_t *const pHandle)
{
 80035b8:	b510      	push	{r4, lr}

    strncpy(pHandle->info.chip_name, CHIP_NAME, 10);                        /**< copy chip name */
 80035ba:	4912      	ldr	r1, [pc, #72]	; (8003604 <mcp794xx_info+0x4c>)
{
 80035bc:	4604      	mov	r4, r0
    strncpy(pHandle->info.chip_name, CHIP_NAME, 10);                        /**< copy chip name */
 80035be:	220a      	movs	r2, #10
 80035c0:	3024      	adds	r0, #36	; 0x24
 80035c2:	f002 fd77 	bl	80060b4 <strncpy>
    strncpy(pHandle->info.interface, INTERFACE, 5);                         /**< copy interface name */
 80035c6:	4910      	ldr	r1, [pc, #64]	; (8003608 <mcp794xx_info+0x50>)
 80035c8:	2205      	movs	r2, #5
 80035ca:	f104 0047 	add.w	r0, r4, #71	; 0x47
 80035ce:	f002 fd71 	bl	80060b4 <strncpy>
    strncpy(pHandle->info.manufacturer_name, MANUFACTURER_NAME, 25);        /**< copy manufacturer name */
 80035d2:	490e      	ldr	r1, [pc, #56]	; (800360c <mcp794xx_info+0x54>)
 80035d4:	2219      	movs	r2, #25
 80035d6:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 80035da:	f002 fd6b 	bl	80060b4 <strncpy>
    pHandle->info.supply_voltage_max_v = SUPPLY_VOLTAGE_MAX;                /**< set minimal supply voltage */
    pHandle->info.supply_voltage_min_v = SUPPLY_VOLTAGE_MIN;                /**< set maximum supply voltage */
 80035de:	4b0c      	ldr	r3, [pc, #48]	; (8003610 <mcp794xx_info+0x58>)
 80035e0:	64e3      	str	r3, [r4, #76]	; 0x4c
    pHandle->info.supply_voltage_max_v = SUPPLY_VOLTAGE_MAX;                /**< set minimal supply voltage */
 80035e2:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <mcp794xx_info+0x5c>)
 80035e4:	6523      	str	r3, [r4, #80]	; 0x50
    pHandle->info.max_current_ma = MAX_CURRENT;                             /**< set maximum current */
 80035e6:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <mcp794xx_info+0x60>)
 80035e8:	6563      	str	r3, [r4, #84]	; 0x54
    pHandle->info.temperature_max = TEMPERATURE_MAX;                        /**< set minimal temperature */
    pHandle->info.temperature_min = TEMPERATURE_MIN;                        /**< set maximum temperature */
 80035ea:	4b0c      	ldr	r3, [pc, #48]	; (800361c <mcp794xx_info+0x64>)
 80035ec:	65a3      	str	r3, [r4, #88]	; 0x58
    pHandle->info.temperature_max = TEMPERATURE_MAX;                        /**< set minimal temperature */
 80035ee:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <mcp794xx_info+0x68>)
 80035f0:	65e3      	str	r3, [r4, #92]	; 0x5c
    pHandle->info.flash_size_min = MCU_FLASH_MIN;                           /**< set the Micro-controller minimum recommended flash size */
 80035f2:	f44f 6304 	mov.w	r3, #2112	; 0x840
 80035f6:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pHandle->info.ram_size_min = MCU_RAM_MIN;                               /**< set the Micro-controller minimum recommended ram size */
    pHandle->info.driver_version = DRIVER_VERSION;                          /**< set driver version */
 80035fa:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <mcp794xx_info+0x6c>)
 80035fc:	6663      	str	r3, [r4, #100]	; 0x64

    return 0;
}
 80035fe:	2000      	movs	r0, #0
 8003600:	bd10      	pop	{r4, pc}
 8003602:	bf00      	nop
 8003604:	08009908 	.word	0x08009908
 8003608:	08009911 	.word	0x08009911
 800360c:	08009915 	.word	0x08009915
 8003610:	3fa66666 	.word	0x3fa66666
 8003614:	40b00000 	.word	0x40b00000
 8003618:	43c80000 	.word	0x43c80000
 800361c:	c2200000 	.word	0xc2200000
 8003620:	42aa0000 	.word	0x42aa0000
 8003624:	447a0000 	.word	0x447a0000

08003628 <mcp794xx_basic_initialize>:
 *          - 1 initialize failed
 * @note    none
 */

uint8_t mcp794xx_basic_initialize(mcp794xx_variant_t variant)
{
 8003628:	b570      	push	{r4, r5, r6, lr}
   /*link function*/
    DRIVER_MCP794XX_LINK_INIT(&mcp794xx_handler, mcp794xx_handle_t);                               /**< Link the  */
 800362a:	4e47      	ldr	r6, [pc, #284]	; (8003748 <mcp794xx_basic_initialize+0x120>)
    DRIVER_MCP794XX_LINK_DELAY_MS(&mcp794xx_handler,mcp794xx_interface_delay_ms);                  /**< Link delay function */
    DRIVER_MCP794XX_LINK_DEBUG_PRINT(&mcp794xx_handler, mcp794xx_interface_debug_print);           /**< Link the debug print function */
    DRIVER_MCP794XX_LINK_RECEIVE_CALLBACK(&mcp794xx_handler, mcp794xx_interface_irq_callback);     /**< Link the IRQ callback function */

    /* initialize */
    err = mcp794xx_init(&mcp794xx_handler);
 800362c:	4d47      	ldr	r5, [pc, #284]	; (800374c <mcp794xx_basic_initialize+0x124>)
    DRIVER_MCP794XX_LINK_INIT(&mcp794xx_handler, mcp794xx_handle_t);                               /**< Link the  */
 800362e:	2258      	movs	r2, #88	; 0x58
 8003630:	2100      	movs	r1, #0
{
 8003632:	4604      	mov	r4, r0
    DRIVER_MCP794XX_LINK_INIT(&mcp794xx_handler, mcp794xx_handle_t);                               /**< Link the  */
 8003634:	f106 001c 	add.w	r0, r6, #28
 8003638:	f001 ffc4 	bl	80055c4 <memset>
    DRIVER_MCP794XX_LINK_I2C_INIT(&mcp794xx_handler, mcp794xx_interface_i2c_init);                 /**< Link the i2c initialize function */
 800363c:	4b44      	ldr	r3, [pc, #272]	; (8003750 <mcp794xx_basic_initialize+0x128>)
 800363e:	6033      	str	r3, [r6, #0]
    DRIVER_MCP794XX_LINK_I2C_DEINIT(&mcp794xx_handler, mcp794xx_interface_i2c_deinit);             /**< Link the the i2c de-initialize function */
 8003640:	4b44      	ldr	r3, [pc, #272]	; (8003754 <mcp794xx_basic_initialize+0x12c>)
 8003642:	6073      	str	r3, [r6, #4]
    DRIVER_MCP794XX_LINK_I2C_WRITE(&mcp794xx_handler, mcp794xx_interface_i2c_write);               /**< Link the i2c  write function */
 8003644:	4b44      	ldr	r3, [pc, #272]	; (8003758 <mcp794xx_basic_initialize+0x130>)
 8003646:	60f3      	str	r3, [r6, #12]
    DRIVER_MCP794XX_LINK_I2C_READ(&mcp794xx_handler, mcp794xx_interface_i2c_read);                 /**< Link the i2c read function */
 8003648:	4b44      	ldr	r3, [pc, #272]	; (800375c <mcp794xx_basic_initialize+0x134>)
 800364a:	60b3      	str	r3, [r6, #8]
    DRIVER_MCP794XX_LINK_DELAY_MS(&mcp794xx_handler,mcp794xx_interface_delay_ms);                  /**< Link delay function */
 800364c:	4b44      	ldr	r3, [pc, #272]	; (8003760 <mcp794xx_basic_initialize+0x138>)
 800364e:	6133      	str	r3, [r6, #16]
    DRIVER_MCP794XX_LINK_DEBUG_PRINT(&mcp794xx_handler, mcp794xx_interface_debug_print);           /**< Link the debug print function */
 8003650:	4b44      	ldr	r3, [pc, #272]	; (8003764 <mcp794xx_basic_initialize+0x13c>)
 8003652:	6173      	str	r3, [r6, #20]
    err = mcp794xx_init(&mcp794xx_handler);
 8003654:	4630      	mov	r0, r6
    DRIVER_MCP794XX_LINK_RECEIVE_CALLBACK(&mcp794xx_handler, mcp794xx_interface_irq_callback);     /**< Link the IRQ callback function */
 8003656:	4b44      	ldr	r3, [pc, #272]	; (8003768 <mcp794xx_basic_initialize+0x140>)
 8003658:	61b3      	str	r3, [r6, #24]
    err = mcp794xx_init(&mcp794xx_handler);
 800365a:	f7fe f965 	bl	8001928 <mcp794xx_init>
 800365e:	7028      	strb	r0, [r5, #0]
    if(err)
 8003660:	b128      	cbz	r0, 800366e <mcp794xx_basic_initialize+0x46>
    {
       mcp794xx_interface_debug_print("initialize");
 8003662:	4842      	ldr	r0, [pc, #264]	; (800376c <mcp794xx_basic_initialize+0x144>)
 8003664:	f000 fa1c 	bl	8003aa0 <mcp794xx_interface_debug_print>
        return err; /**< return error code */       /**< failed */
 8003668:	782c      	ldrb	r4, [r5, #0]

    mcp794xx_interface_delay_ms(10);																	/**< wait 10 ms after initialize complete */

    return 0;   /**< Initialize success */

}
 800366a:	4620      	mov	r0, r4
 800366c:	bd70      	pop	{r4, r5, r6, pc}
    err = mcp794xx_set_variant(&mcp794xx_handler, variant);
 800366e:	4621      	mov	r1, r4
 8003670:	4630      	mov	r0, r6
 8003672:	f7fe f9a0 	bl	80019b6 <mcp794xx_set_variant>
 8003676:	4604      	mov	r4, r0
 8003678:	7028      	strb	r0, [r5, #0]
    if(err)
 800367a:	2800      	cmp	r0, #0
 800367c:	d1f5      	bne.n	800366a <mcp794xx_basic_initialize+0x42>
    err = mcp794xx_set_addr_pin(&mcp794xx_handler);
 800367e:	4630      	mov	r0, r6
 8003680:	f7fe f98c 	bl	800199c <mcp794xx_set_addr_pin>
 8003684:	4604      	mov	r4, r0
 8003686:	7028      	strb	r0, [r5, #0]
    if(err)
 8003688:	2800      	cmp	r0, #0
 800368a:	d1ee      	bne.n	800366a <mcp794xx_basic_initialize+0x42>
    err = mcp794xx_set_osc_status(&mcp794xx_handler, MCP794XX_OSC_ENABLED);
 800368c:	2101      	movs	r1, #1
 800368e:	4630      	mov	r0, r6
 8003690:	f7fe fbe2 	bl	8001e58 <mcp794xx_set_osc_status>
 8003694:	4604      	mov	r4, r0
 8003696:	7028      	strb	r0, [r5, #0]
    if(err)
 8003698:	2800      	cmp	r0, #0
 800369a:	d1e6      	bne.n	800366a <mcp794xx_basic_initialize+0x42>
    err = mcp794xx_clr_alarm_interrupt_flag(&mcp794xx_handler, MCP794XX_ALARM0);
 800369c:	4601      	mov	r1, r0
 800369e:	4630      	mov	r0, r6
 80036a0:	f7ff f894 	bl	80027cc <mcp794xx_clr_alarm_interrupt_flag>
 80036a4:	4604      	mov	r4, r0
 80036a6:	7028      	strb	r0, [r5, #0]
    if(err)
 80036a8:	2800      	cmp	r0, #0
 80036aa:	d1de      	bne.n	800366a <mcp794xx_basic_initialize+0x42>
    err = mcp794xx_clr_alarm_interrupt_flag(&mcp794xx_handler, MCP794XX_ALARM1);
 80036ac:	2101      	movs	r1, #1
 80036ae:	4630      	mov	r0, r6
 80036b0:	f7ff f88c 	bl	80027cc <mcp794xx_clr_alarm_interrupt_flag>
 80036b4:	4604      	mov	r4, r0
 80036b6:	7028      	strb	r0, [r5, #0]
    if(err)
 80036b8:	2800      	cmp	r0, #0
 80036ba:	d1d6      	bne.n	800366a <mcp794xx_basic_initialize+0x42>
    err= mcp794xx_set_alarm_enable_status(&mcp794xx_handler, MCP794XX_ALARM0, MCP794XX_BOOL_FALSE);
 80036bc:	4602      	mov	r2, r0
 80036be:	4601      	mov	r1, r0
 80036c0:	4630      	mov	r0, r6
 80036c2:	f7fe fcaf 	bl	8002024 <mcp794xx_set_alarm_enable_status>
 80036c6:	4604      	mov	r4, r0
 80036c8:	7028      	strb	r0, [r5, #0]
    if(err)
 80036ca:	2800      	cmp	r0, #0
 80036cc:	d1cd      	bne.n	800366a <mcp794xx_basic_initialize+0x42>
    err= mcp794xx_set_alarm_enable_status(&mcp794xx_handler, MCP794XX_ALARM1, MCP794XX_BOOL_FALSE);
 80036ce:	4602      	mov	r2, r0
 80036d0:	2101      	movs	r1, #1
 80036d2:	4630      	mov	r0, r6
 80036d4:	f7fe fca6 	bl	8002024 <mcp794xx_set_alarm_enable_status>
 80036d8:	4604      	mov	r4, r0
 80036da:	7028      	strb	r0, [r5, #0]
    if(err)
 80036dc:	2800      	cmp	r0, #0
 80036de:	d1c4      	bne.n	800366a <mcp794xx_basic_initialize+0x42>
    err = mcp794xx_set_mfp_logic_level(&mcp794xx_handler, MCP794XX_MFP_LOGIC_HIGH);
 80036e0:	2101      	movs	r1, #1
 80036e2:	4630      	mov	r0, r6
 80036e4:	f7ff f8d0 	bl	8002888 <mcp794xx_set_mfp_logic_level>
 80036e8:	4604      	mov	r4, r0
 80036ea:	7028      	strb	r0, [r5, #0]
    if(err)
 80036ec:	2800      	cmp	r0, #0
 80036ee:	d1bc      	bne.n	800366a <mcp794xx_basic_initialize+0x42>
    err = mcp794xx_set_sqr_wave_enable_status(&mcp794xx_handler, MCP794XX_BOOL_FALSE);
 80036f0:	4601      	mov	r1, r0
 80036f2:	4630      	mov	r0, r6
 80036f4:	f7ff f932 	bl	800295c <mcp794xx_set_sqr_wave_enable_status>
 80036f8:	4604      	mov	r4, r0
 80036fa:	7028      	strb	r0, [r5, #0]
    if(err)
 80036fc:	2800      	cmp	r0, #0
 80036fe:	d1b4      	bne.n	800366a <mcp794xx_basic_initialize+0x42>
    err = mcp794xx_set_coarse_trim_mode_status(&mcp794xx_handler, MCP794XX_BOOL_FALSE);
 8003700:	4811      	ldr	r0, [pc, #68]	; (8003748 <mcp794xx_basic_initialize+0x120>)
 8003702:	2100      	movs	r1, #0
 8003704:	f7ff f960 	bl	80029c8 <mcp794xx_set_coarse_trim_mode_status>
 8003708:	4604      	mov	r4, r0
 800370a:	7028      	strb	r0, [r5, #0]
    if(err)
 800370c:	2800      	cmp	r0, #0
 800370e:	d1ac      	bne.n	800366a <mcp794xx_basic_initialize+0x42>
    err = mcp794xx_set_ext_osc_enable_status(&mcp794xx_handler, MCP794XX_BOOL_FALSE);
 8003710:	4601      	mov	r1, r0
 8003712:	480d      	ldr	r0, [pc, #52]	; (8003748 <mcp794xx_basic_initialize+0x120>)
 8003714:	f7ff f9ce 	bl	8002ab4 <mcp794xx_set_ext_osc_enable_status>
 8003718:	4604      	mov	r4, r0
 800371a:	7028      	strb	r0, [r5, #0]
    if(err)
 800371c:	2800      	cmp	r0, #0
 800371e:	d1a4      	bne.n	800366a <mcp794xx_basic_initialize+0x42>
    err = mcp794xx_set_osc_start_bit(&mcp794xx_handler, MCP794XX_BOOL_TRUE);
 8003720:	4809      	ldr	r0, [pc, #36]	; (8003748 <mcp794xx_basic_initialize+0x120>)
 8003722:	2101      	movs	r1, #1
 8003724:	f7ff f9f6 	bl	8002b14 <mcp794xx_set_osc_start_bit>
 8003728:	4604      	mov	r4, r0
 800372a:	7028      	strb	r0, [r5, #0]
    if(err)
 800372c:	2800      	cmp	r0, #0
 800372e:	d19c      	bne.n	800366a <mcp794xx_basic_initialize+0x42>
    err = mcp794xx_set_debug_print_buffer_size(&mcp794xx_handler, MCP794XX_DEBUG_PRINT_BUFFER_SIZE_64B); /**< set the debug print function buffer to 64 bytes */
 8003730:	4805      	ldr	r0, [pc, #20]	; (8003748 <mcp794xx_basic_initialize+0x120>)
 8003732:	2140      	movs	r1, #64	; 0x40
 8003734:	f7fe f94a 	bl	80019cc <mcp794xx_set_debug_print_buffer_size>
 8003738:	4604      	mov	r4, r0
 800373a:	7028      	strb	r0, [r5, #0]
    if(err)
 800373c:	2800      	cmp	r0, #0
 800373e:	d194      	bne.n	800366a <mcp794xx_basic_initialize+0x42>
    mcp794xx_interface_delay_ms(10);																	/**< wait 10 ms after initialize complete */
 8003740:	200a      	movs	r0, #10
 8003742:	f000 f9ab 	bl	8003a9c <mcp794xx_interface_delay_ms>
    return 0;   /**< Initialize success */
 8003746:	e790      	b.n	800366a <mcp794xx_basic_initialize+0x42>
 8003748:	200003c0 	.word	0x200003c0
 800374c:	200003bd 	.word	0x200003bd
 8003750:	08003a8d 	.word	0x08003a8d
 8003754:	08003a91 	.word	0x08003a91
 8003758:	08003a99 	.word	0x08003a99
 800375c:	08003a95 	.word	0x08003a95
 8003760:	08003a9d 	.word	0x08003a9d
 8003764:	08003aa1 	.word	0x08003aa1
 8003768:	08003ae7 	.word	0x08003ae7
 800376c:	0800992b 	.word	0x0800992b

08003770 <mcp794xx_basic_get_current_time_date>:
 *          - 0 success
 *          - 1 failed to get time
 * @note    am_pm is don't care when 24hr time format is used
 */
uint8_t mcp794xx_basic_get_current_time_date(mcp794xx_time_t *pTime)
{
 8003770:	b508      	push	{r3, lr}
 8003772:	4601      	mov	r1, r0
   err = mcp794xx_get_time_and_date(&mcp794xx_handler, pTime);
 8003774:	4802      	ldr	r0, [pc, #8]	; (8003780 <mcp794xx_basic_get_current_time_date+0x10>)
 8003776:	f7fe f935 	bl	80019e4 <mcp794xx_get_time_and_date>
 800377a:	4b02      	ldr	r3, [pc, #8]	; (8003784 <mcp794xx_basic_get_current_time_date+0x14>)
 800377c:	7018      	strb	r0, [r3, #0]
   return err; /**< return error code */
}
 800377e:	bd08      	pop	{r3, pc}
 8003780:	200003c0 	.word	0x200003c0
 8003784:	200003bd 	.word	0x200003bd

08003788 <mcp794xx_basic_set_time_format>:
 *          - 0 success
 *          - 1 failed to set time format
 * @note        none
 */
uint8_t mcp794xx_basic_set_time_format(mcp794xx_time_format_t format)
{
 8003788:	b513      	push	{r0, r1, r4, lr}
 800378a:	4602      	mov	r2, r0
    err = mcp794xx_set_hour_format(&mcp794xx_handler, MCP794XX_RTC_HOUR_REG, format);  /**< set the time format for real time clock register */
 800378c:	9001      	str	r0, [sp, #4]
 800378e:	2102      	movs	r1, #2
 8003790:	480a      	ldr	r0, [pc, #40]	; (80037bc <mcp794xx_basic_set_time_format+0x34>)
 8003792:	4c0b      	ldr	r4, [pc, #44]	; (80037c0 <mcp794xx_basic_set_time_format+0x38>)
 8003794:	f7fe f988 	bl	8001aa8 <mcp794xx_set_hour_format>
 8003798:	7020      	strb	r0, [r4, #0]
    if(err != MCP794XX_DRV_OK){
 800379a:	b960      	cbnz	r0, 80037b6 <mcp794xx_basic_set_time_format+0x2e>
      return err; /**< return error code */
    }

    err = mcp794xx_set_hour_format(&mcp794xx_handler, MCP794XX_PWR_DWN_HOUR_REG, format); /**< set time format for power down time stamp */
 800379c:	9a01      	ldr	r2, [sp, #4]
 800379e:	4807      	ldr	r0, [pc, #28]	; (80037bc <mcp794xx_basic_set_time_format+0x34>)
 80037a0:	2119      	movs	r1, #25
 80037a2:	f7fe f981 	bl	8001aa8 <mcp794xx_set_hour_format>
 80037a6:	7020      	strb	r0, [r4, #0]
    if(err != MCP794XX_DRV_OK){
 80037a8:	b928      	cbnz	r0, 80037b6 <mcp794xx_basic_set_time_format+0x2e>
      return err; /**< return error code */
    }

    err = mcp794xx_set_hour_format(&mcp794xx_handler, MCP794XX_PWR_UP_HOUR_REG, format); /**< set time format for power up time stamp */
 80037aa:	9a01      	ldr	r2, [sp, #4]
 80037ac:	4803      	ldr	r0, [pc, #12]	; (80037bc <mcp794xx_basic_set_time_format+0x34>)
 80037ae:	211d      	movs	r1, #29
 80037b0:	f7fe f97a 	bl	8001aa8 <mcp794xx_set_hour_format>
 80037b4:	7020      	strb	r0, [r4, #0]
    if(err != MCP794XX_DRV_OK){
      return err; /**< return error code */
    }

	return err; /**< return error code */
}
 80037b6:	b002      	add	sp, #8
 80037b8:	bd10      	pop	{r4, pc}
 80037ba:	bf00      	nop
 80037bc:	200003c0 	.word	0x200003c0
 80037c0:	200003bd 	.word	0x200003bd

080037c4 <mcp794xx_basic_set_time_date>:
{
 80037c4:	b538      	push	{r3, r4, r5, lr}
 80037c6:	4604      	mov	r4, r0
    err = mcp794xx_basic_set_time_format(pTime->time_Format);
 80037c8:	7a00      	ldrb	r0, [r0, #8]
 80037ca:	4d05      	ldr	r5, [pc, #20]	; (80037e0 <mcp794xx_basic_set_time_date+0x1c>)
 80037cc:	f7ff ffdc 	bl	8003788 <mcp794xx_basic_set_time_format>
 80037d0:	7028      	strb	r0, [r5, #0]
    if(err != MCP794XX_DRV_OK)
 80037d2:	b920      	cbnz	r0, 80037de <mcp794xx_basic_set_time_date+0x1a>
    err = mcp794xx_set_time_and_date(&mcp794xx_handler, pTime);  /**< set time and date */
 80037d4:	4803      	ldr	r0, [pc, #12]	; (80037e4 <mcp794xx_basic_set_time_date+0x20>)
 80037d6:	4621      	mov	r1, r4
 80037d8:	f7fe f9fc 	bl	8001bd4 <mcp794xx_set_time_and_date>
 80037dc:	7028      	strb	r0, [r5, #0]
}
 80037de:	bd38      	pop	{r3, r4, r5, pc}
 80037e0:	200003bd 	.word	0x200003bd
 80037e4:	200003c0 	.word	0x200003c0

080037e8 <mcp794xx_basic_get_pwr_fail_time_stamp>:
 *          - 3 handle is not initialized
 * @note reading or writing the the external battery back up bit will clear the pwr fail time stamp.
         Time stamp should be read at start up before reading or setting current time and date
 */
uint8_t mcp794xx_basic_get_pwr_fail_time_stamp(mcp794xx_pwr_fail_type_t powerMode, mcp794xx_time_t *pTime)
{
 80037e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    mcp794xx_set_pwr_fail_time_param(&mcp794xx_handler);      						/**< set indicator parameters for power fail time stamp */
 80037ea:	4d07      	ldr	r5, [pc, #28]	; (8003808 <mcp794xx_basic_get_pwr_fail_time_stamp+0x20>)
{
 80037ec:	9101      	str	r1, [sp, #4]
 80037ee:	4604      	mov	r4, r0
    mcp794xx_set_pwr_fail_time_param(&mcp794xx_handler);      						/**< set indicator parameters for power fail time stamp */
 80037f0:	4628      	mov	r0, r5
 80037f2:	f7fe fbd3 	bl	8001f9c <mcp794xx_set_pwr_fail_time_param>
    err = mcp794xx_get_pwr_fail_time_stamp(&mcp794xx_handler, powerMode, pTime);
 80037f6:	9a01      	ldr	r2, [sp, #4]
 80037f8:	4621      	mov	r1, r4
 80037fa:	4628      	mov	r0, r5
 80037fc:	f7fe fb62 	bl	8001ec4 <mcp794xx_get_pwr_fail_time_stamp>
 8003800:	4b02      	ldr	r3, [pc, #8]	; (800380c <mcp794xx_basic_get_pwr_fail_time_stamp+0x24>)
 8003802:	7018      	strb	r0, [r3, #0]
    return err; /**< return error code */
}
 8003804:	b003      	add	sp, #12
 8003806:	bd30      	pop	{r4, r5, pc}
 8003808:	200003c0 	.word	0x200003c0
 800380c:	200003bd 	.word	0x200003bd

08003810 <mcp794xx_basic_enable_ext_batt_bckup_pwr>:
 *          - 3 handle is not initialized
 * @note reading or writing the the external battery back up bit will clear the pwr fail time stamp.
         Time stamp should be read at start up before reading or setting current time and date
 */
uint8_t  mcp794xx_basic_enable_ext_batt_bckup_pwr(void)
{
 8003810:	b508      	push	{r3, lr}
    err = mcp794xx_set_ext_batt_enable_status(&mcp794xx_handler, MCP794XX_BOOL_TRUE);
 8003812:	2101      	movs	r1, #1
 8003814:	4802      	ldr	r0, [pc, #8]	; (8003820 <mcp794xx_basic_enable_ext_batt_bckup_pwr+0x10>)
 8003816:	f7ff f90d 	bl	8002a34 <mcp794xx_set_ext_batt_enable_status>
 800381a:	4b02      	ldr	r3, [pc, #8]	; (8003824 <mcp794xx_basic_enable_ext_batt_bckup_pwr+0x14>)
 800381c:	7018      	strb	r0, [r3, #0]
    return err; /**< return error code */
}
 800381e:	bd08      	pop	{r3, pc}
 8003820:	200003c0 	.word	0x200003c0
 8003824:	200003bd 	.word	0x200003bd

08003828 <mcp794xx_basic_enable_alarm>:
*          - 1 failed
           - 2 handle null
*          - 3 handle is not initialized
*/
uint8_t mcp794xx_basic_enable_alarm(mcp794xx_alarm_t alarm, mcp794xx_int_output_polarity_t polarity)
{
 8003828:	b570      	push	{r4, r5, r6, lr}
    err = mcp794xx_set_alarm_enable_status(&mcp794xx_handler, alarm, MCP794XX_BOOL_TRUE);
 800382a:	2201      	movs	r2, #1
{
 800382c:	4604      	mov	r4, r0
 800382e:	460d      	mov	r5, r1
    err = mcp794xx_set_alarm_enable_status(&mcp794xx_handler, alarm, MCP794XX_BOOL_TRUE);
 8003830:	4601      	mov	r1, r0
 8003832:	4806      	ldr	r0, [pc, #24]	; (800384c <mcp794xx_basic_enable_alarm+0x24>)
 8003834:	4e06      	ldr	r6, [pc, #24]	; (8003850 <mcp794xx_basic_enable_alarm+0x28>)
 8003836:	f7fe fbf5 	bl	8002024 <mcp794xx_set_alarm_enable_status>
 800383a:	7030      	strb	r0, [r6, #0]
    if(err != MCP794XX_DRV_OK)
 800383c:	b928      	cbnz	r0, 800384a <mcp794xx_basic_enable_alarm+0x22>
    {
    	return err; /**< return error code */
    }

    err = mcp794xx_set_alarm_interrupt_output_polarity(&mcp794xx_handler, alarm, polarity);
 800383e:	4803      	ldr	r0, [pc, #12]	; (800384c <mcp794xx_basic_enable_alarm+0x24>)
 8003840:	462a      	mov	r2, r5
 8003842:	4621      	mov	r1, r4
 8003844:	f7fe fc3c 	bl	80020c0 <mcp794xx_set_alarm_interrupt_output_polarity>
 8003848:	7030      	strb	r0, [r6, #0]
    return err; /**< return error code */
}
 800384a:	bd70      	pop	{r4, r5, r6, pc}
 800384c:	200003c0 	.word	0x200003c0
 8003850:	200003bd 	.word	0x200003bd

08003854 <mcp794xx_basic_set_alarm_time_date>:
 *          - 4 invalid alarm
 *          - 5 invalid mask
 * @note prior to this function to be called, the "mcp794xx_basic_enable_alarm" to enable interrupt and set polarity
 */
uint8_t mcp794xx_basic_set_alarm_time_date(mcp794xx_alarm_t alarm, mcp794xx_alarm_mask_t mask, mcp794xx_time_t *pTime)
{
 8003854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003856:	4f0c      	ldr	r7, [pc, #48]	; (8003888 <mcp794xx_basic_set_alarm_time_date+0x34>)
 8003858:	460e      	mov	r6, r1
 800385a:	4614      	mov	r4, r2
	if(alarm == MCP794XX_ALARM0){
 800385c:	4605      	mov	r5, r0
 800385e:	b970      	cbnz	r0, 800387e <mcp794xx_basic_set_alarm_time_date+0x2a>
		err = mcp794xx_set_hour_format(&mcp794xx_handler, MCP794XX_ALM0_HOUR_REG, pTime->time_Format);
 8003860:	7a12      	ldrb	r2, [r2, #8]
 8003862:	210c      	movs	r1, #12
 8003864:	4809      	ldr	r0, [pc, #36]	; (800388c <mcp794xx_basic_set_alarm_time_date+0x38>)
 8003866:	f7fe f91f 	bl	8001aa8 <mcp794xx_set_hour_format>
 800386a:	7038      	strb	r0, [r7, #0]
		if(err){return err; /**< return error code */}
 800386c:	b930      	cbnz	r0, 800387c <mcp794xx_basic_set_alarm_time_date+0x28>
		if(err != MCP794XX_DRV_OK)
		{
			return err; /**< return error code */
		}
	}
    err = mcp794xx_set_alarm(&mcp794xx_handler, alarm, mask, pTime);
 800386e:	4807      	ldr	r0, [pc, #28]	; (800388c <mcp794xx_basic_set_alarm_time_date+0x38>)
 8003870:	4623      	mov	r3, r4
 8003872:	4632      	mov	r2, r6
 8003874:	4629      	mov	r1, r5
 8003876:	f7fe fe2b 	bl	80024d0 <mcp794xx_set_alarm>
 800387a:	7038      	strb	r0, [r7, #0]
    return err; /**< return error code */
}
 800387c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}else if(alarm == MCP794XX_ALARM1)
 800387e:	2801      	cmp	r0, #1
 8003880:	d1f5      	bne.n	800386e <mcp794xx_basic_set_alarm_time_date+0x1a>
		err = mcp794xx_set_hour_format(&mcp794xx_handler, MCP794XX_ALM1_HOUR_REG, pTime->time_Format);
 8003882:	7a12      	ldrb	r2, [r2, #8]
 8003884:	2113      	movs	r1, #19
 8003886:	e7ed      	b.n	8003864 <mcp794xx_basic_set_alarm_time_date+0x10>
 8003888:	200003bd 	.word	0x200003bd
 800388c:	200003c0 	.word	0x200003c0

08003890 <mcp794xx_basic_get_alarm_time_date>:
            - 2 handle null
 *          - 3 handle is not initialized
 *          - 4 invalid alarm
 */
uint8_t mcp794xx_basic_get_alarm_time_date(mcp794xx_alarm_t alarm, mcp794xx_alarm_mask_t *pMask, mcp794xx_time_t *pTime)
{
 8003890:	b508      	push	{r3, lr}
 8003892:	4613      	mov	r3, r2
    err = mcp794xx_get_alarm(&mcp794xx_handler, alarm, pMask, pTime);
 8003894:	460a      	mov	r2, r1
 8003896:	4601      	mov	r1, r0
 8003898:	4802      	ldr	r0, [pc, #8]	; (80038a4 <mcp794xx_basic_get_alarm_time_date+0x14>)
 800389a:	f7fe ff0d 	bl	80026b8 <mcp794xx_get_alarm>
 800389e:	4b02      	ldr	r3, [pc, #8]	; (80038a8 <mcp794xx_basic_get_alarm_time_date+0x18>)
 80038a0:	7018      	strb	r0, [r3, #0]
    return err; /**< return error code */
}
 80038a2:	bd08      	pop	{r3, pc}
 80038a4:	200003c0 	.word	0x200003c0
 80038a8:	200003bd 	.word	0x200003bd

080038ac <mcp794xx_basic_get_alarm_interrupt_flag>:
            - 2 handle null
 *          - 3 handle is not initialized
 *          - 4 invalid alarm
 */
uint8_t mcp794xx_basic_get_alarm_interrupt_flag(mcp794xx_alarm_t alarm, mcp794xx_alarm_int_flag_t *pFlag)
{
 80038ac:	b508      	push	{r3, lr}
 80038ae:	460a      	mov	r2, r1
    err = mcp794xx_get_alarm_interrupt_flag(&mcp794xx_handler, alarm, pFlag);
 80038b0:	4601      	mov	r1, r0
 80038b2:	4803      	ldr	r0, [pc, #12]	; (80038c0 <mcp794xx_basic_get_alarm_interrupt_flag+0x14>)
 80038b4:	f7fe ff48 	bl	8002748 <mcp794xx_get_alarm_interrupt_flag>
 80038b8:	4b02      	ldr	r3, [pc, #8]	; (80038c4 <mcp794xx_basic_get_alarm_interrupt_flag+0x18>)
 80038ba:	7018      	strb	r0, [r3, #0]
    return err; /**< return error code */
}
 80038bc:	bd08      	pop	{r3, pc}
 80038be:	bf00      	nop
 80038c0:	200003c0 	.word	0x200003c0
 80038c4:	200003bd 	.word	0x200003bd

080038c8 <mcp794xx_basic_clr_alarm_interrupt_flag>:
 *          - 1 failed
            - 2 handle null
 *          - 3 handle is not initialized
 */
uint8_t mcp794xx_basic_clr_alarm_interrupt_flag(mcp794xx_alarm_t alarm)
{
 80038c8:	b508      	push	{r3, lr}
 80038ca:	4601      	mov	r1, r0
    err = mcp794xx_clr_alarm_interrupt_flag(&mcp794xx_handler,alarm);
 80038cc:	4802      	ldr	r0, [pc, #8]	; (80038d8 <mcp794xx_basic_clr_alarm_interrupt_flag+0x10>)
 80038ce:	f7fe ff7d 	bl	80027cc <mcp794xx_clr_alarm_interrupt_flag>
 80038d2:	4b02      	ldr	r3, [pc, #8]	; (80038dc <mcp794xx_basic_clr_alarm_interrupt_flag+0x14>)
 80038d4:	7018      	strb	r0, [r3, #0]
    return err; /**< return error code */
}
 80038d6:	bd08      	pop	{r3, pc}
 80038d8:	200003c0 	.word	0x200003c0
 80038dc:	200003bd 	.word	0x200003bd

080038e0 <mcp794xx_basic_enable_countdown_interrupt>:
 *            - 2 pHandle is NULL
 *            - 3 pHandle is not initialized
 * @note      This function use ALARM1 and overwrite existing data within register
 */
uint8_t mcp794xx_basic_enable_countdown_interrupt(void)
{
 80038e0:	b508      	push	{r3, lr}
    err = mcp794xx_set_countdown_interrupt_enable_status(&mcp794xx_handler, MCP794XX_BOOL_TRUE);
 80038e2:	2101      	movs	r1, #1
 80038e4:	4802      	ldr	r0, [pc, #8]	; (80038f0 <mcp794xx_basic_enable_countdown_interrupt+0x10>)
 80038e6:	f7ff fafb 	bl	8002ee0 <mcp794xx_set_countdown_interrupt_enable_status>
 80038ea:	4b02      	ldr	r3, [pc, #8]	; (80038f4 <mcp794xx_basic_enable_countdown_interrupt+0x14>)
 80038ec:	7018      	strb	r0, [r3, #0]
    return err;
}
 80038ee:	bd08      	pop	{r3, pc}
 80038f0:	200003c0 	.word	0x200003c0
 80038f4:	200003bd 	.word	0x200003bd

080038f8 <mcp794xx_basic_set_countdown_time>:
 *            - "mcp794xx_set_countdown_interrupt_enable_status"  must be called before using this function
 *            - Time and date must be set prior to calling this function
 *            - day of the week must be accurate when setting time
 */
uint8_t mcp794xx_basic_set_countdown_time(uint16_t u16Time_value, mcp794xx_countdwon_time_unit_t time_unit)
{
 80038f8:	b508      	push	{r3, lr}
 80038fa:	460a      	mov	r2, r1
    err = mcp794xx_set_countdown_interrupt_time(&mcp794xx_handler, u16Time_value, time_unit);
 80038fc:	4601      	mov	r1, r0
 80038fe:	4803      	ldr	r0, [pc, #12]	; (800390c <mcp794xx_basic_set_countdown_time+0x14>)
 8003900:	f7ff fb18 	bl	8002f34 <mcp794xx_set_countdown_interrupt_time>
 8003904:	4b02      	ldr	r3, [pc, #8]	; (8003910 <mcp794xx_basic_set_countdown_time+0x18>)
 8003906:	7018      	strb	r0, [r3, #0]
    return err;
}
 8003908:	bd08      	pop	{r3, pc}
 800390a:	bf00      	nop
 800390c:	200003c0 	.word	0x200003c0
 8003910:	200003bd 	.word	0x200003bd

08003914 <mcp794xx_basic_enable_sqr_wave_output>:
 *          - 1 failed
            - 2 handle null
 *          - 3 handle is not initialized
 */
uint8_t mcp794xx_basic_enable_sqr_wave_output(void)
{
 8003914:	b508      	push	{r3, lr}
    err = mcp794xx_set_sqr_wave_enable_status(&mcp794xx_handler, MCP794XX_BOOL_TRUE);
 8003916:	2101      	movs	r1, #1
 8003918:	4802      	ldr	r0, [pc, #8]	; (8003924 <mcp794xx_basic_enable_sqr_wave_output+0x10>)
 800391a:	f7ff f81f 	bl	800295c <mcp794xx_set_sqr_wave_enable_status>
 800391e:	4b02      	ldr	r3, [pc, #8]	; (8003928 <mcp794xx_basic_enable_sqr_wave_output+0x14>)
 8003920:	7018      	strb	r0, [r3, #0]
    return err; /**< return error code */
}
 8003922:	bd08      	pop	{r3, pc}
 8003924:	200003c0 	.word	0x200003c0
 8003928:	200003bd 	.word	0x200003bd

0800392c <mcp94xx_basic_set_sqr_wave_output_freq>:
            - 2 handle null
 *          - 3 handle is not initialized
 * @note prior to setting frequency output, the "mcp794xx_basic_enable_sqr_wave_output" must called first to enable this feature.
 */
uint8_t mcp94xx_basic_set_sqr_wave_output_freq(mcp94xx_sqr_wave_freq_t freq)
{
 800392c:	b508      	push	{r3, lr}
 800392e:	4601      	mov	r1, r0
    err = mcp94xx_set_sqr_wave_output_freq(&mcp794xx_handler,freq);
 8003930:	4802      	ldr	r0, [pc, #8]	; (800393c <mcp94xx_basic_set_sqr_wave_output_freq+0x10>)
 8003932:	f7fe ffdf 	bl	80028f4 <mcp94xx_set_sqr_wave_output_freq>
 8003936:	4b02      	ldr	r3, [pc, #8]	; (8003940 <mcp94xx_basic_set_sqr_wave_output_freq+0x14>)
 8003938:	7018      	strb	r0, [r3, #0]
    return err; /**< return error code */
}
 800393a:	bd08      	pop	{r3, pc}
 800393c:	200003c0 	.word	0x200003c0
 8003940:	200003bd 	.word	0x200003bd

08003944 <mcp794xx_basic_convert_time_to_epoch_unix_time>:
 *            - 2 pHandle is NULL
 *            - 3 pHandle is not initialized
 * @note      This function will fail to execute from January 19, 2038
 */
uint8_t mcp794xx_basic_convert_time_to_epoch_unix_time(mcp794xx_time_t *pTime, uint32_t *pEpoch_time)
{
 8003944:	b508      	push	{r3, lr}
 8003946:	460a      	mov	r2, r1
    err = mcp794xx_read_epoch_unix_time_stamp(&mcp794xx_handler, pTime, (uint32_t *)pEpoch_time);
 8003948:	4601      	mov	r1, r0
 800394a:	4803      	ldr	r0, [pc, #12]	; (8003958 <mcp794xx_basic_convert_time_to_epoch_unix_time+0x14>)
 800394c:	f7ff f912 	bl	8002b74 <mcp794xx_read_epoch_unix_time_stamp>
 8003950:	4b02      	ldr	r3, [pc, #8]	; (800395c <mcp794xx_basic_convert_time_to_epoch_unix_time+0x18>)
 8003952:	7018      	strb	r0, [r3, #0]
    return err; /**< return error code */
}
 8003954:	bd08      	pop	{r3, pc}
 8003956:	bf00      	nop
 8003958:	200003c0 	.word	0x200003c0
 800395c:	200003bd 	.word	0x200003bd

08003960 <mcp794xx_basic_convert_epoch_to_human_time_format>:
 *            - 2 pHandle is NULL
 *            - 3 pHandle is not initialized
 * @note      This function will fail to execute from January 19, 2038
 */
uint8_t mcp794xx_basic_convert_epoch_to_human_time_format(uint32_t epoch_unix_time, mcp794xx_time_t *pTime)
{
 8003960:	b508      	push	{r3, lr}
 8003962:	460a      	mov	r2, r1
	err = mcp794xx_convert_epoch_unix_time_stamp(&mcp794xx_handler, epoch_unix_time, pTime);
 8003964:	4601      	mov	r1, r0
 8003966:	4803      	ldr	r0, [pc, #12]	; (8003974 <mcp794xx_basic_convert_epoch_to_human_time_format+0x14>)
 8003968:	f7ff f946 	bl	8002bf8 <mcp794xx_convert_epoch_unix_time_stamp>
 800396c:	4b02      	ldr	r3, [pc, #8]	; (8003978 <mcp794xx_basic_convert_epoch_to_human_time_format+0x18>)
 800396e:	7018      	strb	r0, [r3, #0]
	return err; /**< return error code */
}
 8003970:	bd08      	pop	{r3, pc}
 8003972:	bf00      	nop
 8003974:	200003c0 	.word	0x200003c0
 8003978:	200003bd 	.word	0x200003bd

0800397c <mcp794xx_basic_get_compile_time_date>:
 *             - 2 handle or time is NULL
 *             - 3 handle is not initialized
 * @note       this function returns time in 24Hr format
 */
uint8_t mcp794xx_basic_get_compile_time_date(char *pCompile_time, char *pCompile_date, mcp794xx_time_t *pTime)
{
 800397c:	b508      	push	{r3, lr}
 800397e:	4613      	mov	r3, r2
	err = mcp794xx_get_compile_time_date(&mcp794xx_handler, pCompile_time, pCompile_date, pTime);
 8003980:	460a      	mov	r2, r1
 8003982:	4601      	mov	r1, r0
 8003984:	4802      	ldr	r0, [pc, #8]	; (8003990 <mcp794xx_basic_get_compile_time_date+0x14>)
 8003986:	f7ff f9e3 	bl	8002d50 <mcp794xx_get_compile_time_date>
 800398a:	4b02      	ldr	r3, [pc, #8]	; (8003994 <mcp794xx_basic_get_compile_time_date+0x18>)
 800398c:	7018      	strb	r0, [r3, #0]
	return err;
}
 800398e:	bd08      	pop	{r3, pc}
 8003990:	200003c0 	.word	0x200003c0
 8003994:	200003bd 	.word	0x200003bd

08003998 <mcp794xx_basic_sram_write_byte>:
*          - 3 pHandle is not initialized
*          - 4 invalid address
* @note none
*/
uint8_t mcp794xx_basic_sram_write_byte(uint8_t addr, uint8_t *pBuffer, size_t length)
{
 8003998:	b508      	push	{r3, lr}
 800399a:	4613      	mov	r3, r2
	err = mcp794xx_sram_write_byte(&mcp794xx_handler, addr, (uint8_t *)pBuffer, length);
 800399c:	460a      	mov	r2, r1
 800399e:	4601      	mov	r1, r0
 80039a0:	4802      	ldr	r0, [pc, #8]	; (80039ac <mcp794xx_basic_sram_write_byte+0x14>)
 80039a2:	f7ff fb69 	bl	8003078 <mcp794xx_sram_write_byte>
 80039a6:	4b02      	ldr	r3, [pc, #8]	; (80039b0 <mcp794xx_basic_sram_write_byte+0x18>)
 80039a8:	7018      	strb	r0, [r3, #0]
	return err; /**< return error code */
}
 80039aa:	bd08      	pop	{r3, pc}
 80039ac:	200003c0 	.word	0x200003c0
 80039b0:	200003bd 	.word	0x200003bd

080039b4 <mcp794xx_basic_sram_read_byte>:
*          - 3 pHandle is not initialized
*          - 4 invalid address
* @note none
*/
uint8_t mcp794xx_basic_sram_read_byte(uint8_t addr, uint8_t *pBuffer, size_t length)
{
 80039b4:	b508      	push	{r3, lr}
 80039b6:	4613      	mov	r3, r2
	err = mcp794xx_sram_read_byte(&mcp794xx_handler, addr, (uint8_t *)pBuffer, length);
 80039b8:	460a      	mov	r2, r1
 80039ba:	4601      	mov	r1, r0
 80039bc:	4802      	ldr	r0, [pc, #8]	; (80039c8 <mcp794xx_basic_sram_read_byte+0x14>)
 80039be:	f7ff fb95 	bl	80030ec <mcp794xx_sram_read_byte>
 80039c2:	4b02      	ldr	r3, [pc, #8]	; (80039cc <mcp794xx_basic_sram_read_byte+0x18>)
 80039c4:	7018      	strb	r0, [r3, #0]
	return err; /**< return error code */
}
 80039c6:	bd08      	pop	{r3, pc}
 80039c8:	200003c0 	.word	0x200003c0
 80039cc:	200003bd 	.word	0x200003bd

080039d0 <mcp794xx_basic_sram_erase_selector>:
*          - 3 pHandle is not initialized
*          - 4 invalid address
* @note data from the start to the end address will be erased
*/
uint8_t mcp794xx_basic_sram_erase_selector(uint8_t start_addr, uint8_t end_addr)
{
 80039d0:	b508      	push	{r3, lr}
 80039d2:	460a      	mov	r2, r1
	err = mcp794xx_sram_erase_selector(&mcp794xx_handler, start_addr, end_addr);
 80039d4:	4601      	mov	r1, r0
 80039d6:	4803      	ldr	r0, [pc, #12]	; (80039e4 <mcp794xx_basic_sram_erase_selector+0x14>)
 80039d8:	f7ff fbc0 	bl	800315c <mcp794xx_sram_erase_selector>
 80039dc:	4b02      	ldr	r3, [pc, #8]	; (80039e8 <mcp794xx_basic_sram_erase_selector+0x18>)
 80039de:	7018      	strb	r0, [r3, #0]
	return err;
}
 80039e0:	bd08      	pop	{r3, pc}
 80039e2:	bf00      	nop
 80039e4:	200003c0 	.word	0x200003c0
 80039e8:	200003bd 	.word	0x200003bd

080039ec <mcp794xx_basic_sram_wipe>:
*          - 2 pHandle is NULL
*          - 3 pHandle is not initialized
* @note none
*/
uint8_t mcp794xx_basic_sram_wipe(void)
{
 80039ec:	b508      	push	{r3, lr}
	err = mcp794xx_wipe_sram(&mcp794xx_handler);
 80039ee:	4803      	ldr	r0, [pc, #12]	; (80039fc <mcp794xx_basic_sram_wipe+0x10>)
 80039f0:	f7ff fbf2 	bl	80031d8 <mcp794xx_wipe_sram>
 80039f4:	4b02      	ldr	r3, [pc, #8]	; (8003a00 <mcp794xx_basic_sram_wipe+0x14>)
 80039f6:	7018      	strb	r0, [r3, #0]
	return err; /**< return error code */
}
 80039f8:	bd08      	pop	{r3, pc}
 80039fa:	bf00      	nop
 80039fc:	200003c0 	.word	0x200003c0
 8003a00:	200003bd 	.word	0x200003bd

08003a04 <mcp794xx_basic_uid_read>:
 *            - 2 pHandle is NULL
 *            - 3 pHandle is not initialized
 * @note      none
 */
uint8_t mcp794xx_basic_uid_read(uint8_t *pUID)
{
 8003a04:	b508      	push	{r3, lr}
 8003a06:	4601      	mov	r1, r0
	err = mcp794xx_uid_read(&mcp794xx_handler,(uint8_t*)pUID);
 8003a08:	4802      	ldr	r0, [pc, #8]	; (8003a14 <mcp794xx_basic_uid_read+0x10>)
 8003a0a:	f7ff fae5 	bl	8002fd8 <mcp794xx_uid_read>
 8003a0e:	4b02      	ldr	r3, [pc, #8]	; (8003a18 <mcp794xx_basic_uid_read+0x14>)
 8003a10:	7018      	strb	r0, [r3, #0]
	return err; /**< return error code */
}
 8003a12:	bd08      	pop	{r3, pc}
 8003a14:	200003c0 	.word	0x200003c0
 8003a18:	200003bd 	.word	0x200003bd

08003a1c <mcp794xx_basic_eeprom_write_byte>:
 *            - 5 attempt to write a protected block array
 *            - 6 data length is larger than page size
 * @note      the eeprom has a 5ms write cycle time.
 */
uint8_t mcp794xx_basic_eeprom_write_byte(uint8_t u8Addr, uint8_t *pBuf, size_t length)
{
 8003a1c:	b508      	push	{r3, lr}
	err = mcp794xx_eeprom_write_byte(&mcp794xx_handler, u8Addr, (uint8_t *)pBuf, length);
 8003a1e:	b2d3      	uxtb	r3, r2
 8003a20:	460a      	mov	r2, r1
 8003a22:	4601      	mov	r1, r0
 8003a24:	4802      	ldr	r0, [pc, #8]	; (8003a30 <mcp794xx_basic_eeprom_write_byte+0x14>)
 8003a26:	f7ff fc99 	bl	800335c <mcp794xx_eeprom_write_byte>
 8003a2a:	4b02      	ldr	r3, [pc, #8]	; (8003a34 <mcp794xx_basic_eeprom_write_byte+0x18>)
 8003a2c:	7018      	strb	r0, [r3, #0]
	return err; /**< return error code */
}
 8003a2e:	bd08      	pop	{r3, pc}
 8003a30:	200003c0 	.word	0x200003c0
 8003a34:	200003bd 	.word	0x200003bd

08003a38 <mcp794xx_basic_eeprom_read_byte>:
 *            - 3 handle is not initialized
 *            - 4 invalid address
 * @note      none
 */
uint8_t mcp794xx_basic_eeprom_read_byte(uint8_t u8Addr, uint8_t *pBuf, size_t length)
{
 8003a38:	b508      	push	{r3, lr}
	err = mcp794xx_eeprom_read_byte(&mcp794xx_handler, u8Addr, (uint8_t *)pBuf, length);
 8003a3a:	b2d3      	uxtb	r3, r2
 8003a3c:	460a      	mov	r2, r1
 8003a3e:	4601      	mov	r1, r0
 8003a40:	4802      	ldr	r0, [pc, #8]	; (8003a4c <mcp794xx_basic_eeprom_read_byte+0x14>)
 8003a42:	f7ff fbed 	bl	8003220 <mcp794xx_eeprom_read_byte>
 8003a46:	4b02      	ldr	r3, [pc, #8]	; (8003a50 <mcp794xx_basic_eeprom_read_byte+0x18>)
 8003a48:	7018      	strb	r0, [r3, #0]
	return err; /**< return error code */
}
 8003a4a:	bd08      	pop	{r3, pc}
 8003a4c:	200003c0 	.word	0x200003c0
 8003a50:	200003bd 	.word	0x200003bd

08003a54 <mcp794xx_basic_eeprom_put_byte>:
 *            - 6 data length is larger than page can contain
 * @note      none
 */

uint8_t mcp794xx_basic_eeprom_put_byte(uint8_t u8Addr, uint32_t *pBuf, uint8_t u8Length)
{
 8003a54:	b508      	push	{r3, lr}
 8003a56:	4613      	mov	r3, r2
	err = mcp794xx_eeprom_put_byte(&mcp794xx_handler, u8Addr, (uint32_t *)pBuf, u8Length);
 8003a58:	460a      	mov	r2, r1
 8003a5a:	4601      	mov	r1, r0
 8003a5c:	4802      	ldr	r0, [pc, #8]	; (8003a68 <mcp794xx_basic_eeprom_put_byte+0x14>)
 8003a5e:	f7ff fd0b 	bl	8003478 <mcp794xx_eeprom_put_byte>
 8003a62:	4b02      	ldr	r3, [pc, #8]	; (8003a6c <mcp794xx_basic_eeprom_put_byte+0x18>)
 8003a64:	7018      	strb	r0, [r3, #0]
	return err; /**< return error code */
}
 8003a66:	bd08      	pop	{r3, pc}
 8003a68:	200003c0 	.word	0x200003c0
 8003a6c:	200003bd 	.word	0x200003bd

08003a70 <mcp794xx_basic_eeprom_get_byte>:
 *            - 4 invalid address (failed to validate address)
 * @note      none
 */

uint8_t mcp794xx_basic_eeprom_get_byte(uint8_t u8Addr, uint32_t *pBuf, uint8_t u8Length)
{
 8003a70:	b508      	push	{r3, lr}
 8003a72:	4613      	mov	r3, r2
	err = mcp794xx_eeprom_get_byte(&mcp794xx_handler, u8Addr, (uint32_t *)pBuf, u8Length);
 8003a74:	460a      	mov	r2, r1
 8003a76:	4601      	mov	r1, r0
 8003a78:	4802      	ldr	r0, [pc, #8]	; (8003a84 <mcp794xx_basic_eeprom_get_byte+0x14>)
 8003a7a:	f7ff fd4d 	bl	8003518 <mcp794xx_eeprom_get_byte>
 8003a7e:	4b02      	ldr	r3, [pc, #8]	; (8003a88 <mcp794xx_basic_eeprom_get_byte+0x18>)
 8003a80:	7018      	strb	r0, [r3, #0]
	return err; /**< return error code */
}
 8003a82:	bd08      	pop	{r3, pc}
 8003a84:	200003c0 	.word	0x200003c0
 8003a88:	200003bd 	.word	0x200003bd

08003a8c <mcp794xx_interface_i2c_init>:
    /*call your i2c initialize function here*/
    /*user code begin */

    /*user code end*/
    return 0; /**< success */
}
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	4770      	bx	lr

08003a90 <mcp794xx_interface_i2c_deinit>:
 8003a90:	2000      	movs	r0, #0
 8003a92:	4770      	bx	lr

08003a94 <mcp794xx_interface_i2c_read>:
 */
uint8_t mcp794xx_interface_i2c_read(uint8_t u8Addr, uint8_t *pBuf, uint8_t u8Length)
{
    /*call your i2c read function here*/
    /*user code begin */
	err = i2c_read(u8Addr, pBuf, u8Length);
 8003a94:	f7fd bd6c 	b.w	8001570 <i2c_read>

08003a98 <mcp794xx_interface_i2c_write>:
 */
uint8_t mcp794xx_interface_i2c_write(uint8_t u8Addr, uint8_t *pBuf, uint8_t u8Length)
{
    /*call your i2c write function here*/
    /*user code begin */
	err = i2c_write(u8Addr, pBuf, u8Length);
 8003a98:	f7fd bd5a 	b.w	8001550 <i2c_write>

08003a9c <mcp794xx_interface_delay_ms>:
 */
void mcp794xx_interface_delay_ms(uint32_t u32Ms)
{
    /*call your delay function here*/
    /*user code begin */
	HAL_Delay(u32Ms);
 8003a9c:	f000 b86c 	b.w	8003b78 <HAL_Delay>

08003aa0 <mcp794xx_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void mcp794xx_interface_debug_print(const char *const fmt, ...)
{
 8003aa0:	b40f      	push	{r0, r1, r2, r3}
 8003aa2:	b570      	push	{r4, r5, r6, lr}
 8003aa4:	b0a2      	sub	sp, #136	; 0x88
 8003aa6:	ac26      	add	r4, sp, #152	; 0x98
#ifdef MCP794XX_DEBUG_MODE
    volatile char str[MCP794XX_DEBUG_PRINT_BUFFER_SIZE_128B];
    volatile uint8_t len;
    va_list args;

    memset((char *) str, 0, sizeof (char) * MCP794XX_DEBUG_PRINT_BUFFER_SIZE_128B);
 8003aa8:	2580      	movs	r5, #128	; 0x80
{
 8003aaa:	f854 6b04 	ldr.w	r6, [r4], #4
    memset((char *) str, 0, sizeof (char) * MCP794XX_DEBUG_PRINT_BUFFER_SIZE_128B);
 8003aae:	462a      	mov	r2, r5
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	a802      	add	r0, sp, #8
 8003ab4:	f001 fd86 	bl	80055c4 <memset>
    va_start(args, fmt);
    vsnprintf((char *) str, MCP794XX_DEBUG_PRINT_BUFFER_SIZE_128B, (char const *) fmt, args);
 8003ab8:	4623      	mov	r3, r4
 8003aba:	4632      	mov	r2, r6
 8003abc:	4629      	mov	r1, r5
 8003abe:	a802      	add	r0, sp, #8
    va_start(args, fmt);
 8003ac0:	9401      	str	r4, [sp, #4]
    vsnprintf((char *) str, MCP794XX_DEBUG_PRINT_BUFFER_SIZE_128B, (char const *) fmt, args);
 8003ac2:	f002 fbc3 	bl	800624c <vsniprintf>
    va_end(args);

    len = strlen((char *) str);
 8003ac6:	a802      	add	r0, sp, #8
 8003ac8:	f7fc fb82 	bl	80001d0 <strlen>
 8003acc:	b2c0      	uxtb	r0, r0
 8003ace:	f88d 0003 	strb.w	r0, [sp, #3]
    (void)serial_print((uint8_t *)str, len);                     /**< example of printf function, comment out if used */
 8003ad2:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8003ad6:	a802      	add	r0, sp, #8
 8003ad8:	f7fd fd30 	bl	800153c <serial_print>

    /*user code end*/
#endif
}
 8003adc:	b022      	add	sp, #136	; 0x88
 8003ade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003ae2:	b004      	add	sp, #16
 8003ae4:	4770      	bx	lr

08003ae6 <mcp794xx_interface_irq_callback>:

    }

    /*user code end*/

}
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ae8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003aea:	4b0f      	ldr	r3, [pc, #60]	; (8003b28 <HAL_InitTick+0x40>)
{
 8003aec:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8003aee:	7818      	ldrb	r0, [r3, #0]
 8003af0:	b908      	cbnz	r0, 8003af6 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003af2:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8003af4:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003af6:	4a0d      	ldr	r2, [pc, #52]	; (8003b2c <HAL_InitTick+0x44>)
 8003af8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003afc:	fbb3 f3f0 	udiv	r3, r3, r0
 8003b00:	6810      	ldr	r0, [r2, #0]
 8003b02:	fbb0 f0f3 	udiv	r0, r0, r3
 8003b06:	f000 f88f 	bl	8003c28 <HAL_SYSTICK_Config>
 8003b0a:	4604      	mov	r4, r0
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	d1f0      	bne.n	8003af2 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b10:	2d0f      	cmp	r5, #15
 8003b12:	d8ee      	bhi.n	8003af2 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b14:	4602      	mov	r2, r0
 8003b16:	4629      	mov	r1, r5
 8003b18:	f04f 30ff 	mov.w	r0, #4294967295
 8003b1c:	f000 f852 	bl	8003bc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b20:	4b03      	ldr	r3, [pc, #12]	; (8003b30 <HAL_InitTick+0x48>)
 8003b22:	4620      	mov	r0, r4
 8003b24:	601d      	str	r5, [r3, #0]
  return status;
 8003b26:	e7e5      	b.n	8003af4 <HAL_InitTick+0xc>
 8003b28:	20000018 	.word	0x20000018
 8003b2c:	20000014 	.word	0x20000014
 8003b30:	2000001c 	.word	0x2000001c

08003b34 <HAL_Init>:
{
 8003b34:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b36:	2003      	movs	r0, #3
 8003b38:	f000 f832 	bl	8003ba0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b3c:	200f      	movs	r0, #15
 8003b3e:	f7ff ffd3 	bl	8003ae8 <HAL_InitTick>
 8003b42:	4604      	mov	r4, r0
 8003b44:	b918      	cbnz	r0, 8003b4e <HAL_Init+0x1a>
    HAL_MspInit();
 8003b46:	f7fd fd25 	bl	8001594 <HAL_MspInit>
}
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8003b4e:	2401      	movs	r4, #1
 8003b50:	e7fb      	b.n	8003b4a <HAL_Init+0x16>
	...

08003b54 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003b54:	4a03      	ldr	r2, [pc, #12]	; (8003b64 <HAL_IncTick+0x10>)
 8003b56:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <HAL_IncTick+0x14>)
 8003b58:	6811      	ldr	r1, [r2, #0]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	440b      	add	r3, r1
 8003b5e:	6013      	str	r3, [r2, #0]
}
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	20000434 	.word	0x20000434
 8003b68:	20000018 	.word	0x20000018

08003b6c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003b6c:	4b01      	ldr	r3, [pc, #4]	; (8003b74 <HAL_GetTick+0x8>)
 8003b6e:	6818      	ldr	r0, [r3, #0]
}
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	20000434 	.word	0x20000434

08003b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b78:	b538      	push	{r3, r4, r5, lr}
 8003b7a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003b7c:	f7ff fff6 	bl	8003b6c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b80:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8003b82:	bf1c      	itt	ne
 8003b84:	4b05      	ldrne	r3, [pc, #20]	; (8003b9c <HAL_Delay+0x24>)
 8003b86:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8003b88:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 8003b8a:	bf18      	it	ne
 8003b8c:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b8e:	f7ff ffed 	bl	8003b6c <HAL_GetTick>
 8003b92:	1b43      	subs	r3, r0, r5
 8003b94:	42a3      	cmp	r3, r4
 8003b96:	d3fa      	bcc.n	8003b8e <HAL_Delay+0x16>
  {
  }
}
 8003b98:	bd38      	pop	{r3, r4, r5, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20000018 	.word	0x20000018

08003ba0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ba0:	4907      	ldr	r1, [pc, #28]	; (8003bc0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003ba2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ba4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ba8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003baa:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bb0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003bbc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003bbe:	4770      	bx	lr
 8003bc0:	e000ed00 	.word	0xe000ed00

08003bc4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bc4:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bc6:	b530      	push	{r4, r5, lr}
 8003bc8:	68dc      	ldr	r4, [r3, #12]
 8003bca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bce:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bd2:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bd4:	2d04      	cmp	r5, #4
 8003bd6:	bf28      	it	cs
 8003bd8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bda:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bdc:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003be0:	bf8c      	ite	hi
 8003be2:	3c03      	subhi	r4, #3
 8003be4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be6:	fa03 f505 	lsl.w	r5, r3, r5
 8003bea:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bee:	40a3      	lsls	r3, r4
 8003bf0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf4:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8003bf6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf8:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bfc:	bfac      	ite	ge
 8003bfe:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c02:	4a08      	ldrlt	r2, [pc, #32]	; (8003c24 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c04:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c08:	bfb8      	it	lt
 8003c0a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	bfaa      	itet	ge
 8003c12:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c16:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c18:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003c1c:	bd30      	pop	{r4, r5, pc}
 8003c1e:	bf00      	nop
 8003c20:	e000ed00 	.word	0xe000ed00
 8003c24:	e000ed14 	.word	0xe000ed14

08003c28 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c28:	3801      	subs	r0, #1
 8003c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003c2e:	d20b      	bcs.n	8003c48 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c30:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c34:	4a05      	ldr	r2, [pc, #20]	; (8003c4c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c36:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c38:	21f0      	movs	r1, #240	; 0xf0
 8003c3a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c3e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c40:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c42:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c44:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c46:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003c48:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003c4a:	4770      	bx	lr
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c54:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8003dbc <HAL_GPIO_Init+0x16c>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c58:	4c56      	ldr	r4, [pc, #344]	; (8003db4 <HAL_GPIO_Init+0x164>)
  uint32_t position = 0x00u;
 8003c5a:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c5c:	680a      	ldr	r2, [r1, #0]
 8003c5e:	fa32 f503 	lsrs.w	r5, r2, r3
 8003c62:	d102      	bne.n	8003c6a <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8003c64:	b003      	add	sp, #12
 8003c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c6a:	2501      	movs	r5, #1
 8003c6c:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 8003c70:	ea18 0202 	ands.w	r2, r8, r2
 8003c74:	f000 8098 	beq.w	8003da8 <HAL_GPIO_Init+0x158>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c78:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c7a:	2703      	movs	r7, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c7c:	f006 0503 	and.w	r5, r6, #3
 8003c80:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c84:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c88:	1e6f      	subs	r7, r5, #1
 8003c8a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c8c:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c90:	d834      	bhi.n	8003cfc <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8003c92:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c94:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c98:	68cf      	ldr	r7, [r1, #12]
 8003c9a:	fa07 f70e 	lsl.w	r7, r7, lr
 8003c9e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8003ca2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003ca4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ca6:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003caa:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8003cae:	409f      	lsls	r7, r3
 8003cb0:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8003cb4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003cb6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cb8:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cbc:	688f      	ldr	r7, [r1, #8]
 8003cbe:	fa07 f70e 	lsl.w	r7, r7, lr
 8003cc2:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cc6:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8003cc8:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cca:	d119      	bne.n	8003d00 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 8003ccc:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8003cd0:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cd4:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8003cd8:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cdc:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8003ce0:	f04f 0b0f 	mov.w	fp, #15
 8003ce4:	fa0b fb0a 	lsl.w	fp, fp, sl
 8003ce8:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cec:	690f      	ldr	r7, [r1, #16]
 8003cee:	fa07 f70a 	lsl.w	r7, r7, sl
 8003cf2:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8003cf6:	f8c8 7020 	str.w	r7, [r8, #32]
 8003cfa:	e001      	b.n	8003d00 <HAL_GPIO_Init+0xb0>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cfc:	2d03      	cmp	r5, #3
 8003cfe:	d1da      	bne.n	8003cb6 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8003d00:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d02:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d06:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d0a:	432f      	orrs	r7, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d0c:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 8003d10:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d12:	d049      	beq.n	8003da8 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d14:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8003d18:	f045 0501 	orr.w	r5, r5, #1
 8003d1c:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 8003d20:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8003d24:	f023 0703 	bic.w	r7, r3, #3
 8003d28:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8003d2c:	f005 0501 	and.w	r5, r5, #1
 8003d30:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8003d34:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d36:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d3a:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003d3c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d3e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003d42:	f04f 0e0f 	mov.w	lr, #15
 8003d46:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d4a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d4e:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d52:	d02b      	beq.n	8003dac <HAL_GPIO_Init+0x15c>
 8003d54:	4d18      	ldr	r5, [pc, #96]	; (8003db8 <HAL_GPIO_Init+0x168>)
 8003d56:	42a8      	cmp	r0, r5
 8003d58:	d02a      	beq.n	8003db0 <HAL_GPIO_Init+0x160>
 8003d5a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003d5e:	42a8      	cmp	r0, r5
 8003d60:	bf0c      	ite	eq
 8003d62:	2502      	moveq	r5, #2
 8003d64:	2507      	movne	r5, #7
 8003d66:	fa05 f50c 	lsl.w	r5, r5, ip
 8003d6a:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d6e:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 8003d70:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8003d72:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d74:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8003d78:	bf0c      	ite	eq
 8003d7a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003d7c:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 8003d7e:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8003d80:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d82:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8003d86:	bf0c      	ite	eq
 8003d88:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003d8a:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 8003d8c:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR1;
 8003d8e:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d90:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 8003d94:	bf0c      	ite	eq
 8003d96:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8003d98:	4315      	orrne	r5, r2
        EXTI->EMR1 = temp;
 8003d9a:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 8003d9c:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d9e:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8003da0:	bf54      	ite	pl
 8003da2:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8003da4:	4315      	orrmi	r5, r2
        EXTI->IMR1 = temp;
 8003da6:	6025      	str	r5, [r4, #0]
    position++;
 8003da8:	3301      	adds	r3, #1
 8003daa:	e757      	b.n	8003c5c <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003dac:	2500      	movs	r5, #0
 8003dae:	e7da      	b.n	8003d66 <HAL_GPIO_Init+0x116>
 8003db0:	2501      	movs	r5, #1
 8003db2:	e7d8      	b.n	8003d66 <HAL_GPIO_Init+0x116>
 8003db4:	40010400 	.word	0x40010400
 8003db8:	48000400 	.word	0x48000400
 8003dbc:	40021000 	.word	0x40021000

08003dc0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dc0:	b10a      	cbz	r2, 8003dc6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003dc2:	6181      	str	r1, [r0, #24]
 8003dc4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003dc6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003dc8:	4770      	bx	lr

08003dca <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003dca:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003dcc:	ea01 0203 	and.w	r2, r1, r3
 8003dd0:	ea21 0103 	bic.w	r1, r1, r3
 8003dd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003dd8:	6181      	str	r1, [r0, #24]
}
 8003dda:	4770      	bx	lr

08003ddc <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ddc:	6803      	ldr	r3, [r0, #0]
 8003dde:	699a      	ldr	r2, [r3, #24]
 8003de0:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8003de2:	bf44      	itt	mi
 8003de4:	2200      	movmi	r2, #0
 8003de6:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003de8:	699a      	ldr	r2, [r3, #24]
 8003dea:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003dec:	bf5e      	ittt	pl
 8003dee:	699a      	ldrpl	r2, [r3, #24]
 8003df0:	f042 0201 	orrpl.w	r2, r2, #1
 8003df4:	619a      	strpl	r2, [r3, #24]
  }
}
 8003df6:	4770      	bx	lr

08003df8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003df8:	b530      	push	{r4, r5, lr}
 8003dfa:	9d03      	ldr	r5, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003dfc:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dfe:	432b      	orrs	r3, r5
 8003e00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e04:	4a06      	ldr	r2, [pc, #24]	; (8003e20 <I2C_TransferConfig+0x28>)
 8003e06:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e08:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003e0c:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e0e:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e16:	ea20 0002 	bic.w	r0, r0, r2
 8003e1a:	4303      	orrs	r3, r0
 8003e1c:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e1e:	bd30      	pop	{r4, r5, pc}
 8003e20:	03ff63ff 	.word	0x03ff63ff

08003e24 <I2C_IsErrorOccurred>:
{
 8003e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8003e28:	6803      	ldr	r3, [r0, #0]
 8003e2a:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003e2c:	f014 0410 	ands.w	r4, r4, #16
{
 8003e30:	4605      	mov	r5, r0
 8003e32:	4688      	mov	r8, r1
 8003e34:	4617      	mov	r7, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003e36:	d079      	beq.n	8003f2c <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e38:	2210      	movs	r2, #16
 8003e3a:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003e3c:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8003e3e:	f04f 0920 	mov.w	r9, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e42:	682b      	ldr	r3, [r5, #0]
 8003e44:	699a      	ldr	r2, [r3, #24]
 8003e46:	0694      	lsls	r4, r2, #26
 8003e48:	d436      	bmi.n	8003eb8 <I2C_IsErrorOccurred+0x94>
 8003e4a:	b10e      	cbz	r6, 8003e50 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8003e4c:	2404      	movs	r4, #4
 8003e4e:	e039      	b.n	8003ec4 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8003e50:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003e54:	d0f6      	beq.n	8003e44 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e56:	f7ff fe89 	bl	8003b6c <HAL_GetTick>
 8003e5a:	1bc0      	subs	r0, r0, r7
 8003e5c:	4540      	cmp	r0, r8
 8003e5e:	d802      	bhi.n	8003e66 <I2C_IsErrorOccurred+0x42>
 8003e60:	f1b8 0f00 	cmp.w	r8, #0
 8003e64:	d1ed      	bne.n	8003e42 <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e66:	682b      	ldr	r3, [r5, #0]
 8003e68:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8003e6a:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e6e:	6998      	ldr	r0, [r3, #24]
 8003e70:	0400      	lsls	r0, r0, #16
          tmp2 = hi2c->Mode;
 8003e72:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e74:	d50a      	bpl.n	8003e8c <I2C_IsErrorOccurred+0x68>
 8003e76:	0449      	lsls	r1, r1, #17
 8003e78:	d408      	bmi.n	8003e8c <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8003e7a:	2a20      	cmp	r2, #32
 8003e7c:	d006      	beq.n	8003e8c <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e84:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8003e86:	f7ff fe71 	bl	8003b6c <HAL_GetTick>
 8003e8a:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e8c:	682b      	ldr	r3, [r5, #0]
 8003e8e:	699c      	ldr	r4, [r3, #24]
 8003e90:	f014 0420 	ands.w	r4, r4, #32
 8003e94:	d1d5      	bne.n	8003e42 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003e96:	f7ff fe69 	bl	8003b6c <HAL_GetTick>
 8003e9a:	1bc0      	subs	r0, r0, r7
 8003e9c:	2819      	cmp	r0, #25
 8003e9e:	d9f5      	bls.n	8003e8c <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ea0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              __HAL_UNLOCK(hi2c);
 8003ea2:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ea6:	f043 0320 	orr.w	r3, r3, #32
 8003eaa:	646b      	str	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 8003eac:	2601      	movs	r6, #1
              hi2c->State = HAL_I2C_STATE_READY;
 8003eae:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb2:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 8003eb6:	e7e9      	b.n	8003e8c <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8003eb8:	2e00      	cmp	r6, #0
 8003eba:	d1c7      	bne.n	8003e4c <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8003ec0:	2404      	movs	r4, #4
    status = HAL_ERROR;
 8003ec2:	2601      	movs	r6, #1
  itflag = hi2c->Instance->ISR;
 8003ec4:	682b      	ldr	r3, [r5, #0]
 8003ec6:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ec8:	05d0      	lsls	r0, r2, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003eca:	bf41      	itttt	mi
 8003ecc:	f44f 7180 	movmi.w	r1, #256	; 0x100
 8003ed0:	61d9      	strmi	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8003ed2:	f044 0401 	orrmi.w	r4, r4, #1
    status = HAL_ERROR;
 8003ed6:	2601      	movmi	r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ed8:	0551      	lsls	r1, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003eda:	bf41      	itttt	mi
 8003edc:	f44f 6180 	movmi.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8003ee0:	f044 0408 	orrmi.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ee4:	61d9      	strmi	r1, [r3, #28]
    status = HAL_ERROR;
 8003ee6:	2601      	movmi	r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ee8:	0592      	lsls	r2, r2, #22
 8003eea:	d521      	bpl.n	8003f30 <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003eec:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ef0:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ef4:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	f7ff ff70 	bl	8003ddc <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003efc:	682a      	ldr	r2, [r5, #0]
 8003efe:	6853      	ldr	r3, [r2, #4]
 8003f00:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8003f04:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8003f08:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003f0c:	f023 0301 	bic.w	r3, r3, #1
 8003f10:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8003f12:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003f14:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8003f16:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8003f18:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f1a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8003f24:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8003f28:	2601      	movs	r6, #1
 8003f2a:	e003      	b.n	8003f34 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8003f2c:	4626      	mov	r6, r4
 8003f2e:	e7c9      	b.n	8003ec4 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8003f30:	2e00      	cmp	r6, #0
 8003f32:	d1e0      	bne.n	8003ef6 <I2C_IsErrorOccurred+0xd2>
}
 8003f34:	4630      	mov	r0, r6
 8003f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003f3a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003f3a:	b570      	push	{r4, r5, r6, lr}
 8003f3c:	4604      	mov	r4, r0
 8003f3e:	460d      	mov	r5, r1
 8003f40:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	079b      	lsls	r3, r3, #30
 8003f48:	d501      	bpl.n	8003f4e <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8003f4a:	2000      	movs	r0, #0
}
 8003f4c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f4e:	4632      	mov	r2, r6
 8003f50:	4629      	mov	r1, r5
 8003f52:	4620      	mov	r0, r4
 8003f54:	f7ff ff66 	bl	8003e24 <I2C_IsErrorOccurred>
 8003f58:	b9a0      	cbnz	r0, 8003f84 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8003f5a:	1c6a      	adds	r2, r5, #1
 8003f5c:	d0f1      	beq.n	8003f42 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f5e:	f7ff fe05 	bl	8003b6c <HAL_GetTick>
 8003f62:	1b80      	subs	r0, r0, r6
 8003f64:	42a8      	cmp	r0, r5
 8003f66:	d801      	bhi.n	8003f6c <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8003f68:	2d00      	cmp	r5, #0
 8003f6a:	d1ea      	bne.n	8003f42 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003f6e:	f043 0320 	orr.w	r3, r3, #32
 8003f72:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f74:	2320      	movs	r3, #32
 8003f76:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8003f80:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003f84:	2001      	movs	r0, #1
 8003f86:	e7e1      	b.n	8003f4c <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08003f88 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003f88:	b570      	push	{r4, r5, r6, lr}
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	460d      	mov	r5, r1
 8003f8e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f90:	6823      	ldr	r3, [r4, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	075b      	lsls	r3, r3, #29
 8003f96:	d40e      	bmi.n	8003fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f98:	4632      	mov	r2, r6
 8003f9a:	4629      	mov	r1, r5
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	f7ff ff41 	bl	8003e24 <I2C_IsErrorOccurred>
 8003fa2:	bb38      	cbnz	r0, 8003ff4 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	699a      	ldr	r2, [r3, #24]
 8003fa8:	0691      	lsls	r1, r2, #26
 8003faa:	d525      	bpl.n	8003ff8 <I2C_WaitOnRXNEFlagUntilTimeout+0x70>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	0752      	lsls	r2, r2, #29
 8003fb0:	d503      	bpl.n	8003fba <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8003fb2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003fb4:	b10a      	cbz	r2, 8003fba <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8003fb6:	2000      	movs	r0, #0
}
 8003fb8:	bd70      	pop	{r4, r5, r6, pc}
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fba:	699a      	ldr	r2, [r3, #24]
 8003fbc:	f012 0210 	ands.w	r2, r2, #16
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fc0:	bf1c      	itt	ne
 8003fc2:	2210      	movne	r2, #16
 8003fc4:	61da      	strne	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fc6:	f04f 0120 	mov.w	r1, #32
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003fca:	bf18      	it	ne
 8003fcc:	2204      	movne	r2, #4
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fce:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fd0:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8003fd8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8003fdc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8003fe0:	f022 0201 	bic.w	r2, r2, #1
 8003fe4:	605a      	str	r2, [r3, #4]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe6:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003fe8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003ff0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003ff4:	2001      	movs	r0, #1
 8003ff6:	e7df      	b.n	8003fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff8:	f7ff fdb8 	bl	8003b6c <HAL_GetTick>
 8003ffc:	1b80      	subs	r0, r0, r6
 8003ffe:	42a8      	cmp	r0, r5
 8004000:	d801      	bhi.n	8004006 <I2C_WaitOnRXNEFlagUntilTimeout+0x7e>
 8004002:	2d00      	cmp	r5, #0
 8004004:	d1c4      	bne.n	8003f90 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004006:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004008:	f043 0320 	orr.w	r3, r3, #32
 800400c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800400e:	2320      	movs	r3, #32
 8004010:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8004014:	2300      	movs	r3, #0
 8004016:	e7eb      	b.n	8003ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>

08004018 <I2C_WaitOnFlagUntilTimeout>:
{
 8004018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800401c:	9f06      	ldr	r7, [sp, #24]
 800401e:	4604      	mov	r4, r0
 8004020:	4688      	mov	r8, r1
 8004022:	4616      	mov	r6, r2
 8004024:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004026:	6822      	ldr	r2, [r4, #0]
 8004028:	6993      	ldr	r3, [r2, #24]
 800402a:	ea38 0303 	bics.w	r3, r8, r3
 800402e:	bf0c      	ite	eq
 8004030:	2301      	moveq	r3, #1
 8004032:	2300      	movne	r3, #0
 8004034:	42b3      	cmp	r3, r6
 8004036:	d001      	beq.n	800403c <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8004038:	2000      	movs	r0, #0
 800403a:	e015      	b.n	8004068 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800403c:	1c6b      	adds	r3, r5, #1
 800403e:	d0f3      	beq.n	8004028 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004040:	f7ff fd94 	bl	8003b6c <HAL_GetTick>
 8004044:	1bc0      	subs	r0, r0, r7
 8004046:	42a8      	cmp	r0, r5
 8004048:	d801      	bhi.n	800404e <I2C_WaitOnFlagUntilTimeout+0x36>
 800404a:	2d00      	cmp	r5, #0
 800404c:	d1eb      	bne.n	8004026 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800404e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004050:	f043 0320 	orr.w	r3, r3, #32
 8004054:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004056:	2320      	movs	r3, #32
 8004058:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800405c:	2300      	movs	r3, #0
 800405e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8004062:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004066:	2001      	movs	r0, #1
}
 8004068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800406c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800406c:	b570      	push	{r4, r5, r6, lr}
 800406e:	4604      	mov	r4, r0
 8004070:	460d      	mov	r5, r1
 8004072:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004074:	6823      	ldr	r3, [r4, #0]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	069b      	lsls	r3, r3, #26
 800407a:	d501      	bpl.n	8004080 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800407c:	2000      	movs	r0, #0
}
 800407e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004080:	4632      	mov	r2, r6
 8004082:	4629      	mov	r1, r5
 8004084:	4620      	mov	r0, r4
 8004086:	f7ff fecd 	bl	8003e24 <I2C_IsErrorOccurred>
 800408a:	b990      	cbnz	r0, 80040b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800408c:	f7ff fd6e 	bl	8003b6c <HAL_GetTick>
 8004090:	1b80      	subs	r0, r0, r6
 8004092:	42a8      	cmp	r0, r5
 8004094:	d801      	bhi.n	800409a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8004096:	2d00      	cmp	r5, #0
 8004098:	d1ec      	bne.n	8004074 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800409a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800409c:	f043 0320 	orr.w	r3, r3, #32
 80040a0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040a2:	2320      	movs	r3, #32
 80040a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a8:	2300      	movs	r3, #0
 80040aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80040ae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80040b2:	2001      	movs	r0, #1
 80040b4:	e7e3      	b.n	800407e <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

080040b6 <HAL_I2C_Init>:
{
 80040b6:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80040b8:	4604      	mov	r4, r0
 80040ba:	2800      	cmp	r0, #0
 80040bc:	d04a      	beq.n	8004154 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040be:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80040c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80040c6:	b91b      	cbnz	r3, 80040d0 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80040c8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80040cc:	f7fd fa7a 	bl	80015c4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80040d0:	2324      	movs	r3, #36	; 0x24
 80040d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	f022 0201 	bic.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040e0:	6862      	ldr	r2, [r4, #4]
 80040e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040e6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040ee:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040f0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040f4:	2901      	cmp	r1, #1
 80040f6:	d124      	bne.n	8004142 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040fc:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004104:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004108:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004110:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004112:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8004116:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004118:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800411a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800411e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004120:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8004124:	430a      	orrs	r2, r1
 8004126:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004130:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8004132:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004134:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004136:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800413a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800413c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8004140:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004142:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004146:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004148:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800414a:	bf04      	itt	eq
 800414c:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8004150:	605a      	streq	r2, [r3, #4]
 8004152:	e7d4      	b.n	80040fe <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8004154:	2001      	movs	r0, #1
 8004156:	e7f3      	b.n	8004140 <HAL_I2C_Init+0x8a>

08004158 <HAL_I2C_Master_Transmit>:
{
 8004158:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800415c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800415e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8004162:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004164:	2b20      	cmp	r3, #32
{
 8004166:	4604      	mov	r4, r0
 8004168:	460e      	mov	r6, r1
 800416a:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800416c:	f040 8086 	bne.w	800427c <HAL_I2C_Master_Transmit+0x124>
    __HAL_LOCK(hi2c);
 8004170:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004174:	2b01      	cmp	r3, #1
 8004176:	f000 8081 	beq.w	800427c <HAL_I2C_Master_Transmit+0x124>
 800417a:	f04f 0a01 	mov.w	sl, #1
 800417e:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004182:	f7ff fcf3 	bl	8003b6c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004186:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8004188:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800418a:	9000      	str	r0, [sp, #0]
 800418c:	4652      	mov	r2, sl
 800418e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004192:	4620      	mov	r0, r4
 8004194:	f7ff ff40 	bl	8004018 <I2C_WaitOnFlagUntilTimeout>
 8004198:	b118      	cbz	r0, 80041a2 <HAL_I2C_Master_Transmit+0x4a>
      return HAL_ERROR;
 800419a:	2001      	movs	r0, #1
}
 800419c:	b002      	add	sp, #8
 800419e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041a2:	2321      	movs	r3, #33	; 0x21
 80041a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80041a8:	2310      	movs	r3, #16
 80041aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041ae:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80041b0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 80041b6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 80041be:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041c0:	4b2f      	ldr	r3, [pc, #188]	; (8004280 <HAL_I2C_Master_Transmit+0x128>)
 80041c2:	d926      	bls.n	8004212 <HAL_I2C_Master_Transmit+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041c4:	22ff      	movs	r2, #255	; 0xff
 80041c6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041c8:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041ce:	4631      	mov	r1, r6
 80041d0:	4620      	mov	r0, r4
 80041d2:	f7ff fe11 	bl	8003df8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80041d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041d8:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041da:	462a      	mov	r2, r5
 80041dc:	4639      	mov	r1, r7
 80041de:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 80041e0:	b9fb      	cbnz	r3, 8004222 <HAL_I2C_Master_Transmit+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e2:	f7ff ff43 	bl	800406c <I2C_WaitOnSTOPFlagUntilTimeout>
 80041e6:	2800      	cmp	r0, #0
 80041e8:	d1d7      	bne.n	800419a <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	2120      	movs	r1, #32
 80041ee:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80041f6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80041fa:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80041fe:	f022 0201 	bic.w	r2, r2, #1
 8004202:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004204:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004208:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800420c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8004210:	e7c4      	b.n	800419c <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8004212:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004214:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8004216:	b292      	uxth	r2, r2
 8004218:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800421a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	e7d5      	b.n	80041ce <HAL_I2C_Master_Transmit+0x76>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004222:	f7ff fe8a 	bl	8003f3a <I2C_WaitOnTXISFlagUntilTimeout>
 8004226:	2800      	cmp	r0, #0
 8004228:	d1b7      	bne.n	800419a <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800422a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800422c:	6822      	ldr	r2, [r4, #0]
 800422e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004232:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004234:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004236:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004238:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800423a:	3b01      	subs	r3, #1
 800423c:	b29b      	uxth	r3, r3
 800423e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004240:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004242:	3a01      	subs	r2, #1
 8004244:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004246:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8004248:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0c3      	beq.n	80041d6 <HAL_I2C_Master_Transmit+0x7e>
 800424e:	2a00      	cmp	r2, #0
 8004250:	d1c1      	bne.n	80041d6 <HAL_I2C_Master_Transmit+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004252:	9500      	str	r5, [sp, #0]
 8004254:	463b      	mov	r3, r7
 8004256:	2180      	movs	r1, #128	; 0x80
 8004258:	4620      	mov	r0, r4
 800425a:	f7ff fedd 	bl	8004018 <I2C_WaitOnFlagUntilTimeout>
 800425e:	2800      	cmp	r0, #0
 8004260:	d19b      	bne.n	800419a <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004262:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004264:	b29b      	uxth	r3, r3
 8004266:	2bff      	cmp	r3, #255	; 0xff
 8004268:	d903      	bls.n	8004272 <HAL_I2C_Master_Transmit+0x11a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800426a:	22ff      	movs	r2, #255	; 0xff
 800426c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800426e:	9000      	str	r0, [sp, #0]
 8004270:	e7ab      	b.n	80041ca <HAL_I2C_Master_Transmit+0x72>
          hi2c->XferSize = hi2c->XferCount;
 8004272:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004274:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8004276:	b292      	uxth	r2, r2
 8004278:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800427a:	e7ce      	b.n	800421a <HAL_I2C_Master_Transmit+0xc2>
    return HAL_BUSY;
 800427c:	2002      	movs	r0, #2
 800427e:	e78d      	b.n	800419c <HAL_I2C_Master_Transmit+0x44>
 8004280:	80002000 	.word	0x80002000

08004284 <HAL_I2C_Master_Receive>:
{
 8004284:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004288:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800428a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800428e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004290:	2b20      	cmp	r3, #32
{
 8004292:	4604      	mov	r4, r0
 8004294:	460e      	mov	r6, r1
 8004296:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004298:	f040 8087 	bne.w	80043aa <HAL_I2C_Master_Receive+0x126>
    __HAL_LOCK(hi2c);
 800429c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	f000 8082 	beq.w	80043aa <HAL_I2C_Master_Receive+0x126>
 80042a6:	f04f 0a01 	mov.w	sl, #1
 80042aa:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80042ae:	f7ff fc5d 	bl	8003b6c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042b2:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80042b4:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042b6:	9000      	str	r0, [sp, #0]
 80042b8:	4652      	mov	r2, sl
 80042ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042be:	4620      	mov	r0, r4
 80042c0:	f7ff feaa 	bl	8004018 <I2C_WaitOnFlagUntilTimeout>
 80042c4:	b118      	cbz	r0, 80042ce <HAL_I2C_Master_Receive+0x4a>
      return HAL_ERROR;
 80042c6:	2001      	movs	r0, #1
}
 80042c8:	b002      	add	sp, #8
 80042ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042ce:	2322      	movs	r3, #34	; 0x22
 80042d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80042d4:	2310      	movs	r3, #16
 80042d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042da:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 80042dc:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 80042e2:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 80042ea:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042ec:	4b30      	ldr	r3, [pc, #192]	; (80043b0 <HAL_I2C_Master_Receive+0x12c>)
 80042ee:	d926      	bls.n	800433e <HAL_I2C_Master_Receive+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042f0:	22ff      	movs	r2, #255	; 0xff
 80042f2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042f4:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042fa:	4631      	mov	r1, r6
 80042fc:	4620      	mov	r0, r4
 80042fe:	f7ff fd7b 	bl	8003df8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004302:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004304:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004306:	462a      	mov	r2, r5
 8004308:	4639      	mov	r1, r7
 800430a:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800430c:	b9fb      	cbnz	r3, 800434e <HAL_I2C_Master_Receive+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800430e:	f7ff fead 	bl	800406c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004312:	2800      	cmp	r0, #0
 8004314:	d1d7      	bne.n	80042c6 <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	2120      	movs	r1, #32
 800431a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004322:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004326:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800432a:	f022 0201 	bic.w	r2, r2, #1
 800432e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004330:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004334:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004338:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800433c:	e7c4      	b.n	80042c8 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 800433e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004340:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8004342:	b292      	uxth	r2, r2
 8004344:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800434a:	b2d2      	uxtb	r2, r2
 800434c:	e7d5      	b.n	80042fa <HAL_I2C_Master_Receive+0x76>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800434e:	f7ff fe1b 	bl	8003f88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004352:	2800      	cmp	r0, #0
 8004354:	d1b7      	bne.n	80042c6 <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800435a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800435c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800435e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004360:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004362:	3301      	adds	r3, #1
 8004364:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004366:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004368:	3b01      	subs	r3, #1
 800436a:	b29b      	uxth	r3, r3
 800436c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800436e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004370:	3a01      	subs	r2, #1
 8004372:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004374:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8004376:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0c2      	beq.n	8004302 <HAL_I2C_Master_Receive+0x7e>
 800437c:	2a00      	cmp	r2, #0
 800437e:	d1c0      	bne.n	8004302 <HAL_I2C_Master_Receive+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004380:	9500      	str	r5, [sp, #0]
 8004382:	463b      	mov	r3, r7
 8004384:	2180      	movs	r1, #128	; 0x80
 8004386:	4620      	mov	r0, r4
 8004388:	f7ff fe46 	bl	8004018 <I2C_WaitOnFlagUntilTimeout>
 800438c:	2800      	cmp	r0, #0
 800438e:	d19a      	bne.n	80042c6 <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004390:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004392:	b29b      	uxth	r3, r3
 8004394:	2bff      	cmp	r3, #255	; 0xff
 8004396:	d903      	bls.n	80043a0 <HAL_I2C_Master_Receive+0x11c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004398:	22ff      	movs	r2, #255	; 0xff
 800439a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800439c:	9000      	str	r0, [sp, #0]
 800439e:	e7aa      	b.n	80042f6 <HAL_I2C_Master_Receive+0x72>
          hi2c->XferSize = hi2c->XferCount;
 80043a0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043a2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80043a4:	b292      	uxth	r2, r2
 80043a6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043a8:	e7cd      	b.n	8004346 <HAL_I2C_Master_Receive+0xc2>
    return HAL_BUSY;
 80043aa:	2002      	movs	r0, #2
 80043ac:	e78c      	b.n	80042c8 <HAL_I2C_Master_Receive+0x44>
 80043ae:	bf00      	nop
 80043b0:	80002400 	.word	0x80002400

080043b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043b4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043b6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	b2dc      	uxtb	r4, r3
 80043be:	d11d      	bne.n	80043fc <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043c0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d019      	beq.n	80043fc <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043c8:	2324      	movs	r3, #36	; 0x24
 80043ca:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043ce:	6803      	ldr	r3, [r0, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	f022 0201 	bic.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	4311      	orrs	r1, r2
 80043e4:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	f042 0201 	orr.w	r2, r2, #1
 80043ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ee:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80043f0:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80043f4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80043f8:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80043fa:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80043fc:	2002      	movs	r0, #2
 80043fe:	e7fc      	b.n	80043fa <HAL_I2CEx_ConfigAnalogFilter+0x46>

08004400 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004400:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004402:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004406:	2b20      	cmp	r3, #32
 8004408:	b2dc      	uxtb	r4, r3
 800440a:	d11c      	bne.n	8004446 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800440c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004410:	2b01      	cmp	r3, #1
 8004412:	d018      	beq.n	8004446 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004414:	2324      	movs	r3, #36	; 0x24
 8004416:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800441a:	6803      	ldr	r3, [r0, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	f022 0201 	bic.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004424:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004426:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800442a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800442e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004438:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800443a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800443e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004442:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8004444:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004446:	2002      	movs	r0, #2
 8004448:	e7fc      	b.n	8004444 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

0800444c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800444c:	4b02      	ldr	r3, [pc, #8]	; (8004458 <HAL_PWREx_GetVoltageRange+0xc>)
 800444e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8004450:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40007000 	.word	0x40007000

0800445c <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800445c:	4a17      	ldr	r2, [pc, #92]	; (80044bc <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800445e:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004460:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004464:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004468:	d11d      	bne.n	80044a6 <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800446a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800446e:	d101      	bne.n	8004474 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004470:	2000      	movs	r0, #0
 8004472:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004474:	6813      	ldr	r3, [r2, #0]
 8004476:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800447a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800447e:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004480:	4b0f      	ldr	r3, [pc, #60]	; (80044c0 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2132      	movs	r1, #50	; 0x32
 8004486:	434b      	muls	r3, r1
 8004488:	490e      	ldr	r1, [pc, #56]	; (80044c4 <HAL_PWREx_ControlVoltageScaling+0x68>)
 800448a:	fbb3 f3f1 	udiv	r3, r3, r1
 800448e:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004490:	6951      	ldr	r1, [r2, #20]
 8004492:	0549      	lsls	r1, r1, #21
 8004494:	d500      	bpl.n	8004498 <HAL_PWREx_ControlVoltageScaling+0x3c>
 8004496:	b923      	cbnz	r3, 80044a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004498:	6953      	ldr	r3, [r2, #20]
 800449a:	055b      	lsls	r3, r3, #21
 800449c:	d5e8      	bpl.n	8004470 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 800449e:	2003      	movs	r0, #3
}
 80044a0:	4770      	bx	lr
        wait_loop_index--;
 80044a2:	3b01      	subs	r3, #1
 80044a4:	e7f4      	b.n	8004490 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80044a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044aa:	bf1f      	itttt	ne
 80044ac:	6813      	ldrne	r3, [r2, #0]
 80044ae:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 80044b2:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 80044b6:	6013      	strne	r3, [r2, #0]
 80044b8:	e7da      	b.n	8004470 <HAL_PWREx_ControlVoltageScaling+0x14>
 80044ba:	bf00      	nop
 80044bc:	40007000 	.word	0x40007000
 80044c0:	20000014 	.word	0x20000014
 80044c4:	000f4240 	.word	0x000f4240

080044c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044ca:	4d1e      	ldr	r5, [pc, #120]	; (8004544 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80044cc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80044ce:	00da      	lsls	r2, r3, #3
{
 80044d0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044d2:	d518      	bpl.n	8004506 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044d4:	f7ff ffba 	bl	800444c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044d8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80044dc:	d123      	bne.n	8004526 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044de:	2c80      	cmp	r4, #128	; 0x80
 80044e0:	d929      	bls.n	8004536 <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044e2:	2ca0      	cmp	r4, #160	; 0xa0
 80044e4:	bf8c      	ite	hi
 80044e6:	2002      	movhi	r0, #2
 80044e8:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044ea:	4a17      	ldr	r2, [pc, #92]	; (8004548 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80044ec:	6813      	ldr	r3, [r2, #0]
 80044ee:	f023 0307 	bic.w	r3, r3, #7
 80044f2:	4303      	orrs	r3, r0
 80044f4:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80044f6:	6813      	ldr	r3, [r2, #0]
 80044f8:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80044fc:	1a18      	subs	r0, r3, r0
 80044fe:	bf18      	it	ne
 8004500:	2001      	movne	r0, #1
 8004502:	b003      	add	sp, #12
 8004504:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8004506:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800450c:	65ab      	str	r3, [r5, #88]	; 0x58
 800450e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8004510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004514:	9301      	str	r3, [sp, #4]
 8004516:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8004518:	f7ff ff98 	bl	800444c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800451c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800451e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004522:	65ab      	str	r3, [r5, #88]	; 0x58
 8004524:	e7d8      	b.n	80044d8 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8004526:	2c80      	cmp	r4, #128	; 0x80
 8004528:	d807      	bhi.n	800453a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800452a:	d008      	beq.n	800453e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 800452c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8004530:	4258      	negs	r0, r3
 8004532:	4158      	adcs	r0, r3
 8004534:	e7d9      	b.n	80044ea <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004536:	2000      	movs	r0, #0
 8004538:	e7d7      	b.n	80044ea <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800453a:	2003      	movs	r0, #3
 800453c:	e7d5      	b.n	80044ea <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800453e:	2002      	movs	r0, #2
 8004540:	e7d3      	b.n	80044ea <RCC_SetFlashLatencyFromMSIRange+0x22>
 8004542:	bf00      	nop
 8004544:	40021000 	.word	0x40021000
 8004548:	40022000 	.word	0x40022000

0800454c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800454c:	4b22      	ldr	r3, [pc, #136]	; (80045d8 <HAL_RCC_GetSysClockFreq+0x8c>)
 800454e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004550:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004552:	f012 020c 	ands.w	r2, r2, #12
 8004556:	d005      	beq.n	8004564 <HAL_RCC_GetSysClockFreq+0x18>
 8004558:	2a0c      	cmp	r2, #12
 800455a:	d115      	bne.n	8004588 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800455c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004560:	2901      	cmp	r1, #1
 8004562:	d118      	bne.n	8004596 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004564:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8004566:	481d      	ldr	r0, [pc, #116]	; (80045dc <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004568:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800456a:	bf55      	itete	pl
 800456c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004570:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004572:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004576:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800457a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800457e:	b34a      	cbz	r2, 80045d4 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004580:	2a0c      	cmp	r2, #12
 8004582:	d009      	beq.n	8004598 <HAL_RCC_GetSysClockFreq+0x4c>
 8004584:	2000      	movs	r0, #0
  return sysclockfreq;
 8004586:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004588:	2a04      	cmp	r2, #4
 800458a:	d022      	beq.n	80045d2 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800458c:	2a08      	cmp	r2, #8
 800458e:	4814      	ldr	r0, [pc, #80]	; (80045e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004590:	bf18      	it	ne
 8004592:	2000      	movne	r0, #0
 8004594:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004596:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 800459e:	2a02      	cmp	r2, #2
 80045a0:	d015      	beq.n	80045ce <HAL_RCC_GetSysClockFreq+0x82>
 80045a2:	490f      	ldr	r1, [pc, #60]	; (80045e0 <HAL_RCC_GetSysClockFreq+0x94>)
 80045a4:	2a03      	cmp	r2, #3
 80045a6:	bf08      	it	eq
 80045a8:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045aa:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045ac:	68da      	ldr	r2, [r3, #12]
 80045ae:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80045b2:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045b4:	68d8      	ldr	r0, [r3, #12]
 80045b6:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045ba:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045be:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045c0:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045c2:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045c4:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 80045c8:	fbb2 f0f0 	udiv	r0, r2, r0
 80045cc:	4770      	bx	lr
      pllvco = HSI_VALUE;
 80045ce:	4805      	ldr	r0, [pc, #20]	; (80045e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80045d0:	e7eb      	b.n	80045aa <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 80045d2:	4804      	ldr	r0, [pc, #16]	; (80045e4 <HAL_RCC_GetSysClockFreq+0x98>)
}
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40021000 	.word	0x40021000
 80045dc:	08008938 	.word	0x08008938
 80045e0:	007a1200 	.word	0x007a1200
 80045e4:	00f42400 	.word	0x00f42400

080045e8 <HAL_RCC_OscConfig>:
{
 80045e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 80045ec:	4605      	mov	r5, r0
 80045ee:	b908      	cbnz	r0, 80045f4 <HAL_RCC_OscConfig+0xc>
          return HAL_ERROR;
 80045f0:	2001      	movs	r0, #1
 80045f2:	e047      	b.n	8004684 <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045f4:	4c94      	ldr	r4, [pc, #592]	; (8004848 <HAL_RCC_OscConfig+0x260>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045f6:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045f8:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045fa:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045fc:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045fe:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004602:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004606:	d575      	bpl.n	80046f4 <HAL_RCC_OscConfig+0x10c>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004608:	b11e      	cbz	r6, 8004612 <HAL_RCC_OscConfig+0x2a>
 800460a:	2e0c      	cmp	r6, #12
 800460c:	d154      	bne.n	80046b8 <HAL_RCC_OscConfig+0xd0>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800460e:	2f01      	cmp	r7, #1
 8004610:	d152      	bne.n	80046b8 <HAL_RCC_OscConfig+0xd0>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	0798      	lsls	r0, r3, #30
 8004616:	d502      	bpl.n	800461e <HAL_RCC_OscConfig+0x36>
 8004618:	69ab      	ldr	r3, [r5, #24]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0e8      	beq.n	80045f0 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	6a28      	ldr	r0, [r5, #32]
 8004622:	0719      	lsls	r1, r3, #28
 8004624:	bf56      	itet	pl
 8004626:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 800462a:	6823      	ldrmi	r3, [r4, #0]
 800462c:	091b      	lsrpl	r3, r3, #4
 800462e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004632:	4298      	cmp	r0, r3
 8004634:	d929      	bls.n	800468a <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004636:	f7ff ff47 	bl	80044c8 <RCC_SetFlashLatencyFromMSIRange>
 800463a:	2800      	cmp	r0, #0
 800463c:	d1d8      	bne.n	80045f0 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	f043 0308 	orr.w	r3, r3, #8
 8004644:	6023      	str	r3, [r4, #0]
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	6a2a      	ldr	r2, [r5, #32]
 800464a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800464e:	4313      	orrs	r3, r2
 8004650:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004652:	6863      	ldr	r3, [r4, #4]
 8004654:	69ea      	ldr	r2, [r5, #28]
 8004656:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800465a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800465e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004660:	f7ff ff74 	bl	800454c <HAL_RCC_GetSysClockFreq>
 8004664:	68a3      	ldr	r3, [r4, #8]
 8004666:	4a79      	ldr	r2, [pc, #484]	; (800484c <HAL_RCC_OscConfig+0x264>)
 8004668:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800466c:	5cd3      	ldrb	r3, [r2, r3]
 800466e:	f003 031f 	and.w	r3, r3, #31
 8004672:	40d8      	lsrs	r0, r3
 8004674:	4b76      	ldr	r3, [pc, #472]	; (8004850 <HAL_RCC_OscConfig+0x268>)
 8004676:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8004678:	4b76      	ldr	r3, [pc, #472]	; (8004854 <HAL_RCC_OscConfig+0x26c>)
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	f7ff fa34 	bl	8003ae8 <HAL_InitTick>
        if(status != HAL_OK)
 8004680:	2800      	cmp	r0, #0
 8004682:	d037      	beq.n	80046f4 <HAL_RCC_OscConfig+0x10c>
}
 8004684:	b003      	add	sp, #12
 8004686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	f043 0308 	orr.w	r3, r3, #8
 8004690:	6023      	str	r3, [r4, #0]
 8004692:	6823      	ldr	r3, [r4, #0]
 8004694:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004698:	4303      	orrs	r3, r0
 800469a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800469c:	6863      	ldr	r3, [r4, #4]
 800469e:	69ea      	ldr	r2, [r5, #28]
 80046a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80046a8:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046aa:	2e00      	cmp	r6, #0
 80046ac:	d1d8      	bne.n	8004660 <HAL_RCC_OscConfig+0x78>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046ae:	f7ff ff0b 	bl	80044c8 <RCC_SetFlashLatencyFromMSIRange>
 80046b2:	2800      	cmp	r0, #0
 80046b4:	d0d4      	beq.n	8004660 <HAL_RCC_OscConfig+0x78>
 80046b6:	e79b      	b.n	80045f0 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046b8:	69ab      	ldr	r3, [r5, #24]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d03a      	beq.n	8004734 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_MSI_ENABLE();
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	f043 0301 	orr.w	r3, r3, #1
 80046c4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80046c6:	f7ff fa51 	bl	8003b6c <HAL_GetTick>
 80046ca:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046cc:	6823      	ldr	r3, [r4, #0]
 80046ce:	079a      	lsls	r2, r3, #30
 80046d0:	d528      	bpl.n	8004724 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	f043 0308 	orr.w	r3, r3, #8
 80046d8:	6023      	str	r3, [r4, #0]
 80046da:	6823      	ldr	r3, [r4, #0]
 80046dc:	6a2a      	ldr	r2, [r5, #32]
 80046de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046e2:	4313      	orrs	r3, r2
 80046e4:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046e6:	6863      	ldr	r3, [r4, #4]
 80046e8:	69ea      	ldr	r2, [r5, #28]
 80046ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80046f2:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046f4:	682b      	ldr	r3, [r5, #0]
 80046f6:	07d8      	lsls	r0, r3, #31
 80046f8:	d42d      	bmi.n	8004756 <HAL_RCC_OscConfig+0x16e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046fa:	682b      	ldr	r3, [r5, #0]
 80046fc:	0799      	lsls	r1, r3, #30
 80046fe:	d46b      	bmi.n	80047d8 <HAL_RCC_OscConfig+0x1f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004700:	682b      	ldr	r3, [r5, #0]
 8004702:	0718      	lsls	r0, r3, #28
 8004704:	f100 80a8 	bmi.w	8004858 <HAL_RCC_OscConfig+0x270>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004708:	682b      	ldr	r3, [r5, #0]
 800470a:	0759      	lsls	r1, r3, #29
 800470c:	f100 80ce 	bmi.w	80048ac <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004710:	682b      	ldr	r3, [r5, #0]
 8004712:	0699      	lsls	r1, r3, #26
 8004714:	f100 8137 	bmi.w	8004986 <HAL_RCC_OscConfig+0x39e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004718:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800471a:	2b00      	cmp	r3, #0
 800471c:	f040 815d 	bne.w	80049da <HAL_RCC_OscConfig+0x3f2>
  return HAL_OK;
 8004720:	2000      	movs	r0, #0
 8004722:	e7af      	b.n	8004684 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004724:	f7ff fa22 	bl	8003b6c <HAL_GetTick>
 8004728:	eba0 0008 	sub.w	r0, r0, r8
 800472c:	2802      	cmp	r0, #2
 800472e:	d9cd      	bls.n	80046cc <HAL_RCC_OscConfig+0xe4>
            return HAL_TIMEOUT;
 8004730:	2003      	movs	r0, #3
 8004732:	e7a7      	b.n	8004684 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	f023 0301 	bic.w	r3, r3, #1
 800473a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800473c:	f7ff fa16 	bl	8003b6c <HAL_GetTick>
 8004740:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	079b      	lsls	r3, r3, #30
 8004746:	d5d5      	bpl.n	80046f4 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004748:	f7ff fa10 	bl	8003b6c <HAL_GetTick>
 800474c:	eba0 0008 	sub.w	r0, r0, r8
 8004750:	2802      	cmp	r0, #2
 8004752:	d9f6      	bls.n	8004742 <HAL_RCC_OscConfig+0x15a>
 8004754:	e7ec      	b.n	8004730 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004756:	2e08      	cmp	r6, #8
 8004758:	d003      	beq.n	8004762 <HAL_RCC_OscConfig+0x17a>
 800475a:	2e0c      	cmp	r6, #12
 800475c:	d108      	bne.n	8004770 <HAL_RCC_OscConfig+0x188>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800475e:	2f03      	cmp	r7, #3
 8004760:	d106      	bne.n	8004770 <HAL_RCC_OscConfig+0x188>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	039a      	lsls	r2, r3, #14
 8004766:	d5c8      	bpl.n	80046fa <HAL_RCC_OscConfig+0x112>
 8004768:	686b      	ldr	r3, [r5, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1c5      	bne.n	80046fa <HAL_RCC_OscConfig+0x112>
 800476e:	e73f      	b.n	80045f0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004770:	686b      	ldr	r3, [r5, #4]
 8004772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004776:	d110      	bne.n	800479a <HAL_RCC_OscConfig+0x1b2>
 8004778:	6823      	ldr	r3, [r4, #0]
 800477a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800477e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004780:	f7ff f9f4 	bl	8003b6c <HAL_GetTick>
 8004784:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	039b      	lsls	r3, r3, #14
 800478a:	d4b6      	bmi.n	80046fa <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800478c:	f7ff f9ee 	bl	8003b6c <HAL_GetTick>
 8004790:	eba0 0008 	sub.w	r0, r0, r8
 8004794:	2864      	cmp	r0, #100	; 0x64
 8004796:	d9f6      	bls.n	8004786 <HAL_RCC_OscConfig+0x19e>
 8004798:	e7ca      	b.n	8004730 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800479a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800479e:	d104      	bne.n	80047aa <HAL_RCC_OscConfig+0x1c2>
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047a6:	6023      	str	r3, [r4, #0]
 80047a8:	e7e6      	b.n	8004778 <HAL_RCC_OscConfig+0x190>
 80047aa:	6822      	ldr	r2, [r4, #0]
 80047ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80047b0:	6022      	str	r2, [r4, #0]
 80047b2:	6822      	ldr	r2, [r4, #0]
 80047b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047b8:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1e0      	bne.n	8004780 <HAL_RCC_OscConfig+0x198>
        tickstart = HAL_GetTick();
 80047be:	f7ff f9d5 	bl	8003b6c <HAL_GetTick>
 80047c2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	0398      	lsls	r0, r3, #14
 80047c8:	d597      	bpl.n	80046fa <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047ca:	f7ff f9cf 	bl	8003b6c <HAL_GetTick>
 80047ce:	eba0 0008 	sub.w	r0, r0, r8
 80047d2:	2864      	cmp	r0, #100	; 0x64
 80047d4:	d9f6      	bls.n	80047c4 <HAL_RCC_OscConfig+0x1dc>
 80047d6:	e7ab      	b.n	8004730 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80047d8:	2e04      	cmp	r6, #4
 80047da:	d003      	beq.n	80047e4 <HAL_RCC_OscConfig+0x1fc>
 80047dc:	2e0c      	cmp	r6, #12
 80047de:	d110      	bne.n	8004802 <HAL_RCC_OscConfig+0x21a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047e0:	2f02      	cmp	r7, #2
 80047e2:	d10e      	bne.n	8004802 <HAL_RCC_OscConfig+0x21a>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	0559      	lsls	r1, r3, #21
 80047e8:	d503      	bpl.n	80047f2 <HAL_RCC_OscConfig+0x20a>
 80047ea:	68eb      	ldr	r3, [r5, #12]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f43f aeff 	beq.w	80045f0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f2:	6863      	ldr	r3, [r4, #4]
 80047f4:	692a      	ldr	r2, [r5, #16]
 80047f6:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80047fa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80047fe:	6063      	str	r3, [r4, #4]
 8004800:	e77e      	b.n	8004700 <HAL_RCC_OscConfig+0x118>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004802:	68eb      	ldr	r3, [r5, #12]
 8004804:	b17b      	cbz	r3, 8004826 <HAL_RCC_OscConfig+0x23e>
        __HAL_RCC_HSI_ENABLE();
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800480c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800480e:	f7ff f9ad 	bl	8003b6c <HAL_GetTick>
 8004812:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004814:	6823      	ldr	r3, [r4, #0]
 8004816:	055a      	lsls	r2, r3, #21
 8004818:	d4eb      	bmi.n	80047f2 <HAL_RCC_OscConfig+0x20a>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800481a:	f7ff f9a7 	bl	8003b6c <HAL_GetTick>
 800481e:	1bc0      	subs	r0, r0, r7
 8004820:	2802      	cmp	r0, #2
 8004822:	d9f7      	bls.n	8004814 <HAL_RCC_OscConfig+0x22c>
 8004824:	e784      	b.n	8004730 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800482c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800482e:	f7ff f99d 	bl	8003b6c <HAL_GetTick>
 8004832:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	055b      	lsls	r3, r3, #21
 8004838:	f57f af62 	bpl.w	8004700 <HAL_RCC_OscConfig+0x118>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800483c:	f7ff f996 	bl	8003b6c <HAL_GetTick>
 8004840:	1bc0      	subs	r0, r0, r7
 8004842:	2802      	cmp	r0, #2
 8004844:	d9f6      	bls.n	8004834 <HAL_RCC_OscConfig+0x24c>
 8004846:	e773      	b.n	8004730 <HAL_RCC_OscConfig+0x148>
 8004848:	40021000 	.word	0x40021000
 800484c:	08008920 	.word	0x08008920
 8004850:	20000014 	.word	0x20000014
 8004854:	2000001c 	.word	0x2000001c
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004858:	696b      	ldr	r3, [r5, #20]
 800485a:	b19b      	cbz	r3, 8004884 <HAL_RCC_OscConfig+0x29c>
      __HAL_RCC_LSI_ENABLE();
 800485c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004860:	f043 0301 	orr.w	r3, r3, #1
 8004864:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004868:	f7ff f980 	bl	8003b6c <HAL_GetTick>
 800486c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800486e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004872:	079a      	lsls	r2, r3, #30
 8004874:	f53f af48 	bmi.w	8004708 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004878:	f7ff f978 	bl	8003b6c <HAL_GetTick>
 800487c:	1bc0      	subs	r0, r0, r7
 800487e:	2802      	cmp	r0, #2
 8004880:	d9f5      	bls.n	800486e <HAL_RCC_OscConfig+0x286>
 8004882:	e755      	b.n	8004730 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_LSI_DISABLE();
 8004884:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004888:	f023 0301 	bic.w	r3, r3, #1
 800488c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004890:	f7ff f96c 	bl	8003b6c <HAL_GetTick>
 8004894:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004896:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800489a:	079b      	lsls	r3, r3, #30
 800489c:	f57f af34 	bpl.w	8004708 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048a0:	f7ff f964 	bl	8003b6c <HAL_GetTick>
 80048a4:	1bc0      	subs	r0, r0, r7
 80048a6:	2802      	cmp	r0, #2
 80048a8:	d9f5      	bls.n	8004896 <HAL_RCC_OscConfig+0x2ae>
 80048aa:	e741      	b.n	8004730 <HAL_RCC_OscConfig+0x148>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048ae:	00d8      	lsls	r0, r3, #3
 80048b0:	d429      	bmi.n	8004906 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80048b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b8:	65a3      	str	r3, [r4, #88]	; 0x58
 80048ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c0:	9301      	str	r3, [sp, #4]
 80048c2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80048c4:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048c8:	4f96      	ldr	r7, [pc, #600]	; (8004b24 <HAL_RCC_OscConfig+0x53c>)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	05d9      	lsls	r1, r3, #23
 80048ce:	d51d      	bpl.n	800490c <HAL_RCC_OscConfig+0x324>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048d0:	68ab      	ldr	r3, [r5, #8]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d12b      	bne.n	800492e <HAL_RCC_OscConfig+0x346>
 80048d6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80048da:	f043 0301 	orr.w	r3, r3, #1
 80048de:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80048e2:	f7ff f943 	bl	8003b6c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e6:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80048ea:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ec:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80048f0:	079b      	lsls	r3, r3, #30
 80048f2:	d542      	bpl.n	800497a <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 80048f4:	f1b8 0f00 	cmp.w	r8, #0
 80048f8:	f43f af0a 	beq.w	8004710 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_PWR_CLK_DISABLE();
 80048fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004902:	65a3      	str	r3, [r4, #88]	; 0x58
 8004904:	e704      	b.n	8004710 <HAL_RCC_OscConfig+0x128>
    FlagStatus       pwrclkchanged = RESET;
 8004906:	f04f 0800 	mov.w	r8, #0
 800490a:	e7dd      	b.n	80048c8 <HAL_RCC_OscConfig+0x2e0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004912:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004914:	f7ff f92a 	bl	8003b6c <HAL_GetTick>
 8004918:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	05da      	lsls	r2, r3, #23
 800491e:	d4d7      	bmi.n	80048d0 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004920:	f7ff f924 	bl	8003b6c <HAL_GetTick>
 8004924:	eba0 0009 	sub.w	r0, r0, r9
 8004928:	2802      	cmp	r0, #2
 800492a:	d9f6      	bls.n	800491a <HAL_RCC_OscConfig+0x332>
 800492c:	e700      	b.n	8004730 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800492e:	2b05      	cmp	r3, #5
 8004930:	d106      	bne.n	8004940 <HAL_RCC_OscConfig+0x358>
 8004932:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004936:	f043 0304 	orr.w	r3, r3, #4
 800493a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800493e:	e7ca      	b.n	80048d6 <HAL_RCC_OscConfig+0x2ee>
 8004940:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004944:	f022 0201 	bic.w	r2, r2, #1
 8004948:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800494c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004950:	f022 0204 	bic.w	r2, r2, #4
 8004954:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1c2      	bne.n	80048e2 <HAL_RCC_OscConfig+0x2fa>
      tickstart = HAL_GetTick();
 800495c:	f7ff f906 	bl	8003b6c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004960:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004964:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004966:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800496a:	0798      	lsls	r0, r3, #30
 800496c:	d5c2      	bpl.n	80048f4 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800496e:	f7ff f8fd 	bl	8003b6c <HAL_GetTick>
 8004972:	1bc0      	subs	r0, r0, r7
 8004974:	4548      	cmp	r0, r9
 8004976:	d9f6      	bls.n	8004966 <HAL_RCC_OscConfig+0x37e>
 8004978:	e6da      	b.n	8004730 <HAL_RCC_OscConfig+0x148>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800497a:	f7ff f8f7 	bl	8003b6c <HAL_GetTick>
 800497e:	1bc0      	subs	r0, r0, r7
 8004980:	4548      	cmp	r0, r9
 8004982:	d9b3      	bls.n	80048ec <HAL_RCC_OscConfig+0x304>
 8004984:	e6d4      	b.n	8004730 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004986:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004988:	b19b      	cbz	r3, 80049b2 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSI48_ENABLE();
 800498a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800498e:	f043 0301 	orr.w	r3, r3, #1
 8004992:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004996:	f7ff f8e9 	bl	8003b6c <HAL_GetTick>
 800499a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800499c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80049a0:	079a      	lsls	r2, r3, #30
 80049a2:	f53f aeb9 	bmi.w	8004718 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049a6:	f7ff f8e1 	bl	8003b6c <HAL_GetTick>
 80049aa:	1bc0      	subs	r0, r0, r7
 80049ac:	2802      	cmp	r0, #2
 80049ae:	d9f5      	bls.n	800499c <HAL_RCC_OscConfig+0x3b4>
 80049b0:	e6be      	b.n	8004730 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSI48_DISABLE();
 80049b2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80049b6:	f023 0301 	bic.w	r3, r3, #1
 80049ba:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80049be:	f7ff f8d5 	bl	8003b6c <HAL_GetTick>
 80049c2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049c4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80049c8:	079b      	lsls	r3, r3, #30
 80049ca:	f57f aea5 	bpl.w	8004718 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049ce:	f7ff f8cd 	bl	8003b6c <HAL_GetTick>
 80049d2:	1bc0      	subs	r0, r0, r7
 80049d4:	2802      	cmp	r0, #2
 80049d6:	d9f5      	bls.n	80049c4 <HAL_RCC_OscConfig+0x3dc>
 80049d8:	e6aa      	b.n	8004730 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049da:	2b02      	cmp	r3, #2
 80049dc:	f040 8088 	bne.w	8004af0 <HAL_RCC_OscConfig+0x508>
      pll_config = RCC->PLLCFGR;
 80049e0:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049e2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80049e4:	f003 0103 	and.w	r1, r3, #3
 80049e8:	4291      	cmp	r1, r2
 80049ea:	d122      	bne.n	8004a32 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049ec:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80049ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80049f2:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f4:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80049f8:	d11b      	bne.n	8004a32 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049fa:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80049fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a00:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004a04:	d115      	bne.n	8004a32 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a06:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8004a08:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a0c:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8004a10:	d10f      	bne.n	8004a32 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a12:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8004a14:	0852      	lsrs	r2, r2, #1
 8004a16:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8004a1a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a1c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8004a20:	d107      	bne.n	8004a32 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a22:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004a24:	0852      	lsrs	r2, r2, #1
 8004a26:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004a2a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a2c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8004a30:	d045      	beq.n	8004abe <HAL_RCC_OscConfig+0x4d6>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a32:	2e0c      	cmp	r6, #12
 8004a34:	f43f addc 	beq.w	80045f0 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	015e      	lsls	r6, r3, #5
 8004a3c:	f53f add8 	bmi.w	80045f0 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a46:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8004a48:	f7ff f890 	bl	8003b6c <HAL_GetTick>
 8004a4c:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	0198      	lsls	r0, r3, #6
 8004a52:	d42e      	bmi.n	8004ab2 <HAL_RCC_OscConfig+0x4ca>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a54:	68e2      	ldr	r2, [r4, #12]
 8004a56:	4b34      	ldr	r3, [pc, #208]	; (8004b28 <HAL_RCC_OscConfig+0x540>)
 8004a58:	4013      	ands	r3, r2
 8004a5a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004a60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a64:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004a66:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8004a6a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004a6c:	3a01      	subs	r2, #1
 8004a6e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004a72:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8004a74:	0852      	lsrs	r2, r2, #1
 8004a76:	3a01      	subs	r2, #1
 8004a78:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004a7c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8004a7e:	0852      	lsrs	r2, r2, #1
 8004a80:	3a01      	subs	r2, #1
 8004a82:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004a86:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8004a88:	6823      	ldr	r3, [r4, #0]
 8004a8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a8e:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a90:	68e3      	ldr	r3, [r4, #12]
 8004a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a96:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8004a98:	f7ff f868 	bl	8003b6c <HAL_GetTick>
 8004a9c:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	0199      	lsls	r1, r3, #6
 8004aa2:	f53f ae3d 	bmi.w	8004720 <HAL_RCC_OscConfig+0x138>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa6:	f7ff f861 	bl	8003b6c <HAL_GetTick>
 8004aaa:	1b40      	subs	r0, r0, r5
 8004aac:	2802      	cmp	r0, #2
 8004aae:	d9f6      	bls.n	8004a9e <HAL_RCC_OscConfig+0x4b6>
 8004ab0:	e63e      	b.n	8004730 <HAL_RCC_OscConfig+0x148>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ab2:	f7ff f85b 	bl	8003b6c <HAL_GetTick>
 8004ab6:	1b80      	subs	r0, r0, r6
 8004ab8:	2802      	cmp	r0, #2
 8004aba:	d9c8      	bls.n	8004a4e <HAL_RCC_OscConfig+0x466>
 8004abc:	e638      	b.n	8004730 <HAL_RCC_OscConfig+0x148>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	019a      	lsls	r2, r3, #6
 8004ac2:	f53f ae2d 	bmi.w	8004720 <HAL_RCC_OscConfig+0x138>
          __HAL_RCC_PLL_ENABLE();
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004acc:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ace:	68e3      	ldr	r3, [r4, #12]
 8004ad0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ad4:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8004ad6:	f7ff f849 	bl	8003b6c <HAL_GetTick>
 8004ada:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	019b      	lsls	r3, r3, #6
 8004ae0:	f53f ae1e 	bmi.w	8004720 <HAL_RCC_OscConfig+0x138>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae4:	f7ff f842 	bl	8003b6c <HAL_GetTick>
 8004ae8:	1b40      	subs	r0, r0, r5
 8004aea:	2802      	cmp	r0, #2
 8004aec:	d9f6      	bls.n	8004adc <HAL_RCC_OscConfig+0x4f4>
 8004aee:	e61f      	b.n	8004730 <HAL_RCC_OscConfig+0x148>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004af0:	2e0c      	cmp	r6, #12
 8004af2:	f43f ad7d 	beq.w	80045f0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004afc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004afe:	f7ff f835 	bl	8003b6c <HAL_GetTick>
 8004b02:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8004b0a:	d104      	bne.n	8004b16 <HAL_RCC_OscConfig+0x52e>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004b0c:	68e1      	ldr	r1, [r4, #12]
 8004b0e:	4a07      	ldr	r2, [pc, #28]	; (8004b2c <HAL_RCC_OscConfig+0x544>)
 8004b10:	400a      	ands	r2, r1
 8004b12:	60e2      	str	r2, [r4, #12]
 8004b14:	e604      	b.n	8004720 <HAL_RCC_OscConfig+0x138>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b16:	f7ff f829 	bl	8003b6c <HAL_GetTick>
 8004b1a:	1b40      	subs	r0, r0, r5
 8004b1c:	2802      	cmp	r0, #2
 8004b1e:	d9f1      	bls.n	8004b04 <HAL_RCC_OscConfig+0x51c>
 8004b20:	e606      	b.n	8004730 <HAL_RCC_OscConfig+0x148>
 8004b22:	bf00      	nop
 8004b24:	40007000 	.word	0x40007000
 8004b28:	019d808c 	.word	0x019d808c
 8004b2c:	feeefffc 	.word	0xfeeefffc

08004b30 <HAL_RCC_ClockConfig>:
{
 8004b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b34:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8004b36:	4604      	mov	r4, r0
 8004b38:	b910      	cbnz	r0, 8004b40 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004b3a:	2001      	movs	r0, #1
}
 8004b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b40:	4a4b      	ldr	r2, [pc, #300]	; (8004c70 <HAL_RCC_ClockConfig+0x140>)
 8004b42:	6813      	ldr	r3, [r2, #0]
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	428b      	cmp	r3, r1
 8004b4a:	d32c      	bcc.n	8004ba6 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b4c:	6820      	ldr	r0, [r4, #0]
 8004b4e:	0786      	lsls	r6, r0, #30
 8004b50:	d434      	bmi.n	8004bbc <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b52:	07c1      	lsls	r1, r0, #31
 8004b54:	d43f      	bmi.n	8004bd6 <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b56:	6821      	ldr	r1, [r4, #0]
 8004b58:	078a      	lsls	r2, r1, #30
 8004b5a:	d468      	bmi.n	8004c2e <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b5c:	4a44      	ldr	r2, [pc, #272]	; (8004c70 <HAL_RCC_ClockConfig+0x140>)
 8004b5e:	6813      	ldr	r3, [r2, #0]
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	42ab      	cmp	r3, r5
 8004b66:	d86f      	bhi.n	8004c48 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b68:	f011 0f04 	tst.w	r1, #4
 8004b6c:	4d41      	ldr	r5, [pc, #260]	; (8004c74 <HAL_RCC_ClockConfig+0x144>)
 8004b6e:	d177      	bne.n	8004c60 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b70:	070b      	lsls	r3, r1, #28
 8004b72:	d506      	bpl.n	8004b82 <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b74:	68ab      	ldr	r3, [r5, #8]
 8004b76:	6922      	ldr	r2, [r4, #16]
 8004b78:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004b7c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004b80:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b82:	f7ff fce3 	bl	800454c <HAL_RCC_GetSysClockFreq>
 8004b86:	68ab      	ldr	r3, [r5, #8]
 8004b88:	4a3b      	ldr	r2, [pc, #236]	; (8004c78 <HAL_RCC_ClockConfig+0x148>)
 8004b8a:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8004b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b92:	5cd3      	ldrb	r3, [r2, r3]
 8004b94:	f003 031f 	and.w	r3, r3, #31
 8004b98:	40d8      	lsrs	r0, r3
 8004b9a:	4b38      	ldr	r3, [pc, #224]	; (8004c7c <HAL_RCC_ClockConfig+0x14c>)
 8004b9c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8004b9e:	4b38      	ldr	r3, [pc, #224]	; (8004c80 <HAL_RCC_ClockConfig+0x150>)
 8004ba0:	6818      	ldr	r0, [r3, #0]
 8004ba2:	f7fe bfa1 	b.w	8003ae8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba6:	6813      	ldr	r3, [r2, #0]
 8004ba8:	f023 0307 	bic.w	r3, r3, #7
 8004bac:	430b      	orrs	r3, r1
 8004bae:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb0:	6813      	ldr	r3, [r2, #0]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	428b      	cmp	r3, r1
 8004bb8:	d1bf      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xa>
 8004bba:	e7c7      	b.n	8004b4c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004bbc:	4a2d      	ldr	r2, [pc, #180]	; (8004c74 <HAL_RCC_ClockConfig+0x144>)
 8004bbe:	68a6      	ldr	r6, [r4, #8]
 8004bc0:	6891      	ldr	r1, [r2, #8]
 8004bc2:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 8004bc6:	428e      	cmp	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bc8:	bf81      	itttt	hi
 8004bca:	6893      	ldrhi	r3, [r2, #8]
 8004bcc:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 8004bd0:	4333      	orrhi	r3, r6
 8004bd2:	6093      	strhi	r3, [r2, #8]
 8004bd4:	e7bd      	b.n	8004b52 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bd6:	6862      	ldr	r2, [r4, #4]
 8004bd8:	4e26      	ldr	r6, [pc, #152]	; (8004c74 <HAL_RCC_ClockConfig+0x144>)
 8004bda:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bdc:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bde:	d11a      	bne.n	8004c16 <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004be4:	d0a9      	beq.n	8004b3a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004be6:	68b3      	ldr	r3, [r6, #8]
 8004be8:	f023 0303 	bic.w	r3, r3, #3
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004bf0:	f7fe ffbc 	bl	8003b6c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004bf8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bfa:	68b3      	ldr	r3, [r6, #8]
 8004bfc:	6862      	ldr	r2, [r4, #4]
 8004bfe:	f003 030c 	and.w	r3, r3, #12
 8004c02:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004c06:	d0a6      	beq.n	8004b56 <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c08:	f7fe ffb0 	bl	8003b6c <HAL_GetTick>
 8004c0c:	1bc0      	subs	r0, r0, r7
 8004c0e:	4540      	cmp	r0, r8
 8004c10:	d9f3      	bls.n	8004bfa <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 8004c12:	2003      	movs	r0, #3
 8004c14:	e792      	b.n	8004b3c <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c16:	2a02      	cmp	r2, #2
 8004c18:	d102      	bne.n	8004c20 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c1a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004c1e:	e7e1      	b.n	8004be4 <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c20:	b912      	cbnz	r2, 8004c28 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c22:	f013 0f02 	tst.w	r3, #2
 8004c26:	e7dd      	b.n	8004be4 <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c28:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004c2c:	e7da      	b.n	8004be4 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c2e:	4a11      	ldr	r2, [pc, #68]	; (8004c74 <HAL_RCC_ClockConfig+0x144>)
 8004c30:	68a6      	ldr	r6, [r4, #8]
 8004c32:	6890      	ldr	r0, [r2, #8]
 8004c34:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8004c38:	4286      	cmp	r6, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c3a:	bf3f      	itttt	cc
 8004c3c:	6893      	ldrcc	r3, [r2, #8]
 8004c3e:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 8004c42:	4333      	orrcc	r3, r6
 8004c44:	6093      	strcc	r3, [r2, #8]
 8004c46:	e789      	b.n	8004b5c <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c48:	6813      	ldr	r3, [r2, #0]
 8004c4a:	f023 0307 	bic.w	r3, r3, #7
 8004c4e:	432b      	orrs	r3, r5
 8004c50:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c52:	6813      	ldr	r3, [r2, #0]
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	42ab      	cmp	r3, r5
 8004c5a:	f47f af6e 	bne.w	8004b3a <HAL_RCC_ClockConfig+0xa>
 8004c5e:	e783      	b.n	8004b68 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c60:	68ab      	ldr	r3, [r5, #8]
 8004c62:	68e2      	ldr	r2, [r4, #12]
 8004c64:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60ab      	str	r3, [r5, #8]
 8004c6c:	e780      	b.n	8004b70 <HAL_RCC_ClockConfig+0x40>
 8004c6e:	bf00      	nop
 8004c70:	40022000 	.word	0x40022000
 8004c74:	40021000 	.word	0x40021000
 8004c78:	08008920 	.word	0x08008920
 8004c7c:	20000014 	.word	0x20000014
 8004c80:	2000001c 	.word	0x2000001c

08004c84 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c84:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <HAL_RCC_GetPCLK1Freq+0x18>)
 8004c86:	4a06      	ldr	r2, [pc, #24]	; (8004ca0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004c8e:	5cd3      	ldrb	r3, [r2, r3]
 8004c90:	4a04      	ldr	r2, [pc, #16]	; (8004ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c92:	6810      	ldr	r0, [r2, #0]
 8004c94:	f003 031f 	and.w	r3, r3, #31
}
 8004c98:	40d8      	lsrs	r0, r3
 8004c9a:	4770      	bx	lr
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	08008930 	.word	0x08008930
 8004ca4:	20000014 	.word	0x20000014

08004ca8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ca8:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004caa:	4a06      	ldr	r2, [pc, #24]	; (8004cc4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004cb2:	5cd3      	ldrb	r3, [r2, r3]
 8004cb4:	4a04      	ldr	r2, [pc, #16]	; (8004cc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004cb6:	6810      	ldr	r0, [r2, #0]
 8004cb8:	f003 031f 	and.w	r3, r3, #31
}
 8004cbc:	40d8      	lsrs	r0, r3
 8004cbe:	4770      	bx	lr
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	08008930 	.word	0x08008930
 8004cc8:	20000014 	.word	0x20000014

08004ccc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cce:	4c43      	ldr	r4, [pc, #268]	; (8004ddc <RCCEx_PLLSAI1_Config+0x110>)
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004cd0:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cd2:	68e2      	ldr	r2, [r4, #12]
{
 8004cd4:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cd6:	0790      	lsls	r0, r2, #30
{
 8004cd8:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cda:	d039      	beq.n	8004d50 <RCCEx_PLLSAI1_Config+0x84>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004cdc:	68e2      	ldr	r2, [r4, #12]
 8004cde:	f002 0203 	and.w	r2, r2, #3
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d177      	bne.n	8004dd6 <RCCEx_PLLSAI1_Config+0x10a>
       ||
 8004ce6:	2a00      	cmp	r2, #0
 8004ce8:	d075      	beq.n	8004dd6 <RCCEx_PLLSAI1_Config+0x10a>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004cea:	68e3      	ldr	r3, [r4, #12]
       ||
 8004cec:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004cee:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004cf2:	3301      	adds	r3, #1
       ||
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d16e      	bne.n	8004dd6 <RCCEx_PLLSAI1_Config+0x10a>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cfe:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d00:	f7fe ff34 	bl	8003b6c <HAL_GetTick>
 8004d04:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	011a      	lsls	r2, r3, #4
 8004d0a:	d440      	bmi.n	8004d8e <RCCEx_PLLSAI1_Config+0xc2>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d0c:	68ab      	ldr	r3, [r5, #8]
 8004d0e:	0218      	lsls	r0, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 8004d10:	2e00      	cmp	r6, #0
 8004d12:	d043      	beq.n	8004d9c <RCCEx_PLLSAI1_Config+0xd0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d14:	2e01      	cmp	r6, #1
 8004d16:	d14c      	bne.n	8004db2 <RCCEx_PLLSAI1_Config+0xe6>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d18:	692a      	ldr	r2, [r5, #16]
 8004d1a:	6921      	ldr	r1, [r4, #16]
 8004d1c:	0852      	lsrs	r2, r2, #1
 8004d1e:	1e53      	subs	r3, r2, #1
 8004d20:	f421 02c0 	bic.w	r2, r1, #6291456	; 0x600000
 8004d24:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8004d28:	4302      	orrs	r2, r0
 8004d2a:	ea42 5243 	orr.w	r2, r2, r3, lsl #21
 8004d2e:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d30:	6823      	ldr	r3, [r4, #0]
 8004d32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d36:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d38:	f7fe ff18 	bl	8003b6c <HAL_GetTick>
 8004d3c:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	d542      	bpl.n	8004dca <RCCEx_PLLSAI1_Config+0xfe>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d44:	6923      	ldr	r3, [r4, #16]
 8004d46:	69aa      	ldr	r2, [r5, #24]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	6123      	str	r3, [r4, #16]
 8004d4c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
 8004d4e:	e024      	b.n	8004d9a <RCCEx_PLLSAI1_Config+0xce>
    switch(PllSai1->PLLSAI1Source)
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d011      	beq.n	8004d78 <RCCEx_PLLSAI1_Config+0xac>
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	d013      	beq.n	8004d80 <RCCEx_PLLSAI1_Config+0xb4>
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d13c      	bne.n	8004dd6 <RCCEx_PLLSAI1_Config+0x10a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d5c:	6822      	ldr	r2, [r4, #0]
 8004d5e:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d62:	d038      	beq.n	8004dd6 <RCCEx_PLLSAI1_Config+0x10a>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d64:	68e0      	ldr	r0, [r4, #12]
 8004d66:	686a      	ldr	r2, [r5, #4]
 8004d68:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 8004d6c:	3a01      	subs	r2, #1
 8004d6e:	4318      	orrs	r0, r3
 8004d70:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8004d74:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 8004d76:	e7bf      	b.n	8004cf8 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d78:	6822      	ldr	r2, [r4, #0]
 8004d7a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8004d7e:	e7f0      	b.n	8004d62 <RCCEx_PLLSAI1_Config+0x96>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d80:	6822      	ldr	r2, [r4, #0]
 8004d82:	0391      	lsls	r1, r2, #14
 8004d84:	d4ee      	bmi.n	8004d64 <RCCEx_PLLSAI1_Config+0x98>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d86:	6822      	ldr	r2, [r4, #0]
 8004d88:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8004d8c:	e7e9      	b.n	8004d62 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d8e:	f7fe feed 	bl	8003b6c <HAL_GetTick>
 8004d92:	1bc0      	subs	r0, r0, r7
 8004d94:	2802      	cmp	r0, #2
 8004d96:	d9b6      	bls.n	8004d06 <RCCEx_PLLSAI1_Config+0x3a>
        status = HAL_TIMEOUT;
 8004d98:	2003      	movs	r0, #3
}
 8004d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d9c:	6922      	ldr	r2, [r4, #16]
 8004d9e:	68eb      	ldr	r3, [r5, #12]
 8004da0:	ea40 63c3 	orr.w	r3, r0, r3, lsl #27
 8004da4:	f022 4078 	bic.w	r0, r2, #4160749568	; 0xf8000000
 8004da8:	f420 40fe 	bic.w	r0, r0, #32512	; 0x7f00
 8004dac:	4303      	orrs	r3, r0
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dae:	6123      	str	r3, [r4, #16]
 8004db0:	e7be      	b.n	8004d30 <RCCEx_PLLSAI1_Config+0x64>
 8004db2:	696b      	ldr	r3, [r5, #20]
 8004db4:	6922      	ldr	r2, [r4, #16]
 8004db6:	085b      	lsrs	r3, r3, #1
 8004db8:	1e59      	subs	r1, r3, #1
 8004dba:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 8004dbe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004dc2:	4303      	orrs	r3, r0
 8004dc4:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8004dc8:	e7f1      	b.n	8004dae <RCCEx_PLLSAI1_Config+0xe2>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dca:	f7fe fecf 	bl	8003b6c <HAL_GetTick>
 8004dce:	1b80      	subs	r0, r0, r6
 8004dd0:	2802      	cmp	r0, #2
 8004dd2:	d9b4      	bls.n	8004d3e <RCCEx_PLLSAI1_Config+0x72>
 8004dd4:	e7e0      	b.n	8004d98 <RCCEx_PLLSAI1_Config+0xcc>
      status = HAL_ERROR;
 8004dd6:	2001      	movs	r0, #1
 8004dd8:	e7df      	b.n	8004d9a <RCCEx_PLLSAI1_Config+0xce>
 8004dda:	bf00      	nop
 8004ddc:	40021000 	.word	0x40021000

08004de0 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004de0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004de4:	6805      	ldr	r5, [r0, #0]
 8004de6:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 8004dea:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004dec:	d009      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004dee:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004df0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8004df4:	d035      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x82>
 8004df6:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8004dfa:	d037      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8004dfc:	2900      	cmp	r1, #0
 8004dfe:	d040      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004e00:	2501      	movs	r5, #1
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e02:	6823      	ldr	r3, [r4, #0]
 8004e04:	039e      	lsls	r6, r3, #14
 8004e06:	d551      	bpl.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0xcc>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e08:	4e95      	ldr	r6, [pc, #596]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e0a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8004e0c:	00d8      	lsls	r0, r3, #3
 8004e0e:	d43f      	bmi.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e10:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8004e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e16:	65b3      	str	r3, [r6, #88]	; 0x58
 8004e18:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8004e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e1e:	9301      	str	r3, [sp, #4]
 8004e20:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004e22:	2701      	movs	r7, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e24:	f8df 823c 	ldr.w	r8, [pc, #572]	; 8005064 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8004e28:	f8d8 3000 	ldr.w	r3, [r8]
 8004e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e30:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 8004e34:	f7fe fe9a 	bl	8003b6c <HAL_GetTick>
 8004e38:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e3a:	f8d8 3000 	ldr.w	r3, [r8]
 8004e3e:	05d9      	lsls	r1, r3, #23
 8004e40:	d528      	bpl.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    if(ret == HAL_OK)
 8004e42:	bb75      	cbnz	r5, 8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e44:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e48:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004e4c:	f040 80c7 	bne.w	8004fde <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e50:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8004e54:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 8004e60:	e01f      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004e62:	4a7f      	ldr	r2, [pc, #508]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e64:	68d3      	ldr	r3, [r2, #12]
 8004e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e6a:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e6c:	4a7c      	ldr	r2, [pc, #496]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e6e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004e70:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004e74:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004e78:	430b      	orrs	r3, r1
 8004e7a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004e7e:	2500      	movs	r5, #0
 8004e80:	e7bf      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x22>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e82:	3004      	adds	r0, #4
 8004e84:	f7ff ff22 	bl	8004ccc <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 8004e88:	4605      	mov	r5, r0
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	d1b9      	bne.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8004e8e:	e7ed      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    FlagStatus       pwrclkchanged = RESET;
 8004e90:	2700      	movs	r7, #0
 8004e92:	e7c7      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x44>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e94:	f7fe fe6a 	bl	8003b6c <HAL_GetTick>
 8004e98:	eba0 0009 	sub.w	r0, r0, r9
 8004e9c:	2802      	cmp	r0, #2
 8004e9e:	d9cc      	bls.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = HAL_TIMEOUT;
 8004ea0:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8004ea2:	b11f      	cbz	r7, 8004eac <HAL_RCCEx_PeriphCLKConfig+0xcc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ea4:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8004ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	07df      	lsls	r7, r3, #31
 8004eb0:	d508      	bpl.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004eb2:	496b      	ldr	r1, [pc, #428]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eb4:	6a20      	ldr	r0, [r4, #32]
 8004eb6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004eba:	f022 0203 	bic.w	r2, r2, #3
 8004ebe:	4302      	orrs	r2, r0
 8004ec0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ec4:	079e      	lsls	r6, r3, #30
 8004ec6:	d508      	bpl.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xfa>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ec8:	4965      	ldr	r1, [pc, #404]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004ecc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004ed0:	f022 020c 	bic.w	r2, r2, #12
 8004ed4:	4302      	orrs	r2, r0
 8004ed6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004eda:	0698      	lsls	r0, r3, #26
 8004edc:	d508      	bpl.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ede:	4960      	ldr	r1, [pc, #384]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ee0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004ee2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004ee6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004eea:	4302      	orrs	r2, r0
 8004eec:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ef0:	0599      	lsls	r1, r3, #22
 8004ef2:	d508      	bpl.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ef4:	495a      	ldr	r1, [pc, #360]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ef6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004ef8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004efc:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004f00:	4302      	orrs	r2, r0
 8004f02:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f06:	055a      	lsls	r2, r3, #21
 8004f08:	d508      	bpl.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f0a:	4955      	ldr	r1, [pc, #340]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f0c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004f0e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004f12:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004f16:	4302      	orrs	r2, r0
 8004f18:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f1c:	065f      	lsls	r7, r3, #25
 8004f1e:	d508      	bpl.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f20:	494f      	ldr	r1, [pc, #316]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f22:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004f24:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004f28:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004f2c:	4302      	orrs	r2, r0
 8004f2e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f32:	05de      	lsls	r6, r3, #23
 8004f34:	d508      	bpl.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f36:	494a      	ldr	r1, [pc, #296]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f38:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004f3a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004f3e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004f42:	4302      	orrs	r2, r0
 8004f44:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f48:	0498      	lsls	r0, r3, #18
 8004f4a:	d50f      	bpl.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f4c:	4a44      	ldr	r2, [pc, #272]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f4e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004f50:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004f54:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004f58:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f5a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f5e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f62:	d166      	bne.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f64:	68d3      	ldr	r3, [r2, #12]
 8004f66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f6a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	0359      	lsls	r1, r3, #13
 8004f70:	d50f      	bpl.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f72:	4a3b      	ldr	r2, [pc, #236]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f74:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004f76:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004f7a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004f7e:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f80:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f88:	d15e      	bne.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x268>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f8a:	68d3      	ldr	r3, [r2, #12]
 8004f8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f90:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	045a      	lsls	r2, r3, #17
 8004f96:	d512      	bpl.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f98:	4931      	ldr	r1, [pc, #196]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f9a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004f9c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004fa0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004fa4:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004fa6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004fae:	d106      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x1de>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004fb0:	2102      	movs	r1, #2
 8004fb2:	1d20      	adds	r0, r4, #4
 8004fb4:	f7ff fe8a 	bl	8004ccc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	bf18      	it	ne
 8004fbc:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	041b      	lsls	r3, r3, #16
 8004fc2:	d508      	bpl.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fc4:	4a26      	ldr	r2, [pc, #152]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fc6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004fc8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004fcc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	b003      	add	sp, #12
 8004fda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fde:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	f43f af35 	beq.w	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x70>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fe6:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fea:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8004fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff2:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ff6:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ffa:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005002:	07d2      	lsls	r2, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005004:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8005008:	f8c6 1090 	str.w	r1, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800500c:	f57f af20 	bpl.w	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x70>
        tickstart = HAL_GetTick();
 8005010:	f7fe fdac 	bl	8003b6c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005014:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005018:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800501a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800501e:	079b      	lsls	r3, r3, #30
 8005020:	f53f af16 	bmi.w	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x70>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005024:	f7fe fda2 	bl	8003b6c <HAL_GetTick>
 8005028:	eba0 0008 	sub.w	r0, r0, r8
 800502c:	4548      	cmp	r0, r9
 800502e:	d9f4      	bls.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x23a>
 8005030:	e736      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005032:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8005036:	d199      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005038:	2101      	movs	r1, #1
 800503a:	1d20      	adds	r0, r4, #4
 800503c:	f7ff fe46 	bl	8004ccc <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8005040:	2800      	cmp	r0, #0
 8005042:	bf18      	it	ne
 8005044:	4605      	movne	r5, r0
 8005046:	e791      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005048:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800504c:	d1a1      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800504e:	2101      	movs	r1, #1
 8005050:	1d20      	adds	r0, r4, #4
 8005052:	f7ff fe3b 	bl	8004ccc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8005056:	2800      	cmp	r0, #0
 8005058:	bf18      	it	ne
 800505a:	4605      	movne	r5, r0
 800505c:	e799      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800505e:	bf00      	nop
 8005060:	40021000 	.word	0x40021000
 8005064:	40007000 	.word	0x40007000

08005068 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005068:	b570      	push	{r4, r5, r6, lr}
 800506a:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800506c:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800506e:	6921      	ldr	r1, [r4, #16]
 8005070:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005072:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005074:	69c0      	ldr	r0, [r0, #28]
 8005076:	430a      	orrs	r2, r1
 8005078:	6961      	ldr	r1, [r4, #20]
 800507a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800507c:	4967      	ldr	r1, [pc, #412]	; (800521c <UART_SetConfig+0x1b4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800507e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005080:	4029      	ands	r1, r5
 8005082:	430a      	orrs	r2, r1
 8005084:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	68e1      	ldr	r1, [r4, #12]
 800508a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800508e:	430a      	orrs	r2, r1
 8005090:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005092:	4a63      	ldr	r2, [pc, #396]	; (8005220 <UART_SetConfig+0x1b8>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005094:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005096:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005098:	bf1c      	itt	ne
 800509a:	6a22      	ldrne	r2, [r4, #32]
 800509c:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80050a4:	430a      	orrs	r2, r1
 80050a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050a8:	4a5e      	ldr	r2, [pc, #376]	; (8005224 <UART_SetConfig+0x1bc>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d116      	bne.n	80050dc <UART_SetConfig+0x74>
 80050ae:	4b5e      	ldr	r3, [pc, #376]	; (8005228 <UART_SetConfig+0x1c0>)
 80050b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b4:	f003 0303 	and.w	r3, r3, #3
 80050b8:	3b01      	subs	r3, #1
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	f200 80a7 	bhi.w	800520e <UART_SetConfig+0x1a6>
 80050c0:	4a5a      	ldr	r2, [pc, #360]	; (800522c <UART_SetConfig+0x1c4>)
 80050c2:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050c4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80050c8:	d170      	bne.n	80051ac <UART_SetConfig+0x144>
  {
    switch (clocksource)
 80050ca:	2b08      	cmp	r3, #8
 80050cc:	d820      	bhi.n	8005110 <UART_SetConfig+0xa8>
 80050ce:	e8df f003 	tbb	[pc, r3]
 80050d2:	a14f      	.short	0xa14f
 80050d4:	1f681f6b 	.word	0x1f681f6b
 80050d8:	1f1f      	.short	0x1f1f
 80050da:	53          	.byte	0x53
 80050db:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050dc:	4a54      	ldr	r2, [pc, #336]	; (8005230 <UART_SetConfig+0x1c8>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d106      	bne.n	80050f0 <UART_SetConfig+0x88>
 80050e2:	4b51      	ldr	r3, [pc, #324]	; (8005228 <UART_SetConfig+0x1c0>)
 80050e4:	4a53      	ldr	r2, [pc, #332]	; (8005234 <UART_SetConfig+0x1cc>)
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ea:	f003 030c 	and.w	r3, r3, #12
 80050ee:	e7e8      	b.n	80050c2 <UART_SetConfig+0x5a>
 80050f0:	4a4b      	ldr	r2, [pc, #300]	; (8005220 <UART_SetConfig+0x1b8>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d10c      	bne.n	8005110 <UART_SetConfig+0xa8>
 80050f6:	4b4c      	ldr	r3, [pc, #304]	; (8005228 <UART_SetConfig+0x1c0>)
 80050f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005100:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005104:	d017      	beq.n	8005136 <UART_SetConfig+0xce>
 8005106:	d805      	bhi.n	8005114 <UART_SetConfig+0xac>
 8005108:	b153      	cbz	r3, 8005120 <UART_SetConfig+0xb8>
 800510a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800510e:	d00f      	beq.n	8005130 <UART_SetConfig+0xc8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005110:	2001      	movs	r0, #1
 8005112:	e009      	b.n	8005128 <UART_SetConfig+0xc0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005114:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005118:	d1fa      	bne.n	8005110 <UART_SetConfig+0xa8>
        pclk = (uint32_t) LSE_VALUE;
 800511a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800511e:	e00b      	b.n	8005138 <UART_SetConfig+0xd0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005120:	f7ff fdb0 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005124:	b940      	cbnz	r0, 8005138 <UART_SetConfig+0xd0>
 8005126:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005128:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800512a:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 800512e:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetSysClockFreq();
 8005130:	f7ff fa0c 	bl	800454c <HAL_RCC_GetSysClockFreq>
        break;
 8005134:	e7f6      	b.n	8005124 <UART_SetConfig+0xbc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005136:	4840      	ldr	r0, [pc, #256]	; (8005238 <UART_SetConfig+0x1d0>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005138:	6862      	ldr	r2, [r4, #4]
 800513a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800513e:	4283      	cmp	r3, r0
 8005140:	d8e6      	bhi.n	8005110 <UART_SetConfig+0xa8>
 8005142:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8005146:	d8e3      	bhi.n	8005110 <UART_SetConfig+0xa8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005148:	0851      	lsrs	r1, r2, #1
 800514a:	2500      	movs	r5, #0
 800514c:	468c      	mov	ip, r1
 800514e:	f44f 7680 	mov.w	r6, #256	; 0x100
 8005152:	4629      	mov	r1, r5
 8005154:	fbe0 c106 	umlal	ip, r1, r0, r6
 8005158:	462b      	mov	r3, r5
 800515a:	4660      	mov	r0, ip
 800515c:	f7fb fd24 	bl	8000ba8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005160:	4b36      	ldr	r3, [pc, #216]	; (800523c <UART_SetConfig+0x1d4>)
 8005162:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005166:	429a      	cmp	r2, r3
 8005168:	d8d2      	bhi.n	8005110 <UART_SetConfig+0xa8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	60d8      	str	r0, [r3, #12]
 800516e:	e7da      	b.n	8005126 <UART_SetConfig+0xbe>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005170:	f7ff fd88 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005174:	2800      	cmp	r0, #0
 8005176:	d0d6      	beq.n	8005126 <UART_SetConfig+0xbe>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005178:	6862      	ldr	r2, [r4, #4]
 800517a:	0853      	lsrs	r3, r2, #1
 800517c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005180:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005184:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005188:	f1a0 0210 	sub.w	r2, r0, #16
 800518c:	429a      	cmp	r2, r3
 800518e:	d8bf      	bhi.n	8005110 <UART_SetConfig+0xa8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005190:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8005194:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005196:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005198:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 800519c:	4318      	orrs	r0, r3
 800519e:	60d0      	str	r0, [r2, #12]
 80051a0:	e7c1      	b.n	8005126 <UART_SetConfig+0xbe>
        pclk = HAL_RCC_GetSysClockFreq();
 80051a2:	f7ff f9d3 	bl	800454c <HAL_RCC_GetSysClockFreq>
        break;
 80051a6:	e7e5      	b.n	8005174 <UART_SetConfig+0x10c>
        pclk = (uint32_t) HSI_VALUE;
 80051a8:	4823      	ldr	r0, [pc, #140]	; (8005238 <UART_SetConfig+0x1d0>)
 80051aa:	e7e5      	b.n	8005178 <UART_SetConfig+0x110>
    switch (clocksource)
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d8af      	bhi.n	8005110 <UART_SetConfig+0xa8>
 80051b0:	a201      	add	r2, pc, #4	; (adr r2, 80051b8 <UART_SetConfig+0x150>)
 80051b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b6:	bf00      	nop
 80051b8:	080051f5 	.word	0x080051f5
 80051bc:	080051ff 	.word	0x080051ff
 80051c0:	0800520b 	.word	0x0800520b
 80051c4:	08005111 	.word	0x08005111
 80051c8:	08005205 	.word	0x08005205
 80051cc:	08005111 	.word	0x08005111
 80051d0:	08005111 	.word	0x08005111
 80051d4:	08005111 	.word	0x08005111
 80051d8:	080051dd 	.word	0x080051dd
 80051dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051e0:	6863      	ldr	r3, [r4, #4]
 80051e2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80051e6:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051ea:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80051ee:	f1a0 0210 	sub.w	r2, r0, #16
 80051f2:	e7b8      	b.n	8005166 <UART_SetConfig+0xfe>
        pclk = HAL_RCC_GetPCLK1Freq();
 80051f4:	f7ff fd46 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80051f8:	2800      	cmp	r0, #0
 80051fa:	d094      	beq.n	8005126 <UART_SetConfig+0xbe>
 80051fc:	e7f0      	b.n	80051e0 <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetPCLK2Freq();
 80051fe:	f7ff fd53 	bl	8004ca8 <HAL_RCC_GetPCLK2Freq>
        break;
 8005202:	e7f9      	b.n	80051f8 <UART_SetConfig+0x190>
        pclk = HAL_RCC_GetSysClockFreq();
 8005204:	f7ff f9a2 	bl	800454c <HAL_RCC_GetSysClockFreq>
        break;
 8005208:	e7f6      	b.n	80051f8 <UART_SetConfig+0x190>
        pclk = (uint32_t) HSI_VALUE;
 800520a:	480b      	ldr	r0, [pc, #44]	; (8005238 <UART_SetConfig+0x1d0>)
 800520c:	e7e8      	b.n	80051e0 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800520e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005212:	d1f4      	bne.n	80051fe <UART_SetConfig+0x196>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005214:	f7ff fd48 	bl	8004ca8 <HAL_RCC_GetPCLK2Freq>
        break;
 8005218:	e7ac      	b.n	8005174 <UART_SetConfig+0x10c>
 800521a:	bf00      	nop
 800521c:	efff69f3 	.word	0xefff69f3
 8005220:	40008000 	.word	0x40008000
 8005224:	40013800 	.word	0x40013800
 8005228:	40021000 	.word	0x40021000
 800522c:	08009936 	.word	0x08009936
 8005230:	40004400 	.word	0x40004400
 8005234:	08009939 	.word	0x08009939
 8005238:	00f42400 	.word	0x00f42400
 800523c:	000ffcff 	.word	0x000ffcff

08005240 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005240:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005242:	07da      	lsls	r2, r3, #31
{
 8005244:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005246:	d506      	bpl.n	8005256 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005248:	6801      	ldr	r1, [r0, #0]
 800524a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800524c:	684a      	ldr	r2, [r1, #4]
 800524e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005252:	4322      	orrs	r2, r4
 8005254:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005256:	079c      	lsls	r4, r3, #30
 8005258:	d506      	bpl.n	8005268 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800525a:	6801      	ldr	r1, [r0, #0]
 800525c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800525e:	684a      	ldr	r2, [r1, #4]
 8005260:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005264:	4322      	orrs	r2, r4
 8005266:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005268:	0759      	lsls	r1, r3, #29
 800526a:	d506      	bpl.n	800527a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800526c:	6801      	ldr	r1, [r0, #0]
 800526e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005270:	684a      	ldr	r2, [r1, #4]
 8005272:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005276:	4322      	orrs	r2, r4
 8005278:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800527a:	071a      	lsls	r2, r3, #28
 800527c:	d506      	bpl.n	800528c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800527e:	6801      	ldr	r1, [r0, #0]
 8005280:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005282:	684a      	ldr	r2, [r1, #4]
 8005284:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005288:	4322      	orrs	r2, r4
 800528a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800528c:	06dc      	lsls	r4, r3, #27
 800528e:	d506      	bpl.n	800529e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005290:	6801      	ldr	r1, [r0, #0]
 8005292:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005294:	688a      	ldr	r2, [r1, #8]
 8005296:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800529a:	4322      	orrs	r2, r4
 800529c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800529e:	0699      	lsls	r1, r3, #26
 80052a0:	d506      	bpl.n	80052b0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052a2:	6801      	ldr	r1, [r0, #0]
 80052a4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80052a6:	688a      	ldr	r2, [r1, #8]
 80052a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052ac:	4322      	orrs	r2, r4
 80052ae:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052b0:	065a      	lsls	r2, r3, #25
 80052b2:	d50f      	bpl.n	80052d4 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052b4:	6801      	ldr	r1, [r0, #0]
 80052b6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80052b8:	684a      	ldr	r2, [r1, #4]
 80052ba:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80052be:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052c0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052c4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052c6:	d105      	bne.n	80052d4 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052c8:	684a      	ldr	r2, [r1, #4]
 80052ca:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80052cc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80052d0:	4322      	orrs	r2, r4
 80052d2:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052d4:	061b      	lsls	r3, r3, #24
 80052d6:	d506      	bpl.n	80052e6 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052d8:	6802      	ldr	r2, [r0, #0]
 80052da:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80052dc:	6853      	ldr	r3, [r2, #4]
 80052de:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80052e2:	430b      	orrs	r3, r1
 80052e4:	6053      	str	r3, [r2, #4]
  }
}
 80052e6:	bd10      	pop	{r4, pc}

080052e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ec:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80052f0:	4604      	mov	r4, r0
 80052f2:	460e      	mov	r6, r1
 80052f4:	4615      	mov	r5, r2
 80052f6:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f8:	6822      	ldr	r2, [r4, #0]
 80052fa:	69d3      	ldr	r3, [r2, #28]
 80052fc:	ea36 0303 	bics.w	r3, r6, r3
 8005300:	bf0c      	ite	eq
 8005302:	2301      	moveq	r3, #1
 8005304:	2300      	movne	r3, #0
 8005306:	42ab      	cmp	r3, r5
 8005308:	d001      	beq.n	800530e <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800530a:	2000      	movs	r0, #0
 800530c:	e025      	b.n	800535a <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 800530e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005312:	d0f2      	beq.n	80052fa <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005314:	f7fe fc2a 	bl	8003b6c <HAL_GetTick>
 8005318:	1bc0      	subs	r0, r0, r7
 800531a:	4540      	cmp	r0, r8
 800531c:	6820      	ldr	r0, [r4, #0]
 800531e:	d802      	bhi.n	8005326 <UART_WaitOnFlagUntilTimeout+0x3e>
 8005320:	f1b8 0f00 	cmp.w	r8, #0
 8005324:	d11b      	bne.n	800535e <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005326:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800532a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532e:	e840 3200 	strex	r2, r3, [r0]
 8005332:	2a00      	cmp	r2, #0
 8005334:	d1f7      	bne.n	8005326 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005336:	f100 0308 	add.w	r3, r0, #8
 800533a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800533e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	f100 0108 	add.w	r1, r0, #8
 8005346:	e841 3200 	strex	r2, r3, [r1]
 800534a:	2a00      	cmp	r2, #0
 800534c:	d1f3      	bne.n	8005336 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 800534e:	2320      	movs	r3, #32
 8005350:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005352:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8005354:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 8005358:	2003      	movs	r0, #3
}
 800535a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800535e:	6803      	ldr	r3, [r0, #0]
 8005360:	075a      	lsls	r2, r3, #29
 8005362:	d5c9      	bpl.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005364:	69c3      	ldr	r3, [r0, #28]
 8005366:	051b      	lsls	r3, r3, #20
 8005368:	d5c6      	bpl.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800536a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800536e:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005370:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005374:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005378:	e840 3200 	strex	r2, r3, [r0]
 800537c:	2a00      	cmp	r2, #0
 800537e:	d1f7      	bne.n	8005370 <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005380:	f100 0308 	add.w	r3, r0, #8
 8005384:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005388:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538c:	f100 0108 	add.w	r1, r0, #8
 8005390:	e841 3200 	strex	r2, r3, [r1]
 8005394:	2a00      	cmp	r2, #0
 8005396:	d1f3      	bne.n	8005380 <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 8005398:	2320      	movs	r3, #32
 800539a:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800539c:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800539e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80053a2:	e7d7      	b.n	8005354 <UART_WaitOnFlagUntilTimeout+0x6c>

080053a4 <HAL_UART_Transmit>:
{
 80053a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80053a8:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80053aa:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80053ac:	2b20      	cmp	r3, #32
{
 80053ae:	4604      	mov	r4, r0
 80053b0:	460e      	mov	r6, r1
 80053b2:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80053b4:	d14e      	bne.n	8005454 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 80053b6:	2900      	cmp	r1, #0
 80053b8:	d04a      	beq.n	8005450 <HAL_UART_Transmit+0xac>
 80053ba:	2a00      	cmp	r2, #0
 80053bc:	d048      	beq.n	8005450 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 80053be:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d046      	beq.n	8005454 <HAL_UART_Transmit+0xb0>
 80053c6:	2301      	movs	r3, #1
 80053c8:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053cc:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053ce:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d0:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053d4:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 80053d6:	f7fe fbc9 	bl	8003b6c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053da:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 80053dc:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053e0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80053e4:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 80053e6:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053ea:	d103      	bne.n	80053f4 <HAL_UART_Transmit+0x50>
 80053ec:	6922      	ldr	r2, [r4, #16]
 80053ee:	b90a      	cbnz	r2, 80053f4 <HAL_UART_Transmit+0x50>
 80053f0:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80053f2:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 80053f4:	2200      	movs	r2, #0
 80053f6:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 80053fa:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053fe:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8005402:	b292      	uxth	r2, r2
 8005404:	b93a      	cbnz	r2, 8005416 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005406:	2140      	movs	r1, #64	; 0x40
 8005408:	4620      	mov	r0, r4
 800540a:	f7ff ff6d 	bl	80052e8 <UART_WaitOnFlagUntilTimeout>
 800540e:	b950      	cbnz	r0, 8005426 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8005410:	2320      	movs	r3, #32
 8005412:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8005414:	e008      	b.n	8005428 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005416:	2200      	movs	r2, #0
 8005418:	2180      	movs	r1, #128	; 0x80
 800541a:	4620      	mov	r0, r4
 800541c:	9303      	str	r3, [sp, #12]
 800541e:	f7ff ff63 	bl	80052e8 <UART_WaitOnFlagUntilTimeout>
 8005422:	9b03      	ldr	r3, [sp, #12]
 8005424:	b118      	cbz	r0, 800542e <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 8005426:	2003      	movs	r0, #3
}
 8005428:	b004      	add	sp, #16
 800542a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800542e:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8005430:	b95e      	cbnz	r6, 800544a <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005432:	f835 2b02 	ldrh.w	r2, [r5], #2
 8005436:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800543a:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 800543c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8005440:	3a01      	subs	r2, #1
 8005442:	b292      	uxth	r2, r2
 8005444:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8005448:	e7d7      	b.n	80053fa <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800544a:	f816 2b01 	ldrb.w	r2, [r6], #1
 800544e:	e7f4      	b.n	800543a <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 8005450:	2001      	movs	r0, #1
 8005452:	e7e9      	b.n	8005428 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8005454:	2002      	movs	r0, #2
 8005456:	e7e7      	b.n	8005428 <HAL_UART_Transmit+0x84>

08005458 <UART_CheckIdleState>:
{
 8005458:	b530      	push	{r4, r5, lr}
 800545a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800545c:	2500      	movs	r5, #0
{
 800545e:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005460:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8005464:	f7fe fb82 	bl	8003b6c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005468:	6822      	ldr	r2, [r4, #0]
 800546a:	6812      	ldr	r2, [r2, #0]
 800546c:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800546e:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005470:	d415      	bmi.n	800549e <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005472:	6822      	ldr	r2, [r4, #0]
 8005474:	6812      	ldr	r2, [r2, #0]
 8005476:	0752      	lsls	r2, r2, #29
 8005478:	d509      	bpl.n	800548e <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800547a:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800547e:	9200      	str	r2, [sp, #0]
 8005480:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005484:	2200      	movs	r2, #0
 8005486:	4620      	mov	r0, r4
 8005488:	f7ff ff2e 	bl	80052e8 <UART_WaitOnFlagUntilTimeout>
 800548c:	b9a0      	cbnz	r0, 80054b8 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 800548e:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005490:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005492:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8005494:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005498:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800549a:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 800549c:	e00d      	b.n	80054ba <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800549e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80054a2:	9200      	str	r2, [sp, #0]
 80054a4:	9003      	str	r0, [sp, #12]
 80054a6:	462a      	mov	r2, r5
 80054a8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054ac:	4620      	mov	r0, r4
 80054ae:	f7ff ff1b 	bl	80052e8 <UART_WaitOnFlagUntilTimeout>
 80054b2:	9b03      	ldr	r3, [sp, #12]
 80054b4:	2800      	cmp	r0, #0
 80054b6:	d0dc      	beq.n	8005472 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80054b8:	2003      	movs	r0, #3
}
 80054ba:	b005      	add	sp, #20
 80054bc:	bd30      	pop	{r4, r5, pc}

080054be <HAL_UART_Init>:
{
 80054be:	b510      	push	{r4, lr}
  if (huart == NULL)
 80054c0:	4604      	mov	r4, r0
 80054c2:	b340      	cbz	r0, 8005516 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80054c4:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80054c6:	b91b      	cbnz	r3, 80054d0 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80054c8:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80054cc:	f7fc f8bc 	bl	8001648 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80054d0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80054d2:	2324      	movs	r3, #36	; 0x24
 80054d4:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80054d6:	6813      	ldr	r3, [r2, #0]
 80054d8:	f023 0301 	bic.w	r3, r3, #1
 80054dc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054de:	4620      	mov	r0, r4
 80054e0:	f7ff fdc2 	bl	8005068 <UART_SetConfig>
 80054e4:	2801      	cmp	r0, #1
 80054e6:	d016      	beq.n	8005516 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054ea:	b113      	cbz	r3, 80054f2 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80054ec:	4620      	mov	r0, r4
 80054ee:	f7ff fea7 	bl	8005240 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005502:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800550a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800550c:	601a      	str	r2, [r3, #0]
}
 800550e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8005512:	f7ff bfa1 	b.w	8005458 <UART_CheckIdleState>
}
 8005516:	2001      	movs	r0, #1
 8005518:	bd10      	pop	{r4, pc}

0800551a <atoi>:
 800551a:	220a      	movs	r2, #10
 800551c:	2100      	movs	r1, #0
 800551e:	f000 be5f 	b.w	80061e0 <strtol>
	...

08005524 <calloc>:
 8005524:	4b02      	ldr	r3, [pc, #8]	; (8005530 <calloc+0xc>)
 8005526:	460a      	mov	r2, r1
 8005528:	4601      	mov	r1, r0
 800552a:	6818      	ldr	r0, [r3, #0]
 800552c:	f000 b852 	b.w	80055d4 <_calloc_r>
 8005530:	20000020 	.word	0x20000020

08005534 <__errno>:
 8005534:	4b01      	ldr	r3, [pc, #4]	; (800553c <__errno+0x8>)
 8005536:	6818      	ldr	r0, [r3, #0]
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	20000020 	.word	0x20000020

08005540 <__libc_init_array>:
 8005540:	b570      	push	{r4, r5, r6, lr}
 8005542:	4d0d      	ldr	r5, [pc, #52]	; (8005578 <__libc_init_array+0x38>)
 8005544:	4c0d      	ldr	r4, [pc, #52]	; (800557c <__libc_init_array+0x3c>)
 8005546:	1b64      	subs	r4, r4, r5
 8005548:	10a4      	asrs	r4, r4, #2
 800554a:	2600      	movs	r6, #0
 800554c:	42a6      	cmp	r6, r4
 800554e:	d109      	bne.n	8005564 <__libc_init_array+0x24>
 8005550:	4d0b      	ldr	r5, [pc, #44]	; (8005580 <__libc_init_array+0x40>)
 8005552:	4c0c      	ldr	r4, [pc, #48]	; (8005584 <__libc_init_array+0x44>)
 8005554:	f003 f848 	bl	80085e8 <_init>
 8005558:	1b64      	subs	r4, r4, r5
 800555a:	10a4      	asrs	r4, r4, #2
 800555c:	2600      	movs	r6, #0
 800555e:	42a6      	cmp	r6, r4
 8005560:	d105      	bne.n	800556e <__libc_init_array+0x2e>
 8005562:	bd70      	pop	{r4, r5, r6, pc}
 8005564:	f855 3b04 	ldr.w	r3, [r5], #4
 8005568:	4798      	blx	r3
 800556a:	3601      	adds	r6, #1
 800556c:	e7ee      	b.n	800554c <__libc_init_array+0xc>
 800556e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005572:	4798      	blx	r3
 8005574:	3601      	adds	r6, #1
 8005576:	e7f2      	b.n	800555e <__libc_init_array+0x1e>
 8005578:	08009d2c 	.word	0x08009d2c
 800557c:	08009d2c 	.word	0x08009d2c
 8005580:	08009d2c 	.word	0x08009d2c
 8005584:	08009d30 	.word	0x08009d30

08005588 <malloc>:
 8005588:	4b02      	ldr	r3, [pc, #8]	; (8005594 <malloc+0xc>)
 800558a:	4601      	mov	r1, r0
 800558c:	6818      	ldr	r0, [r3, #0]
 800558e:	f000 b8a3 	b.w	80056d8 <_malloc_r>
 8005592:	bf00      	nop
 8005594:	20000020 	.word	0x20000020

08005598 <free>:
 8005598:	4b02      	ldr	r3, [pc, #8]	; (80055a4 <free+0xc>)
 800559a:	4601      	mov	r1, r0
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	f000 b82f 	b.w	8005600 <_free_r>
 80055a2:	bf00      	nop
 80055a4:	20000020 	.word	0x20000020

080055a8 <memcpy>:
 80055a8:	440a      	add	r2, r1
 80055aa:	4291      	cmp	r1, r2
 80055ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80055b0:	d100      	bne.n	80055b4 <memcpy+0xc>
 80055b2:	4770      	bx	lr
 80055b4:	b510      	push	{r4, lr}
 80055b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055be:	4291      	cmp	r1, r2
 80055c0:	d1f9      	bne.n	80055b6 <memcpy+0xe>
 80055c2:	bd10      	pop	{r4, pc}

080055c4 <memset>:
 80055c4:	4402      	add	r2, r0
 80055c6:	4603      	mov	r3, r0
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d100      	bne.n	80055ce <memset+0xa>
 80055cc:	4770      	bx	lr
 80055ce:	f803 1b01 	strb.w	r1, [r3], #1
 80055d2:	e7f9      	b.n	80055c8 <memset+0x4>

080055d4 <_calloc_r>:
 80055d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055d6:	fba1 2402 	umull	r2, r4, r1, r2
 80055da:	b94c      	cbnz	r4, 80055f0 <_calloc_r+0x1c>
 80055dc:	4611      	mov	r1, r2
 80055de:	9201      	str	r2, [sp, #4]
 80055e0:	f000 f87a 	bl	80056d8 <_malloc_r>
 80055e4:	9a01      	ldr	r2, [sp, #4]
 80055e6:	4605      	mov	r5, r0
 80055e8:	b930      	cbnz	r0, 80055f8 <_calloc_r+0x24>
 80055ea:	4628      	mov	r0, r5
 80055ec:	b003      	add	sp, #12
 80055ee:	bd30      	pop	{r4, r5, pc}
 80055f0:	220c      	movs	r2, #12
 80055f2:	6002      	str	r2, [r0, #0]
 80055f4:	2500      	movs	r5, #0
 80055f6:	e7f8      	b.n	80055ea <_calloc_r+0x16>
 80055f8:	4621      	mov	r1, r4
 80055fa:	f7ff ffe3 	bl	80055c4 <memset>
 80055fe:	e7f4      	b.n	80055ea <_calloc_r+0x16>

08005600 <_free_r>:
 8005600:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005602:	2900      	cmp	r1, #0
 8005604:	d044      	beq.n	8005690 <_free_r+0x90>
 8005606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800560a:	9001      	str	r0, [sp, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	f1a1 0404 	sub.w	r4, r1, #4
 8005612:	bfb8      	it	lt
 8005614:	18e4      	addlt	r4, r4, r3
 8005616:	f001 fca5 	bl	8006f64 <__malloc_lock>
 800561a:	4a1e      	ldr	r2, [pc, #120]	; (8005694 <_free_r+0x94>)
 800561c:	9801      	ldr	r0, [sp, #4]
 800561e:	6813      	ldr	r3, [r2, #0]
 8005620:	b933      	cbnz	r3, 8005630 <_free_r+0x30>
 8005622:	6063      	str	r3, [r4, #4]
 8005624:	6014      	str	r4, [r2, #0]
 8005626:	b003      	add	sp, #12
 8005628:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800562c:	f001 bca0 	b.w	8006f70 <__malloc_unlock>
 8005630:	42a3      	cmp	r3, r4
 8005632:	d908      	bls.n	8005646 <_free_r+0x46>
 8005634:	6825      	ldr	r5, [r4, #0]
 8005636:	1961      	adds	r1, r4, r5
 8005638:	428b      	cmp	r3, r1
 800563a:	bf01      	itttt	eq
 800563c:	6819      	ldreq	r1, [r3, #0]
 800563e:	685b      	ldreq	r3, [r3, #4]
 8005640:	1949      	addeq	r1, r1, r5
 8005642:	6021      	streq	r1, [r4, #0]
 8005644:	e7ed      	b.n	8005622 <_free_r+0x22>
 8005646:	461a      	mov	r2, r3
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	b10b      	cbz	r3, 8005650 <_free_r+0x50>
 800564c:	42a3      	cmp	r3, r4
 800564e:	d9fa      	bls.n	8005646 <_free_r+0x46>
 8005650:	6811      	ldr	r1, [r2, #0]
 8005652:	1855      	adds	r5, r2, r1
 8005654:	42a5      	cmp	r5, r4
 8005656:	d10b      	bne.n	8005670 <_free_r+0x70>
 8005658:	6824      	ldr	r4, [r4, #0]
 800565a:	4421      	add	r1, r4
 800565c:	1854      	adds	r4, r2, r1
 800565e:	42a3      	cmp	r3, r4
 8005660:	6011      	str	r1, [r2, #0]
 8005662:	d1e0      	bne.n	8005626 <_free_r+0x26>
 8005664:	681c      	ldr	r4, [r3, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	6053      	str	r3, [r2, #4]
 800566a:	4421      	add	r1, r4
 800566c:	6011      	str	r1, [r2, #0]
 800566e:	e7da      	b.n	8005626 <_free_r+0x26>
 8005670:	d902      	bls.n	8005678 <_free_r+0x78>
 8005672:	230c      	movs	r3, #12
 8005674:	6003      	str	r3, [r0, #0]
 8005676:	e7d6      	b.n	8005626 <_free_r+0x26>
 8005678:	6825      	ldr	r5, [r4, #0]
 800567a:	1961      	adds	r1, r4, r5
 800567c:	428b      	cmp	r3, r1
 800567e:	bf04      	itt	eq
 8005680:	6819      	ldreq	r1, [r3, #0]
 8005682:	685b      	ldreq	r3, [r3, #4]
 8005684:	6063      	str	r3, [r4, #4]
 8005686:	bf04      	itt	eq
 8005688:	1949      	addeq	r1, r1, r5
 800568a:	6021      	streq	r1, [r4, #0]
 800568c:	6054      	str	r4, [r2, #4]
 800568e:	e7ca      	b.n	8005626 <_free_r+0x26>
 8005690:	b003      	add	sp, #12
 8005692:	bd30      	pop	{r4, r5, pc}
 8005694:	20000438 	.word	0x20000438

08005698 <sbrk_aligned>:
 8005698:	b570      	push	{r4, r5, r6, lr}
 800569a:	4e0e      	ldr	r6, [pc, #56]	; (80056d4 <sbrk_aligned+0x3c>)
 800569c:	460c      	mov	r4, r1
 800569e:	6831      	ldr	r1, [r6, #0]
 80056a0:	4605      	mov	r5, r0
 80056a2:	b911      	cbnz	r1, 80056aa <sbrk_aligned+0x12>
 80056a4:	f000 fcf6 	bl	8006094 <_sbrk_r>
 80056a8:	6030      	str	r0, [r6, #0]
 80056aa:	4621      	mov	r1, r4
 80056ac:	4628      	mov	r0, r5
 80056ae:	f000 fcf1 	bl	8006094 <_sbrk_r>
 80056b2:	1c43      	adds	r3, r0, #1
 80056b4:	d00a      	beq.n	80056cc <sbrk_aligned+0x34>
 80056b6:	1cc4      	adds	r4, r0, #3
 80056b8:	f024 0403 	bic.w	r4, r4, #3
 80056bc:	42a0      	cmp	r0, r4
 80056be:	d007      	beq.n	80056d0 <sbrk_aligned+0x38>
 80056c0:	1a21      	subs	r1, r4, r0
 80056c2:	4628      	mov	r0, r5
 80056c4:	f000 fce6 	bl	8006094 <_sbrk_r>
 80056c8:	3001      	adds	r0, #1
 80056ca:	d101      	bne.n	80056d0 <sbrk_aligned+0x38>
 80056cc:	f04f 34ff 	mov.w	r4, #4294967295
 80056d0:	4620      	mov	r0, r4
 80056d2:	bd70      	pop	{r4, r5, r6, pc}
 80056d4:	2000043c 	.word	0x2000043c

080056d8 <_malloc_r>:
 80056d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056dc:	1ccd      	adds	r5, r1, #3
 80056de:	f025 0503 	bic.w	r5, r5, #3
 80056e2:	3508      	adds	r5, #8
 80056e4:	2d0c      	cmp	r5, #12
 80056e6:	bf38      	it	cc
 80056e8:	250c      	movcc	r5, #12
 80056ea:	2d00      	cmp	r5, #0
 80056ec:	4607      	mov	r7, r0
 80056ee:	db01      	blt.n	80056f4 <_malloc_r+0x1c>
 80056f0:	42a9      	cmp	r1, r5
 80056f2:	d905      	bls.n	8005700 <_malloc_r+0x28>
 80056f4:	230c      	movs	r3, #12
 80056f6:	603b      	str	r3, [r7, #0]
 80056f8:	2600      	movs	r6, #0
 80056fa:	4630      	mov	r0, r6
 80056fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005700:	4e2e      	ldr	r6, [pc, #184]	; (80057bc <_malloc_r+0xe4>)
 8005702:	f001 fc2f 	bl	8006f64 <__malloc_lock>
 8005706:	6833      	ldr	r3, [r6, #0]
 8005708:	461c      	mov	r4, r3
 800570a:	bb34      	cbnz	r4, 800575a <_malloc_r+0x82>
 800570c:	4629      	mov	r1, r5
 800570e:	4638      	mov	r0, r7
 8005710:	f7ff ffc2 	bl	8005698 <sbrk_aligned>
 8005714:	1c43      	adds	r3, r0, #1
 8005716:	4604      	mov	r4, r0
 8005718:	d14d      	bne.n	80057b6 <_malloc_r+0xde>
 800571a:	6834      	ldr	r4, [r6, #0]
 800571c:	4626      	mov	r6, r4
 800571e:	2e00      	cmp	r6, #0
 8005720:	d140      	bne.n	80057a4 <_malloc_r+0xcc>
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	4631      	mov	r1, r6
 8005726:	4638      	mov	r0, r7
 8005728:	eb04 0803 	add.w	r8, r4, r3
 800572c:	f000 fcb2 	bl	8006094 <_sbrk_r>
 8005730:	4580      	cmp	r8, r0
 8005732:	d13a      	bne.n	80057aa <_malloc_r+0xd2>
 8005734:	6821      	ldr	r1, [r4, #0]
 8005736:	3503      	adds	r5, #3
 8005738:	1a6d      	subs	r5, r5, r1
 800573a:	f025 0503 	bic.w	r5, r5, #3
 800573e:	3508      	adds	r5, #8
 8005740:	2d0c      	cmp	r5, #12
 8005742:	bf38      	it	cc
 8005744:	250c      	movcc	r5, #12
 8005746:	4629      	mov	r1, r5
 8005748:	4638      	mov	r0, r7
 800574a:	f7ff ffa5 	bl	8005698 <sbrk_aligned>
 800574e:	3001      	adds	r0, #1
 8005750:	d02b      	beq.n	80057aa <_malloc_r+0xd2>
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	442b      	add	r3, r5
 8005756:	6023      	str	r3, [r4, #0]
 8005758:	e00e      	b.n	8005778 <_malloc_r+0xa0>
 800575a:	6822      	ldr	r2, [r4, #0]
 800575c:	1b52      	subs	r2, r2, r5
 800575e:	d41e      	bmi.n	800579e <_malloc_r+0xc6>
 8005760:	2a0b      	cmp	r2, #11
 8005762:	d916      	bls.n	8005792 <_malloc_r+0xba>
 8005764:	1961      	adds	r1, r4, r5
 8005766:	42a3      	cmp	r3, r4
 8005768:	6025      	str	r5, [r4, #0]
 800576a:	bf18      	it	ne
 800576c:	6059      	strne	r1, [r3, #4]
 800576e:	6863      	ldr	r3, [r4, #4]
 8005770:	bf08      	it	eq
 8005772:	6031      	streq	r1, [r6, #0]
 8005774:	5162      	str	r2, [r4, r5]
 8005776:	604b      	str	r3, [r1, #4]
 8005778:	4638      	mov	r0, r7
 800577a:	f104 060b 	add.w	r6, r4, #11
 800577e:	f001 fbf7 	bl	8006f70 <__malloc_unlock>
 8005782:	f026 0607 	bic.w	r6, r6, #7
 8005786:	1d23      	adds	r3, r4, #4
 8005788:	1af2      	subs	r2, r6, r3
 800578a:	d0b6      	beq.n	80056fa <_malloc_r+0x22>
 800578c:	1b9b      	subs	r3, r3, r6
 800578e:	50a3      	str	r3, [r4, r2]
 8005790:	e7b3      	b.n	80056fa <_malloc_r+0x22>
 8005792:	6862      	ldr	r2, [r4, #4]
 8005794:	42a3      	cmp	r3, r4
 8005796:	bf0c      	ite	eq
 8005798:	6032      	streq	r2, [r6, #0]
 800579a:	605a      	strne	r2, [r3, #4]
 800579c:	e7ec      	b.n	8005778 <_malloc_r+0xa0>
 800579e:	4623      	mov	r3, r4
 80057a0:	6864      	ldr	r4, [r4, #4]
 80057a2:	e7b2      	b.n	800570a <_malloc_r+0x32>
 80057a4:	4634      	mov	r4, r6
 80057a6:	6876      	ldr	r6, [r6, #4]
 80057a8:	e7b9      	b.n	800571e <_malloc_r+0x46>
 80057aa:	230c      	movs	r3, #12
 80057ac:	603b      	str	r3, [r7, #0]
 80057ae:	4638      	mov	r0, r7
 80057b0:	f001 fbde 	bl	8006f70 <__malloc_unlock>
 80057b4:	e7a1      	b.n	80056fa <_malloc_r+0x22>
 80057b6:	6025      	str	r5, [r4, #0]
 80057b8:	e7de      	b.n	8005778 <_malloc_r+0xa0>
 80057ba:	bf00      	nop
 80057bc:	20000438 	.word	0x20000438

080057c0 <__cvt>:
 80057c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057c4:	ec55 4b10 	vmov	r4, r5, d0
 80057c8:	2d00      	cmp	r5, #0
 80057ca:	460e      	mov	r6, r1
 80057cc:	4619      	mov	r1, r3
 80057ce:	462b      	mov	r3, r5
 80057d0:	bfbb      	ittet	lt
 80057d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80057d6:	461d      	movlt	r5, r3
 80057d8:	2300      	movge	r3, #0
 80057da:	232d      	movlt	r3, #45	; 0x2d
 80057dc:	700b      	strb	r3, [r1, #0]
 80057de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80057e4:	4691      	mov	r9, r2
 80057e6:	f023 0820 	bic.w	r8, r3, #32
 80057ea:	bfbc      	itt	lt
 80057ec:	4622      	movlt	r2, r4
 80057ee:	4614      	movlt	r4, r2
 80057f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80057f4:	d005      	beq.n	8005802 <__cvt+0x42>
 80057f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80057fa:	d100      	bne.n	80057fe <__cvt+0x3e>
 80057fc:	3601      	adds	r6, #1
 80057fe:	2102      	movs	r1, #2
 8005800:	e000      	b.n	8005804 <__cvt+0x44>
 8005802:	2103      	movs	r1, #3
 8005804:	ab03      	add	r3, sp, #12
 8005806:	9301      	str	r3, [sp, #4]
 8005808:	ab02      	add	r3, sp, #8
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	ec45 4b10 	vmov	d0, r4, r5
 8005810:	4653      	mov	r3, sl
 8005812:	4632      	mov	r2, r6
 8005814:	f000 fdb4 	bl	8006380 <_dtoa_r>
 8005818:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800581c:	4607      	mov	r7, r0
 800581e:	d102      	bne.n	8005826 <__cvt+0x66>
 8005820:	f019 0f01 	tst.w	r9, #1
 8005824:	d022      	beq.n	800586c <__cvt+0xac>
 8005826:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800582a:	eb07 0906 	add.w	r9, r7, r6
 800582e:	d110      	bne.n	8005852 <__cvt+0x92>
 8005830:	783b      	ldrb	r3, [r7, #0]
 8005832:	2b30      	cmp	r3, #48	; 0x30
 8005834:	d10a      	bne.n	800584c <__cvt+0x8c>
 8005836:	2200      	movs	r2, #0
 8005838:	2300      	movs	r3, #0
 800583a:	4620      	mov	r0, r4
 800583c:	4629      	mov	r1, r5
 800583e:	f7fb f943 	bl	8000ac8 <__aeabi_dcmpeq>
 8005842:	b918      	cbnz	r0, 800584c <__cvt+0x8c>
 8005844:	f1c6 0601 	rsb	r6, r6, #1
 8005848:	f8ca 6000 	str.w	r6, [sl]
 800584c:	f8da 3000 	ldr.w	r3, [sl]
 8005850:	4499      	add	r9, r3
 8005852:	2200      	movs	r2, #0
 8005854:	2300      	movs	r3, #0
 8005856:	4620      	mov	r0, r4
 8005858:	4629      	mov	r1, r5
 800585a:	f7fb f935 	bl	8000ac8 <__aeabi_dcmpeq>
 800585e:	b108      	cbz	r0, 8005864 <__cvt+0xa4>
 8005860:	f8cd 900c 	str.w	r9, [sp, #12]
 8005864:	2230      	movs	r2, #48	; 0x30
 8005866:	9b03      	ldr	r3, [sp, #12]
 8005868:	454b      	cmp	r3, r9
 800586a:	d307      	bcc.n	800587c <__cvt+0xbc>
 800586c:	9b03      	ldr	r3, [sp, #12]
 800586e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005870:	1bdb      	subs	r3, r3, r7
 8005872:	4638      	mov	r0, r7
 8005874:	6013      	str	r3, [r2, #0]
 8005876:	b004      	add	sp, #16
 8005878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800587c:	1c59      	adds	r1, r3, #1
 800587e:	9103      	str	r1, [sp, #12]
 8005880:	701a      	strb	r2, [r3, #0]
 8005882:	e7f0      	b.n	8005866 <__cvt+0xa6>

08005884 <__exponent>:
 8005884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005886:	4603      	mov	r3, r0
 8005888:	2900      	cmp	r1, #0
 800588a:	bfb8      	it	lt
 800588c:	4249      	neglt	r1, r1
 800588e:	f803 2b02 	strb.w	r2, [r3], #2
 8005892:	bfb4      	ite	lt
 8005894:	222d      	movlt	r2, #45	; 0x2d
 8005896:	222b      	movge	r2, #43	; 0x2b
 8005898:	2909      	cmp	r1, #9
 800589a:	7042      	strb	r2, [r0, #1]
 800589c:	dd2a      	ble.n	80058f4 <__exponent+0x70>
 800589e:	f10d 0407 	add.w	r4, sp, #7
 80058a2:	46a4      	mov	ip, r4
 80058a4:	270a      	movs	r7, #10
 80058a6:	46a6      	mov	lr, r4
 80058a8:	460a      	mov	r2, r1
 80058aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80058ae:	fb07 1516 	mls	r5, r7, r6, r1
 80058b2:	3530      	adds	r5, #48	; 0x30
 80058b4:	2a63      	cmp	r2, #99	; 0x63
 80058b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80058ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80058be:	4631      	mov	r1, r6
 80058c0:	dcf1      	bgt.n	80058a6 <__exponent+0x22>
 80058c2:	3130      	adds	r1, #48	; 0x30
 80058c4:	f1ae 0502 	sub.w	r5, lr, #2
 80058c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80058cc:	1c44      	adds	r4, r0, #1
 80058ce:	4629      	mov	r1, r5
 80058d0:	4561      	cmp	r1, ip
 80058d2:	d30a      	bcc.n	80058ea <__exponent+0x66>
 80058d4:	f10d 0209 	add.w	r2, sp, #9
 80058d8:	eba2 020e 	sub.w	r2, r2, lr
 80058dc:	4565      	cmp	r5, ip
 80058de:	bf88      	it	hi
 80058e0:	2200      	movhi	r2, #0
 80058e2:	4413      	add	r3, r2
 80058e4:	1a18      	subs	r0, r3, r0
 80058e6:	b003      	add	sp, #12
 80058e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80058f2:	e7ed      	b.n	80058d0 <__exponent+0x4c>
 80058f4:	2330      	movs	r3, #48	; 0x30
 80058f6:	3130      	adds	r1, #48	; 0x30
 80058f8:	7083      	strb	r3, [r0, #2]
 80058fa:	70c1      	strb	r1, [r0, #3]
 80058fc:	1d03      	adds	r3, r0, #4
 80058fe:	e7f1      	b.n	80058e4 <__exponent+0x60>

08005900 <_printf_float>:
 8005900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005904:	ed2d 8b02 	vpush	{d8}
 8005908:	b08d      	sub	sp, #52	; 0x34
 800590a:	460c      	mov	r4, r1
 800590c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005910:	4616      	mov	r6, r2
 8005912:	461f      	mov	r7, r3
 8005914:	4605      	mov	r5, r0
 8005916:	f001 fb21 	bl	8006f5c <_localeconv_r>
 800591a:	f8d0 a000 	ldr.w	sl, [r0]
 800591e:	4650      	mov	r0, sl
 8005920:	f7fa fc56 	bl	80001d0 <strlen>
 8005924:	2300      	movs	r3, #0
 8005926:	930a      	str	r3, [sp, #40]	; 0x28
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	9305      	str	r3, [sp, #20]
 800592c:	f8d8 3000 	ldr.w	r3, [r8]
 8005930:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005934:	3307      	adds	r3, #7
 8005936:	f023 0307 	bic.w	r3, r3, #7
 800593a:	f103 0208 	add.w	r2, r3, #8
 800593e:	f8c8 2000 	str.w	r2, [r8]
 8005942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005946:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800594a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800594e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005952:	9307      	str	r3, [sp, #28]
 8005954:	f8cd 8018 	str.w	r8, [sp, #24]
 8005958:	ee08 0a10 	vmov	s16, r0
 800595c:	4b9f      	ldr	r3, [pc, #636]	; (8005bdc <_printf_float+0x2dc>)
 800595e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005962:	f04f 32ff 	mov.w	r2, #4294967295
 8005966:	f7fb f8e1 	bl	8000b2c <__aeabi_dcmpun>
 800596a:	bb88      	cbnz	r0, 80059d0 <_printf_float+0xd0>
 800596c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005970:	4b9a      	ldr	r3, [pc, #616]	; (8005bdc <_printf_float+0x2dc>)
 8005972:	f04f 32ff 	mov.w	r2, #4294967295
 8005976:	f7fb f8bb 	bl	8000af0 <__aeabi_dcmple>
 800597a:	bb48      	cbnz	r0, 80059d0 <_printf_float+0xd0>
 800597c:	2200      	movs	r2, #0
 800597e:	2300      	movs	r3, #0
 8005980:	4640      	mov	r0, r8
 8005982:	4649      	mov	r1, r9
 8005984:	f7fb f8aa 	bl	8000adc <__aeabi_dcmplt>
 8005988:	b110      	cbz	r0, 8005990 <_printf_float+0x90>
 800598a:	232d      	movs	r3, #45	; 0x2d
 800598c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005990:	4b93      	ldr	r3, [pc, #588]	; (8005be0 <_printf_float+0x2e0>)
 8005992:	4894      	ldr	r0, [pc, #592]	; (8005be4 <_printf_float+0x2e4>)
 8005994:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005998:	bf94      	ite	ls
 800599a:	4698      	movls	r8, r3
 800599c:	4680      	movhi	r8, r0
 800599e:	2303      	movs	r3, #3
 80059a0:	6123      	str	r3, [r4, #16]
 80059a2:	9b05      	ldr	r3, [sp, #20]
 80059a4:	f023 0204 	bic.w	r2, r3, #4
 80059a8:	6022      	str	r2, [r4, #0]
 80059aa:	f04f 0900 	mov.w	r9, #0
 80059ae:	9700      	str	r7, [sp, #0]
 80059b0:	4633      	mov	r3, r6
 80059b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80059b4:	4621      	mov	r1, r4
 80059b6:	4628      	mov	r0, r5
 80059b8:	f000 f9d8 	bl	8005d6c <_printf_common>
 80059bc:	3001      	adds	r0, #1
 80059be:	f040 8090 	bne.w	8005ae2 <_printf_float+0x1e2>
 80059c2:	f04f 30ff 	mov.w	r0, #4294967295
 80059c6:	b00d      	add	sp, #52	; 0x34
 80059c8:	ecbd 8b02 	vpop	{d8}
 80059cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d0:	4642      	mov	r2, r8
 80059d2:	464b      	mov	r3, r9
 80059d4:	4640      	mov	r0, r8
 80059d6:	4649      	mov	r1, r9
 80059d8:	f7fb f8a8 	bl	8000b2c <__aeabi_dcmpun>
 80059dc:	b140      	cbz	r0, 80059f0 <_printf_float+0xf0>
 80059de:	464b      	mov	r3, r9
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	bfbc      	itt	lt
 80059e4:	232d      	movlt	r3, #45	; 0x2d
 80059e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80059ea:	487f      	ldr	r0, [pc, #508]	; (8005be8 <_printf_float+0x2e8>)
 80059ec:	4b7f      	ldr	r3, [pc, #508]	; (8005bec <_printf_float+0x2ec>)
 80059ee:	e7d1      	b.n	8005994 <_printf_float+0x94>
 80059f0:	6863      	ldr	r3, [r4, #4]
 80059f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80059f6:	9206      	str	r2, [sp, #24]
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	d13f      	bne.n	8005a7c <_printf_float+0x17c>
 80059fc:	2306      	movs	r3, #6
 80059fe:	6063      	str	r3, [r4, #4]
 8005a00:	9b05      	ldr	r3, [sp, #20]
 8005a02:	6861      	ldr	r1, [r4, #4]
 8005a04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a08:	2300      	movs	r3, #0
 8005a0a:	9303      	str	r3, [sp, #12]
 8005a0c:	ab0a      	add	r3, sp, #40	; 0x28
 8005a0e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a12:	ab09      	add	r3, sp, #36	; 0x24
 8005a14:	ec49 8b10 	vmov	d0, r8, r9
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	6022      	str	r2, [r4, #0]
 8005a1c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a20:	4628      	mov	r0, r5
 8005a22:	f7ff fecd 	bl	80057c0 <__cvt>
 8005a26:	9b06      	ldr	r3, [sp, #24]
 8005a28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a2a:	2b47      	cmp	r3, #71	; 0x47
 8005a2c:	4680      	mov	r8, r0
 8005a2e:	d108      	bne.n	8005a42 <_printf_float+0x142>
 8005a30:	1cc8      	adds	r0, r1, #3
 8005a32:	db02      	blt.n	8005a3a <_printf_float+0x13a>
 8005a34:	6863      	ldr	r3, [r4, #4]
 8005a36:	4299      	cmp	r1, r3
 8005a38:	dd41      	ble.n	8005abe <_printf_float+0x1be>
 8005a3a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005a3e:	fa5f fb8b 	uxtb.w	fp, fp
 8005a42:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a46:	d820      	bhi.n	8005a8a <_printf_float+0x18a>
 8005a48:	3901      	subs	r1, #1
 8005a4a:	465a      	mov	r2, fp
 8005a4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005a50:	9109      	str	r1, [sp, #36]	; 0x24
 8005a52:	f7ff ff17 	bl	8005884 <__exponent>
 8005a56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a58:	1813      	adds	r3, r2, r0
 8005a5a:	2a01      	cmp	r2, #1
 8005a5c:	4681      	mov	r9, r0
 8005a5e:	6123      	str	r3, [r4, #16]
 8005a60:	dc02      	bgt.n	8005a68 <_printf_float+0x168>
 8005a62:	6822      	ldr	r2, [r4, #0]
 8005a64:	07d2      	lsls	r2, r2, #31
 8005a66:	d501      	bpl.n	8005a6c <_printf_float+0x16c>
 8005a68:	3301      	adds	r3, #1
 8005a6a:	6123      	str	r3, [r4, #16]
 8005a6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d09c      	beq.n	80059ae <_printf_float+0xae>
 8005a74:	232d      	movs	r3, #45	; 0x2d
 8005a76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a7a:	e798      	b.n	80059ae <_printf_float+0xae>
 8005a7c:	9a06      	ldr	r2, [sp, #24]
 8005a7e:	2a47      	cmp	r2, #71	; 0x47
 8005a80:	d1be      	bne.n	8005a00 <_printf_float+0x100>
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1bc      	bne.n	8005a00 <_printf_float+0x100>
 8005a86:	2301      	movs	r3, #1
 8005a88:	e7b9      	b.n	80059fe <_printf_float+0xfe>
 8005a8a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005a8e:	d118      	bne.n	8005ac2 <_printf_float+0x1c2>
 8005a90:	2900      	cmp	r1, #0
 8005a92:	6863      	ldr	r3, [r4, #4]
 8005a94:	dd0b      	ble.n	8005aae <_printf_float+0x1ae>
 8005a96:	6121      	str	r1, [r4, #16]
 8005a98:	b913      	cbnz	r3, 8005aa0 <_printf_float+0x1a0>
 8005a9a:	6822      	ldr	r2, [r4, #0]
 8005a9c:	07d0      	lsls	r0, r2, #31
 8005a9e:	d502      	bpl.n	8005aa6 <_printf_float+0x1a6>
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	440b      	add	r3, r1
 8005aa4:	6123      	str	r3, [r4, #16]
 8005aa6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005aa8:	f04f 0900 	mov.w	r9, #0
 8005aac:	e7de      	b.n	8005a6c <_printf_float+0x16c>
 8005aae:	b913      	cbnz	r3, 8005ab6 <_printf_float+0x1b6>
 8005ab0:	6822      	ldr	r2, [r4, #0]
 8005ab2:	07d2      	lsls	r2, r2, #31
 8005ab4:	d501      	bpl.n	8005aba <_printf_float+0x1ba>
 8005ab6:	3302      	adds	r3, #2
 8005ab8:	e7f4      	b.n	8005aa4 <_printf_float+0x1a4>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e7f2      	b.n	8005aa4 <_printf_float+0x1a4>
 8005abe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ac4:	4299      	cmp	r1, r3
 8005ac6:	db05      	blt.n	8005ad4 <_printf_float+0x1d4>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	6121      	str	r1, [r4, #16]
 8005acc:	07d8      	lsls	r0, r3, #31
 8005ace:	d5ea      	bpl.n	8005aa6 <_printf_float+0x1a6>
 8005ad0:	1c4b      	adds	r3, r1, #1
 8005ad2:	e7e7      	b.n	8005aa4 <_printf_float+0x1a4>
 8005ad4:	2900      	cmp	r1, #0
 8005ad6:	bfd4      	ite	le
 8005ad8:	f1c1 0202 	rsble	r2, r1, #2
 8005adc:	2201      	movgt	r2, #1
 8005ade:	4413      	add	r3, r2
 8005ae0:	e7e0      	b.n	8005aa4 <_printf_float+0x1a4>
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	055a      	lsls	r2, r3, #21
 8005ae6:	d407      	bmi.n	8005af8 <_printf_float+0x1f8>
 8005ae8:	6923      	ldr	r3, [r4, #16]
 8005aea:	4642      	mov	r2, r8
 8005aec:	4631      	mov	r1, r6
 8005aee:	4628      	mov	r0, r5
 8005af0:	47b8      	blx	r7
 8005af2:	3001      	adds	r0, #1
 8005af4:	d12c      	bne.n	8005b50 <_printf_float+0x250>
 8005af6:	e764      	b.n	80059c2 <_printf_float+0xc2>
 8005af8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005afc:	f240 80e0 	bls.w	8005cc0 <_printf_float+0x3c0>
 8005b00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b04:	2200      	movs	r2, #0
 8005b06:	2300      	movs	r3, #0
 8005b08:	f7fa ffde 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	d034      	beq.n	8005b7a <_printf_float+0x27a>
 8005b10:	4a37      	ldr	r2, [pc, #220]	; (8005bf0 <_printf_float+0x2f0>)
 8005b12:	2301      	movs	r3, #1
 8005b14:	4631      	mov	r1, r6
 8005b16:	4628      	mov	r0, r5
 8005b18:	47b8      	blx	r7
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	f43f af51 	beq.w	80059c2 <_printf_float+0xc2>
 8005b20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b24:	429a      	cmp	r2, r3
 8005b26:	db02      	blt.n	8005b2e <_printf_float+0x22e>
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	07d8      	lsls	r0, r3, #31
 8005b2c:	d510      	bpl.n	8005b50 <_printf_float+0x250>
 8005b2e:	ee18 3a10 	vmov	r3, s16
 8005b32:	4652      	mov	r2, sl
 8005b34:	4631      	mov	r1, r6
 8005b36:	4628      	mov	r0, r5
 8005b38:	47b8      	blx	r7
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	f43f af41 	beq.w	80059c2 <_printf_float+0xc2>
 8005b40:	f04f 0800 	mov.w	r8, #0
 8005b44:	f104 091a 	add.w	r9, r4, #26
 8005b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	4543      	cmp	r3, r8
 8005b4e:	dc09      	bgt.n	8005b64 <_printf_float+0x264>
 8005b50:	6823      	ldr	r3, [r4, #0]
 8005b52:	079b      	lsls	r3, r3, #30
 8005b54:	f100 8105 	bmi.w	8005d62 <_printf_float+0x462>
 8005b58:	68e0      	ldr	r0, [r4, #12]
 8005b5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b5c:	4298      	cmp	r0, r3
 8005b5e:	bfb8      	it	lt
 8005b60:	4618      	movlt	r0, r3
 8005b62:	e730      	b.n	80059c6 <_printf_float+0xc6>
 8005b64:	2301      	movs	r3, #1
 8005b66:	464a      	mov	r2, r9
 8005b68:	4631      	mov	r1, r6
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	47b8      	blx	r7
 8005b6e:	3001      	adds	r0, #1
 8005b70:	f43f af27 	beq.w	80059c2 <_printf_float+0xc2>
 8005b74:	f108 0801 	add.w	r8, r8, #1
 8005b78:	e7e6      	b.n	8005b48 <_printf_float+0x248>
 8005b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	dc39      	bgt.n	8005bf4 <_printf_float+0x2f4>
 8005b80:	4a1b      	ldr	r2, [pc, #108]	; (8005bf0 <_printf_float+0x2f0>)
 8005b82:	2301      	movs	r3, #1
 8005b84:	4631      	mov	r1, r6
 8005b86:	4628      	mov	r0, r5
 8005b88:	47b8      	blx	r7
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	f43f af19 	beq.w	80059c2 <_printf_float+0xc2>
 8005b90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b94:	4313      	orrs	r3, r2
 8005b96:	d102      	bne.n	8005b9e <_printf_float+0x29e>
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	07d9      	lsls	r1, r3, #31
 8005b9c:	d5d8      	bpl.n	8005b50 <_printf_float+0x250>
 8005b9e:	ee18 3a10 	vmov	r3, s16
 8005ba2:	4652      	mov	r2, sl
 8005ba4:	4631      	mov	r1, r6
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	47b8      	blx	r7
 8005baa:	3001      	adds	r0, #1
 8005bac:	f43f af09 	beq.w	80059c2 <_printf_float+0xc2>
 8005bb0:	f04f 0900 	mov.w	r9, #0
 8005bb4:	f104 0a1a 	add.w	sl, r4, #26
 8005bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bba:	425b      	negs	r3, r3
 8005bbc:	454b      	cmp	r3, r9
 8005bbe:	dc01      	bgt.n	8005bc4 <_printf_float+0x2c4>
 8005bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bc2:	e792      	b.n	8005aea <_printf_float+0x1ea>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	4652      	mov	r2, sl
 8005bc8:	4631      	mov	r1, r6
 8005bca:	4628      	mov	r0, r5
 8005bcc:	47b8      	blx	r7
 8005bce:	3001      	adds	r0, #1
 8005bd0:	f43f aef7 	beq.w	80059c2 <_printf_float+0xc2>
 8005bd4:	f109 0901 	add.w	r9, r9, #1
 8005bd8:	e7ee      	b.n	8005bb8 <_printf_float+0x2b8>
 8005bda:	bf00      	nop
 8005bdc:	7fefffff 	.word	0x7fefffff
 8005be0:	0800994c 	.word	0x0800994c
 8005be4:	08009950 	.word	0x08009950
 8005be8:	08009958 	.word	0x08009958
 8005bec:	08009954 	.word	0x08009954
 8005bf0:	0800922a 	.word	0x0800922a
 8005bf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bf6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	bfa8      	it	ge
 8005bfc:	461a      	movge	r2, r3
 8005bfe:	2a00      	cmp	r2, #0
 8005c00:	4691      	mov	r9, r2
 8005c02:	dc37      	bgt.n	8005c74 <_printf_float+0x374>
 8005c04:	f04f 0b00 	mov.w	fp, #0
 8005c08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c0c:	f104 021a 	add.w	r2, r4, #26
 8005c10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c12:	9305      	str	r3, [sp, #20]
 8005c14:	eba3 0309 	sub.w	r3, r3, r9
 8005c18:	455b      	cmp	r3, fp
 8005c1a:	dc33      	bgt.n	8005c84 <_printf_float+0x384>
 8005c1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c20:	429a      	cmp	r2, r3
 8005c22:	db3b      	blt.n	8005c9c <_printf_float+0x39c>
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	07da      	lsls	r2, r3, #31
 8005c28:	d438      	bmi.n	8005c9c <_printf_float+0x39c>
 8005c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c2c:	9a05      	ldr	r2, [sp, #20]
 8005c2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c30:	1a9a      	subs	r2, r3, r2
 8005c32:	eba3 0901 	sub.w	r9, r3, r1
 8005c36:	4591      	cmp	r9, r2
 8005c38:	bfa8      	it	ge
 8005c3a:	4691      	movge	r9, r2
 8005c3c:	f1b9 0f00 	cmp.w	r9, #0
 8005c40:	dc35      	bgt.n	8005cae <_printf_float+0x3ae>
 8005c42:	f04f 0800 	mov.w	r8, #0
 8005c46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c4a:	f104 0a1a 	add.w	sl, r4, #26
 8005c4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c52:	1a9b      	subs	r3, r3, r2
 8005c54:	eba3 0309 	sub.w	r3, r3, r9
 8005c58:	4543      	cmp	r3, r8
 8005c5a:	f77f af79 	ble.w	8005b50 <_printf_float+0x250>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	4652      	mov	r2, sl
 8005c62:	4631      	mov	r1, r6
 8005c64:	4628      	mov	r0, r5
 8005c66:	47b8      	blx	r7
 8005c68:	3001      	adds	r0, #1
 8005c6a:	f43f aeaa 	beq.w	80059c2 <_printf_float+0xc2>
 8005c6e:	f108 0801 	add.w	r8, r8, #1
 8005c72:	e7ec      	b.n	8005c4e <_printf_float+0x34e>
 8005c74:	4613      	mov	r3, r2
 8005c76:	4631      	mov	r1, r6
 8005c78:	4642      	mov	r2, r8
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	47b8      	blx	r7
 8005c7e:	3001      	adds	r0, #1
 8005c80:	d1c0      	bne.n	8005c04 <_printf_float+0x304>
 8005c82:	e69e      	b.n	80059c2 <_printf_float+0xc2>
 8005c84:	2301      	movs	r3, #1
 8005c86:	4631      	mov	r1, r6
 8005c88:	4628      	mov	r0, r5
 8005c8a:	9205      	str	r2, [sp, #20]
 8005c8c:	47b8      	blx	r7
 8005c8e:	3001      	adds	r0, #1
 8005c90:	f43f ae97 	beq.w	80059c2 <_printf_float+0xc2>
 8005c94:	9a05      	ldr	r2, [sp, #20]
 8005c96:	f10b 0b01 	add.w	fp, fp, #1
 8005c9a:	e7b9      	b.n	8005c10 <_printf_float+0x310>
 8005c9c:	ee18 3a10 	vmov	r3, s16
 8005ca0:	4652      	mov	r2, sl
 8005ca2:	4631      	mov	r1, r6
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	47b8      	blx	r7
 8005ca8:	3001      	adds	r0, #1
 8005caa:	d1be      	bne.n	8005c2a <_printf_float+0x32a>
 8005cac:	e689      	b.n	80059c2 <_printf_float+0xc2>
 8005cae:	9a05      	ldr	r2, [sp, #20]
 8005cb0:	464b      	mov	r3, r9
 8005cb2:	4442      	add	r2, r8
 8005cb4:	4631      	mov	r1, r6
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	47b8      	blx	r7
 8005cba:	3001      	adds	r0, #1
 8005cbc:	d1c1      	bne.n	8005c42 <_printf_float+0x342>
 8005cbe:	e680      	b.n	80059c2 <_printf_float+0xc2>
 8005cc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cc2:	2a01      	cmp	r2, #1
 8005cc4:	dc01      	bgt.n	8005cca <_printf_float+0x3ca>
 8005cc6:	07db      	lsls	r3, r3, #31
 8005cc8:	d538      	bpl.n	8005d3c <_printf_float+0x43c>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	4642      	mov	r2, r8
 8005cce:	4631      	mov	r1, r6
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	47b8      	blx	r7
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	f43f ae74 	beq.w	80059c2 <_printf_float+0xc2>
 8005cda:	ee18 3a10 	vmov	r3, s16
 8005cde:	4652      	mov	r2, sl
 8005ce0:	4631      	mov	r1, r6
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	47b8      	blx	r7
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	f43f ae6b 	beq.w	80059c2 <_printf_float+0xc2>
 8005cec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	f7fa fee8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cf8:	b9d8      	cbnz	r0, 8005d32 <_printf_float+0x432>
 8005cfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cfc:	f108 0201 	add.w	r2, r8, #1
 8005d00:	3b01      	subs	r3, #1
 8005d02:	4631      	mov	r1, r6
 8005d04:	4628      	mov	r0, r5
 8005d06:	47b8      	blx	r7
 8005d08:	3001      	adds	r0, #1
 8005d0a:	d10e      	bne.n	8005d2a <_printf_float+0x42a>
 8005d0c:	e659      	b.n	80059c2 <_printf_float+0xc2>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	4652      	mov	r2, sl
 8005d12:	4631      	mov	r1, r6
 8005d14:	4628      	mov	r0, r5
 8005d16:	47b8      	blx	r7
 8005d18:	3001      	adds	r0, #1
 8005d1a:	f43f ae52 	beq.w	80059c2 <_printf_float+0xc2>
 8005d1e:	f108 0801 	add.w	r8, r8, #1
 8005d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d24:	3b01      	subs	r3, #1
 8005d26:	4543      	cmp	r3, r8
 8005d28:	dcf1      	bgt.n	8005d0e <_printf_float+0x40e>
 8005d2a:	464b      	mov	r3, r9
 8005d2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d30:	e6dc      	b.n	8005aec <_printf_float+0x1ec>
 8005d32:	f04f 0800 	mov.w	r8, #0
 8005d36:	f104 0a1a 	add.w	sl, r4, #26
 8005d3a:	e7f2      	b.n	8005d22 <_printf_float+0x422>
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	4642      	mov	r2, r8
 8005d40:	e7df      	b.n	8005d02 <_printf_float+0x402>
 8005d42:	2301      	movs	r3, #1
 8005d44:	464a      	mov	r2, r9
 8005d46:	4631      	mov	r1, r6
 8005d48:	4628      	mov	r0, r5
 8005d4a:	47b8      	blx	r7
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	f43f ae38 	beq.w	80059c2 <_printf_float+0xc2>
 8005d52:	f108 0801 	add.w	r8, r8, #1
 8005d56:	68e3      	ldr	r3, [r4, #12]
 8005d58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d5a:	1a5b      	subs	r3, r3, r1
 8005d5c:	4543      	cmp	r3, r8
 8005d5e:	dcf0      	bgt.n	8005d42 <_printf_float+0x442>
 8005d60:	e6fa      	b.n	8005b58 <_printf_float+0x258>
 8005d62:	f04f 0800 	mov.w	r8, #0
 8005d66:	f104 0919 	add.w	r9, r4, #25
 8005d6a:	e7f4      	b.n	8005d56 <_printf_float+0x456>

08005d6c <_printf_common>:
 8005d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d70:	4616      	mov	r6, r2
 8005d72:	4699      	mov	r9, r3
 8005d74:	688a      	ldr	r2, [r1, #8]
 8005d76:	690b      	ldr	r3, [r1, #16]
 8005d78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	bfb8      	it	lt
 8005d80:	4613      	movlt	r3, r2
 8005d82:	6033      	str	r3, [r6, #0]
 8005d84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d88:	4607      	mov	r7, r0
 8005d8a:	460c      	mov	r4, r1
 8005d8c:	b10a      	cbz	r2, 8005d92 <_printf_common+0x26>
 8005d8e:	3301      	adds	r3, #1
 8005d90:	6033      	str	r3, [r6, #0]
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	0699      	lsls	r1, r3, #26
 8005d96:	bf42      	ittt	mi
 8005d98:	6833      	ldrmi	r3, [r6, #0]
 8005d9a:	3302      	addmi	r3, #2
 8005d9c:	6033      	strmi	r3, [r6, #0]
 8005d9e:	6825      	ldr	r5, [r4, #0]
 8005da0:	f015 0506 	ands.w	r5, r5, #6
 8005da4:	d106      	bne.n	8005db4 <_printf_common+0x48>
 8005da6:	f104 0a19 	add.w	sl, r4, #25
 8005daa:	68e3      	ldr	r3, [r4, #12]
 8005dac:	6832      	ldr	r2, [r6, #0]
 8005dae:	1a9b      	subs	r3, r3, r2
 8005db0:	42ab      	cmp	r3, r5
 8005db2:	dc26      	bgt.n	8005e02 <_printf_common+0x96>
 8005db4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005db8:	1e13      	subs	r3, r2, #0
 8005dba:	6822      	ldr	r2, [r4, #0]
 8005dbc:	bf18      	it	ne
 8005dbe:	2301      	movne	r3, #1
 8005dc0:	0692      	lsls	r2, r2, #26
 8005dc2:	d42b      	bmi.n	8005e1c <_printf_common+0xb0>
 8005dc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dc8:	4649      	mov	r1, r9
 8005dca:	4638      	mov	r0, r7
 8005dcc:	47c0      	blx	r8
 8005dce:	3001      	adds	r0, #1
 8005dd0:	d01e      	beq.n	8005e10 <_printf_common+0xa4>
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	68e5      	ldr	r5, [r4, #12]
 8005dd6:	6832      	ldr	r2, [r6, #0]
 8005dd8:	f003 0306 	and.w	r3, r3, #6
 8005ddc:	2b04      	cmp	r3, #4
 8005dde:	bf08      	it	eq
 8005de0:	1aad      	subeq	r5, r5, r2
 8005de2:	68a3      	ldr	r3, [r4, #8]
 8005de4:	6922      	ldr	r2, [r4, #16]
 8005de6:	bf0c      	ite	eq
 8005de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dec:	2500      	movne	r5, #0
 8005dee:	4293      	cmp	r3, r2
 8005df0:	bfc4      	itt	gt
 8005df2:	1a9b      	subgt	r3, r3, r2
 8005df4:	18ed      	addgt	r5, r5, r3
 8005df6:	2600      	movs	r6, #0
 8005df8:	341a      	adds	r4, #26
 8005dfa:	42b5      	cmp	r5, r6
 8005dfc:	d11a      	bne.n	8005e34 <_printf_common+0xc8>
 8005dfe:	2000      	movs	r0, #0
 8005e00:	e008      	b.n	8005e14 <_printf_common+0xa8>
 8005e02:	2301      	movs	r3, #1
 8005e04:	4652      	mov	r2, sl
 8005e06:	4649      	mov	r1, r9
 8005e08:	4638      	mov	r0, r7
 8005e0a:	47c0      	blx	r8
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	d103      	bne.n	8005e18 <_printf_common+0xac>
 8005e10:	f04f 30ff 	mov.w	r0, #4294967295
 8005e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e18:	3501      	adds	r5, #1
 8005e1a:	e7c6      	b.n	8005daa <_printf_common+0x3e>
 8005e1c:	18e1      	adds	r1, r4, r3
 8005e1e:	1c5a      	adds	r2, r3, #1
 8005e20:	2030      	movs	r0, #48	; 0x30
 8005e22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e26:	4422      	add	r2, r4
 8005e28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e30:	3302      	adds	r3, #2
 8005e32:	e7c7      	b.n	8005dc4 <_printf_common+0x58>
 8005e34:	2301      	movs	r3, #1
 8005e36:	4622      	mov	r2, r4
 8005e38:	4649      	mov	r1, r9
 8005e3a:	4638      	mov	r0, r7
 8005e3c:	47c0      	blx	r8
 8005e3e:	3001      	adds	r0, #1
 8005e40:	d0e6      	beq.n	8005e10 <_printf_common+0xa4>
 8005e42:	3601      	adds	r6, #1
 8005e44:	e7d9      	b.n	8005dfa <_printf_common+0x8e>
	...

08005e48 <_printf_i>:
 8005e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e4c:	7e0f      	ldrb	r7, [r1, #24]
 8005e4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e50:	2f78      	cmp	r7, #120	; 0x78
 8005e52:	4691      	mov	r9, r2
 8005e54:	4680      	mov	r8, r0
 8005e56:	460c      	mov	r4, r1
 8005e58:	469a      	mov	sl, r3
 8005e5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e5e:	d807      	bhi.n	8005e70 <_printf_i+0x28>
 8005e60:	2f62      	cmp	r7, #98	; 0x62
 8005e62:	d80a      	bhi.n	8005e7a <_printf_i+0x32>
 8005e64:	2f00      	cmp	r7, #0
 8005e66:	f000 80d8 	beq.w	800601a <_printf_i+0x1d2>
 8005e6a:	2f58      	cmp	r7, #88	; 0x58
 8005e6c:	f000 80a3 	beq.w	8005fb6 <_printf_i+0x16e>
 8005e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e78:	e03a      	b.n	8005ef0 <_printf_i+0xa8>
 8005e7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e7e:	2b15      	cmp	r3, #21
 8005e80:	d8f6      	bhi.n	8005e70 <_printf_i+0x28>
 8005e82:	a101      	add	r1, pc, #4	; (adr r1, 8005e88 <_printf_i+0x40>)
 8005e84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e88:	08005ee1 	.word	0x08005ee1
 8005e8c:	08005ef5 	.word	0x08005ef5
 8005e90:	08005e71 	.word	0x08005e71
 8005e94:	08005e71 	.word	0x08005e71
 8005e98:	08005e71 	.word	0x08005e71
 8005e9c:	08005e71 	.word	0x08005e71
 8005ea0:	08005ef5 	.word	0x08005ef5
 8005ea4:	08005e71 	.word	0x08005e71
 8005ea8:	08005e71 	.word	0x08005e71
 8005eac:	08005e71 	.word	0x08005e71
 8005eb0:	08005e71 	.word	0x08005e71
 8005eb4:	08006001 	.word	0x08006001
 8005eb8:	08005f25 	.word	0x08005f25
 8005ebc:	08005fe3 	.word	0x08005fe3
 8005ec0:	08005e71 	.word	0x08005e71
 8005ec4:	08005e71 	.word	0x08005e71
 8005ec8:	08006023 	.word	0x08006023
 8005ecc:	08005e71 	.word	0x08005e71
 8005ed0:	08005f25 	.word	0x08005f25
 8005ed4:	08005e71 	.word	0x08005e71
 8005ed8:	08005e71 	.word	0x08005e71
 8005edc:	08005feb 	.word	0x08005feb
 8005ee0:	682b      	ldr	r3, [r5, #0]
 8005ee2:	1d1a      	adds	r2, r3, #4
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	602a      	str	r2, [r5, #0]
 8005ee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005eec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e0a3      	b.n	800603c <_printf_i+0x1f4>
 8005ef4:	6820      	ldr	r0, [r4, #0]
 8005ef6:	6829      	ldr	r1, [r5, #0]
 8005ef8:	0606      	lsls	r6, r0, #24
 8005efa:	f101 0304 	add.w	r3, r1, #4
 8005efe:	d50a      	bpl.n	8005f16 <_printf_i+0xce>
 8005f00:	680e      	ldr	r6, [r1, #0]
 8005f02:	602b      	str	r3, [r5, #0]
 8005f04:	2e00      	cmp	r6, #0
 8005f06:	da03      	bge.n	8005f10 <_printf_i+0xc8>
 8005f08:	232d      	movs	r3, #45	; 0x2d
 8005f0a:	4276      	negs	r6, r6
 8005f0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f10:	485e      	ldr	r0, [pc, #376]	; (800608c <_printf_i+0x244>)
 8005f12:	230a      	movs	r3, #10
 8005f14:	e019      	b.n	8005f4a <_printf_i+0x102>
 8005f16:	680e      	ldr	r6, [r1, #0]
 8005f18:	602b      	str	r3, [r5, #0]
 8005f1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f1e:	bf18      	it	ne
 8005f20:	b236      	sxthne	r6, r6
 8005f22:	e7ef      	b.n	8005f04 <_printf_i+0xbc>
 8005f24:	682b      	ldr	r3, [r5, #0]
 8005f26:	6820      	ldr	r0, [r4, #0]
 8005f28:	1d19      	adds	r1, r3, #4
 8005f2a:	6029      	str	r1, [r5, #0]
 8005f2c:	0601      	lsls	r1, r0, #24
 8005f2e:	d501      	bpl.n	8005f34 <_printf_i+0xec>
 8005f30:	681e      	ldr	r6, [r3, #0]
 8005f32:	e002      	b.n	8005f3a <_printf_i+0xf2>
 8005f34:	0646      	lsls	r6, r0, #25
 8005f36:	d5fb      	bpl.n	8005f30 <_printf_i+0xe8>
 8005f38:	881e      	ldrh	r6, [r3, #0]
 8005f3a:	4854      	ldr	r0, [pc, #336]	; (800608c <_printf_i+0x244>)
 8005f3c:	2f6f      	cmp	r7, #111	; 0x6f
 8005f3e:	bf0c      	ite	eq
 8005f40:	2308      	moveq	r3, #8
 8005f42:	230a      	movne	r3, #10
 8005f44:	2100      	movs	r1, #0
 8005f46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f4a:	6865      	ldr	r5, [r4, #4]
 8005f4c:	60a5      	str	r5, [r4, #8]
 8005f4e:	2d00      	cmp	r5, #0
 8005f50:	bfa2      	ittt	ge
 8005f52:	6821      	ldrge	r1, [r4, #0]
 8005f54:	f021 0104 	bicge.w	r1, r1, #4
 8005f58:	6021      	strge	r1, [r4, #0]
 8005f5a:	b90e      	cbnz	r6, 8005f60 <_printf_i+0x118>
 8005f5c:	2d00      	cmp	r5, #0
 8005f5e:	d04d      	beq.n	8005ffc <_printf_i+0x1b4>
 8005f60:	4615      	mov	r5, r2
 8005f62:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f66:	fb03 6711 	mls	r7, r3, r1, r6
 8005f6a:	5dc7      	ldrb	r7, [r0, r7]
 8005f6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f70:	4637      	mov	r7, r6
 8005f72:	42bb      	cmp	r3, r7
 8005f74:	460e      	mov	r6, r1
 8005f76:	d9f4      	bls.n	8005f62 <_printf_i+0x11a>
 8005f78:	2b08      	cmp	r3, #8
 8005f7a:	d10b      	bne.n	8005f94 <_printf_i+0x14c>
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	07de      	lsls	r6, r3, #31
 8005f80:	d508      	bpl.n	8005f94 <_printf_i+0x14c>
 8005f82:	6923      	ldr	r3, [r4, #16]
 8005f84:	6861      	ldr	r1, [r4, #4]
 8005f86:	4299      	cmp	r1, r3
 8005f88:	bfde      	ittt	le
 8005f8a:	2330      	movle	r3, #48	; 0x30
 8005f8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f94:	1b52      	subs	r2, r2, r5
 8005f96:	6122      	str	r2, [r4, #16]
 8005f98:	f8cd a000 	str.w	sl, [sp]
 8005f9c:	464b      	mov	r3, r9
 8005f9e:	aa03      	add	r2, sp, #12
 8005fa0:	4621      	mov	r1, r4
 8005fa2:	4640      	mov	r0, r8
 8005fa4:	f7ff fee2 	bl	8005d6c <_printf_common>
 8005fa8:	3001      	adds	r0, #1
 8005faa:	d14c      	bne.n	8006046 <_printf_i+0x1fe>
 8005fac:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb0:	b004      	add	sp, #16
 8005fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb6:	4835      	ldr	r0, [pc, #212]	; (800608c <_printf_i+0x244>)
 8005fb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005fbc:	6829      	ldr	r1, [r5, #0]
 8005fbe:	6823      	ldr	r3, [r4, #0]
 8005fc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fc4:	6029      	str	r1, [r5, #0]
 8005fc6:	061d      	lsls	r5, r3, #24
 8005fc8:	d514      	bpl.n	8005ff4 <_printf_i+0x1ac>
 8005fca:	07df      	lsls	r7, r3, #31
 8005fcc:	bf44      	itt	mi
 8005fce:	f043 0320 	orrmi.w	r3, r3, #32
 8005fd2:	6023      	strmi	r3, [r4, #0]
 8005fd4:	b91e      	cbnz	r6, 8005fde <_printf_i+0x196>
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	f023 0320 	bic.w	r3, r3, #32
 8005fdc:	6023      	str	r3, [r4, #0]
 8005fde:	2310      	movs	r3, #16
 8005fe0:	e7b0      	b.n	8005f44 <_printf_i+0xfc>
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	f043 0320 	orr.w	r3, r3, #32
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	2378      	movs	r3, #120	; 0x78
 8005fec:	4828      	ldr	r0, [pc, #160]	; (8006090 <_printf_i+0x248>)
 8005fee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ff2:	e7e3      	b.n	8005fbc <_printf_i+0x174>
 8005ff4:	0659      	lsls	r1, r3, #25
 8005ff6:	bf48      	it	mi
 8005ff8:	b2b6      	uxthmi	r6, r6
 8005ffa:	e7e6      	b.n	8005fca <_printf_i+0x182>
 8005ffc:	4615      	mov	r5, r2
 8005ffe:	e7bb      	b.n	8005f78 <_printf_i+0x130>
 8006000:	682b      	ldr	r3, [r5, #0]
 8006002:	6826      	ldr	r6, [r4, #0]
 8006004:	6961      	ldr	r1, [r4, #20]
 8006006:	1d18      	adds	r0, r3, #4
 8006008:	6028      	str	r0, [r5, #0]
 800600a:	0635      	lsls	r5, r6, #24
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	d501      	bpl.n	8006014 <_printf_i+0x1cc>
 8006010:	6019      	str	r1, [r3, #0]
 8006012:	e002      	b.n	800601a <_printf_i+0x1d2>
 8006014:	0670      	lsls	r0, r6, #25
 8006016:	d5fb      	bpl.n	8006010 <_printf_i+0x1c8>
 8006018:	8019      	strh	r1, [r3, #0]
 800601a:	2300      	movs	r3, #0
 800601c:	6123      	str	r3, [r4, #16]
 800601e:	4615      	mov	r5, r2
 8006020:	e7ba      	b.n	8005f98 <_printf_i+0x150>
 8006022:	682b      	ldr	r3, [r5, #0]
 8006024:	1d1a      	adds	r2, r3, #4
 8006026:	602a      	str	r2, [r5, #0]
 8006028:	681d      	ldr	r5, [r3, #0]
 800602a:	6862      	ldr	r2, [r4, #4]
 800602c:	2100      	movs	r1, #0
 800602e:	4628      	mov	r0, r5
 8006030:	f7fa f8d6 	bl	80001e0 <memchr>
 8006034:	b108      	cbz	r0, 800603a <_printf_i+0x1f2>
 8006036:	1b40      	subs	r0, r0, r5
 8006038:	6060      	str	r0, [r4, #4]
 800603a:	6863      	ldr	r3, [r4, #4]
 800603c:	6123      	str	r3, [r4, #16]
 800603e:	2300      	movs	r3, #0
 8006040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006044:	e7a8      	b.n	8005f98 <_printf_i+0x150>
 8006046:	6923      	ldr	r3, [r4, #16]
 8006048:	462a      	mov	r2, r5
 800604a:	4649      	mov	r1, r9
 800604c:	4640      	mov	r0, r8
 800604e:	47d0      	blx	sl
 8006050:	3001      	adds	r0, #1
 8006052:	d0ab      	beq.n	8005fac <_printf_i+0x164>
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	079b      	lsls	r3, r3, #30
 8006058:	d413      	bmi.n	8006082 <_printf_i+0x23a>
 800605a:	68e0      	ldr	r0, [r4, #12]
 800605c:	9b03      	ldr	r3, [sp, #12]
 800605e:	4298      	cmp	r0, r3
 8006060:	bfb8      	it	lt
 8006062:	4618      	movlt	r0, r3
 8006064:	e7a4      	b.n	8005fb0 <_printf_i+0x168>
 8006066:	2301      	movs	r3, #1
 8006068:	4632      	mov	r2, r6
 800606a:	4649      	mov	r1, r9
 800606c:	4640      	mov	r0, r8
 800606e:	47d0      	blx	sl
 8006070:	3001      	adds	r0, #1
 8006072:	d09b      	beq.n	8005fac <_printf_i+0x164>
 8006074:	3501      	adds	r5, #1
 8006076:	68e3      	ldr	r3, [r4, #12]
 8006078:	9903      	ldr	r1, [sp, #12]
 800607a:	1a5b      	subs	r3, r3, r1
 800607c:	42ab      	cmp	r3, r5
 800607e:	dcf2      	bgt.n	8006066 <_printf_i+0x21e>
 8006080:	e7eb      	b.n	800605a <_printf_i+0x212>
 8006082:	2500      	movs	r5, #0
 8006084:	f104 0619 	add.w	r6, r4, #25
 8006088:	e7f5      	b.n	8006076 <_printf_i+0x22e>
 800608a:	bf00      	nop
 800608c:	0800995c 	.word	0x0800995c
 8006090:	0800996d 	.word	0x0800996d

08006094 <_sbrk_r>:
 8006094:	b538      	push	{r3, r4, r5, lr}
 8006096:	4d06      	ldr	r5, [pc, #24]	; (80060b0 <_sbrk_r+0x1c>)
 8006098:	2300      	movs	r3, #0
 800609a:	4604      	mov	r4, r0
 800609c:	4608      	mov	r0, r1
 800609e:	602b      	str	r3, [r5, #0]
 80060a0:	f7fb fb56 	bl	8001750 <_sbrk>
 80060a4:	1c43      	adds	r3, r0, #1
 80060a6:	d102      	bne.n	80060ae <_sbrk_r+0x1a>
 80060a8:	682b      	ldr	r3, [r5, #0]
 80060aa:	b103      	cbz	r3, 80060ae <_sbrk_r+0x1a>
 80060ac:	6023      	str	r3, [r4, #0]
 80060ae:	bd38      	pop	{r3, r4, r5, pc}
 80060b0:	20000440 	.word	0x20000440

080060b4 <strncpy>:
 80060b4:	b510      	push	{r4, lr}
 80060b6:	3901      	subs	r1, #1
 80060b8:	4603      	mov	r3, r0
 80060ba:	b132      	cbz	r2, 80060ca <strncpy+0x16>
 80060bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80060c0:	f803 4b01 	strb.w	r4, [r3], #1
 80060c4:	3a01      	subs	r2, #1
 80060c6:	2c00      	cmp	r4, #0
 80060c8:	d1f7      	bne.n	80060ba <strncpy+0x6>
 80060ca:	441a      	add	r2, r3
 80060cc:	2100      	movs	r1, #0
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d100      	bne.n	80060d4 <strncpy+0x20>
 80060d2:	bd10      	pop	{r4, pc}
 80060d4:	f803 1b01 	strb.w	r1, [r3], #1
 80060d8:	e7f9      	b.n	80060ce <strncpy+0x1a>
	...

080060dc <_strtol_l.constprop.0>:
 80060dc:	2b01      	cmp	r3, #1
 80060de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060e2:	d001      	beq.n	80060e8 <_strtol_l.constprop.0+0xc>
 80060e4:	2b24      	cmp	r3, #36	; 0x24
 80060e6:	d906      	bls.n	80060f6 <_strtol_l.constprop.0+0x1a>
 80060e8:	f7ff fa24 	bl	8005534 <__errno>
 80060ec:	2316      	movs	r3, #22
 80060ee:	6003      	str	r3, [r0, #0]
 80060f0:	2000      	movs	r0, #0
 80060f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80061dc <_strtol_l.constprop.0+0x100>
 80060fa:	460d      	mov	r5, r1
 80060fc:	462e      	mov	r6, r5
 80060fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006102:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006106:	f017 0708 	ands.w	r7, r7, #8
 800610a:	d1f7      	bne.n	80060fc <_strtol_l.constprop.0+0x20>
 800610c:	2c2d      	cmp	r4, #45	; 0x2d
 800610e:	d132      	bne.n	8006176 <_strtol_l.constprop.0+0x9a>
 8006110:	782c      	ldrb	r4, [r5, #0]
 8006112:	2701      	movs	r7, #1
 8006114:	1cb5      	adds	r5, r6, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d05b      	beq.n	80061d2 <_strtol_l.constprop.0+0xf6>
 800611a:	2b10      	cmp	r3, #16
 800611c:	d109      	bne.n	8006132 <_strtol_l.constprop.0+0x56>
 800611e:	2c30      	cmp	r4, #48	; 0x30
 8006120:	d107      	bne.n	8006132 <_strtol_l.constprop.0+0x56>
 8006122:	782c      	ldrb	r4, [r5, #0]
 8006124:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006128:	2c58      	cmp	r4, #88	; 0x58
 800612a:	d14d      	bne.n	80061c8 <_strtol_l.constprop.0+0xec>
 800612c:	786c      	ldrb	r4, [r5, #1]
 800612e:	2310      	movs	r3, #16
 8006130:	3502      	adds	r5, #2
 8006132:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006136:	f108 38ff 	add.w	r8, r8, #4294967295
 800613a:	f04f 0c00 	mov.w	ip, #0
 800613e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006142:	4666      	mov	r6, ip
 8006144:	fb03 8a19 	mls	sl, r3, r9, r8
 8006148:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800614c:	f1be 0f09 	cmp.w	lr, #9
 8006150:	d816      	bhi.n	8006180 <_strtol_l.constprop.0+0xa4>
 8006152:	4674      	mov	r4, lr
 8006154:	42a3      	cmp	r3, r4
 8006156:	dd24      	ble.n	80061a2 <_strtol_l.constprop.0+0xc6>
 8006158:	f1bc 0f00 	cmp.w	ip, #0
 800615c:	db1e      	blt.n	800619c <_strtol_l.constprop.0+0xc0>
 800615e:	45b1      	cmp	r9, r6
 8006160:	d31c      	bcc.n	800619c <_strtol_l.constprop.0+0xc0>
 8006162:	d101      	bne.n	8006168 <_strtol_l.constprop.0+0x8c>
 8006164:	45a2      	cmp	sl, r4
 8006166:	db19      	blt.n	800619c <_strtol_l.constprop.0+0xc0>
 8006168:	fb06 4603 	mla	r6, r6, r3, r4
 800616c:	f04f 0c01 	mov.w	ip, #1
 8006170:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006174:	e7e8      	b.n	8006148 <_strtol_l.constprop.0+0x6c>
 8006176:	2c2b      	cmp	r4, #43	; 0x2b
 8006178:	bf04      	itt	eq
 800617a:	782c      	ldrbeq	r4, [r5, #0]
 800617c:	1cb5      	addeq	r5, r6, #2
 800617e:	e7ca      	b.n	8006116 <_strtol_l.constprop.0+0x3a>
 8006180:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006184:	f1be 0f19 	cmp.w	lr, #25
 8006188:	d801      	bhi.n	800618e <_strtol_l.constprop.0+0xb2>
 800618a:	3c37      	subs	r4, #55	; 0x37
 800618c:	e7e2      	b.n	8006154 <_strtol_l.constprop.0+0x78>
 800618e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006192:	f1be 0f19 	cmp.w	lr, #25
 8006196:	d804      	bhi.n	80061a2 <_strtol_l.constprop.0+0xc6>
 8006198:	3c57      	subs	r4, #87	; 0x57
 800619a:	e7db      	b.n	8006154 <_strtol_l.constprop.0+0x78>
 800619c:	f04f 3cff 	mov.w	ip, #4294967295
 80061a0:	e7e6      	b.n	8006170 <_strtol_l.constprop.0+0x94>
 80061a2:	f1bc 0f00 	cmp.w	ip, #0
 80061a6:	da05      	bge.n	80061b4 <_strtol_l.constprop.0+0xd8>
 80061a8:	2322      	movs	r3, #34	; 0x22
 80061aa:	6003      	str	r3, [r0, #0]
 80061ac:	4646      	mov	r6, r8
 80061ae:	b942      	cbnz	r2, 80061c2 <_strtol_l.constprop.0+0xe6>
 80061b0:	4630      	mov	r0, r6
 80061b2:	e79e      	b.n	80060f2 <_strtol_l.constprop.0+0x16>
 80061b4:	b107      	cbz	r7, 80061b8 <_strtol_l.constprop.0+0xdc>
 80061b6:	4276      	negs	r6, r6
 80061b8:	2a00      	cmp	r2, #0
 80061ba:	d0f9      	beq.n	80061b0 <_strtol_l.constprop.0+0xd4>
 80061bc:	f1bc 0f00 	cmp.w	ip, #0
 80061c0:	d000      	beq.n	80061c4 <_strtol_l.constprop.0+0xe8>
 80061c2:	1e69      	subs	r1, r5, #1
 80061c4:	6011      	str	r1, [r2, #0]
 80061c6:	e7f3      	b.n	80061b0 <_strtol_l.constprop.0+0xd4>
 80061c8:	2430      	movs	r4, #48	; 0x30
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1b1      	bne.n	8006132 <_strtol_l.constprop.0+0x56>
 80061ce:	2308      	movs	r3, #8
 80061d0:	e7af      	b.n	8006132 <_strtol_l.constprop.0+0x56>
 80061d2:	2c30      	cmp	r4, #48	; 0x30
 80061d4:	d0a5      	beq.n	8006122 <_strtol_l.constprop.0+0x46>
 80061d6:	230a      	movs	r3, #10
 80061d8:	e7ab      	b.n	8006132 <_strtol_l.constprop.0+0x56>
 80061da:	bf00      	nop
 80061dc:	0800997f 	.word	0x0800997f

080061e0 <strtol>:
 80061e0:	4613      	mov	r3, r2
 80061e2:	460a      	mov	r2, r1
 80061e4:	4601      	mov	r1, r0
 80061e6:	4802      	ldr	r0, [pc, #8]	; (80061f0 <strtol+0x10>)
 80061e8:	6800      	ldr	r0, [r0, #0]
 80061ea:	f7ff bf77 	b.w	80060dc <_strtol_l.constprop.0>
 80061ee:	bf00      	nop
 80061f0:	20000020 	.word	0x20000020

080061f4 <_vsniprintf_r>:
 80061f4:	b530      	push	{r4, r5, lr}
 80061f6:	4614      	mov	r4, r2
 80061f8:	2c00      	cmp	r4, #0
 80061fa:	b09b      	sub	sp, #108	; 0x6c
 80061fc:	4605      	mov	r5, r0
 80061fe:	461a      	mov	r2, r3
 8006200:	da05      	bge.n	800620e <_vsniprintf_r+0x1a>
 8006202:	238b      	movs	r3, #139	; 0x8b
 8006204:	6003      	str	r3, [r0, #0]
 8006206:	f04f 30ff 	mov.w	r0, #4294967295
 800620a:	b01b      	add	sp, #108	; 0x6c
 800620c:	bd30      	pop	{r4, r5, pc}
 800620e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006212:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006216:	bf14      	ite	ne
 8006218:	f104 33ff 	addne.w	r3, r4, #4294967295
 800621c:	4623      	moveq	r3, r4
 800621e:	9302      	str	r3, [sp, #8]
 8006220:	9305      	str	r3, [sp, #20]
 8006222:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006226:	9100      	str	r1, [sp, #0]
 8006228:	9104      	str	r1, [sp, #16]
 800622a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800622e:	4669      	mov	r1, sp
 8006230:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006232:	f001 fa83 	bl	800773c <_svfiprintf_r>
 8006236:	1c43      	adds	r3, r0, #1
 8006238:	bfbc      	itt	lt
 800623a:	238b      	movlt	r3, #139	; 0x8b
 800623c:	602b      	strlt	r3, [r5, #0]
 800623e:	2c00      	cmp	r4, #0
 8006240:	d0e3      	beq.n	800620a <_vsniprintf_r+0x16>
 8006242:	9b00      	ldr	r3, [sp, #0]
 8006244:	2200      	movs	r2, #0
 8006246:	701a      	strb	r2, [r3, #0]
 8006248:	e7df      	b.n	800620a <_vsniprintf_r+0x16>
	...

0800624c <vsniprintf>:
 800624c:	b507      	push	{r0, r1, r2, lr}
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	4613      	mov	r3, r2
 8006252:	460a      	mov	r2, r1
 8006254:	4601      	mov	r1, r0
 8006256:	4803      	ldr	r0, [pc, #12]	; (8006264 <vsniprintf+0x18>)
 8006258:	6800      	ldr	r0, [r0, #0]
 800625a:	f7ff ffcb 	bl	80061f4 <_vsniprintf_r>
 800625e:	b003      	add	sp, #12
 8006260:	f85d fb04 	ldr.w	pc, [sp], #4
 8006264:	20000020 	.word	0x20000020

08006268 <quorem>:
 8006268:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800626c:	6903      	ldr	r3, [r0, #16]
 800626e:	690c      	ldr	r4, [r1, #16]
 8006270:	42a3      	cmp	r3, r4
 8006272:	4607      	mov	r7, r0
 8006274:	f2c0 8081 	blt.w	800637a <quorem+0x112>
 8006278:	3c01      	subs	r4, #1
 800627a:	f101 0814 	add.w	r8, r1, #20
 800627e:	f100 0514 	add.w	r5, r0, #20
 8006282:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006286:	9301      	str	r3, [sp, #4]
 8006288:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800628c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006290:	3301      	adds	r3, #1
 8006292:	429a      	cmp	r2, r3
 8006294:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006298:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800629c:	fbb2 f6f3 	udiv	r6, r2, r3
 80062a0:	d331      	bcc.n	8006306 <quorem+0x9e>
 80062a2:	f04f 0e00 	mov.w	lr, #0
 80062a6:	4640      	mov	r0, r8
 80062a8:	46ac      	mov	ip, r5
 80062aa:	46f2      	mov	sl, lr
 80062ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80062b0:	b293      	uxth	r3, r2
 80062b2:	fb06 e303 	mla	r3, r6, r3, lr
 80062b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	ebaa 0303 	sub.w	r3, sl, r3
 80062c0:	f8dc a000 	ldr.w	sl, [ip]
 80062c4:	0c12      	lsrs	r2, r2, #16
 80062c6:	fa13 f38a 	uxtah	r3, r3, sl
 80062ca:	fb06 e202 	mla	r2, r6, r2, lr
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	9b00      	ldr	r3, [sp, #0]
 80062d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80062d6:	b292      	uxth	r2, r2
 80062d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80062dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80062e4:	4581      	cmp	r9, r0
 80062e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062ea:	f84c 3b04 	str.w	r3, [ip], #4
 80062ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80062f2:	d2db      	bcs.n	80062ac <quorem+0x44>
 80062f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80062f8:	b92b      	cbnz	r3, 8006306 <quorem+0x9e>
 80062fa:	9b01      	ldr	r3, [sp, #4]
 80062fc:	3b04      	subs	r3, #4
 80062fe:	429d      	cmp	r5, r3
 8006300:	461a      	mov	r2, r3
 8006302:	d32e      	bcc.n	8006362 <quorem+0xfa>
 8006304:	613c      	str	r4, [r7, #16]
 8006306:	4638      	mov	r0, r7
 8006308:	f001 f8ba 	bl	8007480 <__mcmp>
 800630c:	2800      	cmp	r0, #0
 800630e:	db24      	blt.n	800635a <quorem+0xf2>
 8006310:	3601      	adds	r6, #1
 8006312:	4628      	mov	r0, r5
 8006314:	f04f 0c00 	mov.w	ip, #0
 8006318:	f858 2b04 	ldr.w	r2, [r8], #4
 800631c:	f8d0 e000 	ldr.w	lr, [r0]
 8006320:	b293      	uxth	r3, r2
 8006322:	ebac 0303 	sub.w	r3, ip, r3
 8006326:	0c12      	lsrs	r2, r2, #16
 8006328:	fa13 f38e 	uxtah	r3, r3, lr
 800632c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006330:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006334:	b29b      	uxth	r3, r3
 8006336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800633a:	45c1      	cmp	r9, r8
 800633c:	f840 3b04 	str.w	r3, [r0], #4
 8006340:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006344:	d2e8      	bcs.n	8006318 <quorem+0xb0>
 8006346:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800634a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800634e:	b922      	cbnz	r2, 800635a <quorem+0xf2>
 8006350:	3b04      	subs	r3, #4
 8006352:	429d      	cmp	r5, r3
 8006354:	461a      	mov	r2, r3
 8006356:	d30a      	bcc.n	800636e <quorem+0x106>
 8006358:	613c      	str	r4, [r7, #16]
 800635a:	4630      	mov	r0, r6
 800635c:	b003      	add	sp, #12
 800635e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006362:	6812      	ldr	r2, [r2, #0]
 8006364:	3b04      	subs	r3, #4
 8006366:	2a00      	cmp	r2, #0
 8006368:	d1cc      	bne.n	8006304 <quorem+0x9c>
 800636a:	3c01      	subs	r4, #1
 800636c:	e7c7      	b.n	80062fe <quorem+0x96>
 800636e:	6812      	ldr	r2, [r2, #0]
 8006370:	3b04      	subs	r3, #4
 8006372:	2a00      	cmp	r2, #0
 8006374:	d1f0      	bne.n	8006358 <quorem+0xf0>
 8006376:	3c01      	subs	r4, #1
 8006378:	e7eb      	b.n	8006352 <quorem+0xea>
 800637a:	2000      	movs	r0, #0
 800637c:	e7ee      	b.n	800635c <quorem+0xf4>
	...

08006380 <_dtoa_r>:
 8006380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006384:	ed2d 8b04 	vpush	{d8-d9}
 8006388:	ec57 6b10 	vmov	r6, r7, d0
 800638c:	b093      	sub	sp, #76	; 0x4c
 800638e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006390:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006394:	9106      	str	r1, [sp, #24]
 8006396:	ee10 aa10 	vmov	sl, s0
 800639a:	4604      	mov	r4, r0
 800639c:	9209      	str	r2, [sp, #36]	; 0x24
 800639e:	930c      	str	r3, [sp, #48]	; 0x30
 80063a0:	46bb      	mov	fp, r7
 80063a2:	b975      	cbnz	r5, 80063c2 <_dtoa_r+0x42>
 80063a4:	2010      	movs	r0, #16
 80063a6:	f7ff f8ef 	bl	8005588 <malloc>
 80063aa:	4602      	mov	r2, r0
 80063ac:	6260      	str	r0, [r4, #36]	; 0x24
 80063ae:	b920      	cbnz	r0, 80063ba <_dtoa_r+0x3a>
 80063b0:	4ba7      	ldr	r3, [pc, #668]	; (8006650 <_dtoa_r+0x2d0>)
 80063b2:	21ea      	movs	r1, #234	; 0xea
 80063b4:	48a7      	ldr	r0, [pc, #668]	; (8006654 <_dtoa_r+0x2d4>)
 80063b6:	f001 fac1 	bl	800793c <__assert_func>
 80063ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80063be:	6005      	str	r5, [r0, #0]
 80063c0:	60c5      	str	r5, [r0, #12]
 80063c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063c4:	6819      	ldr	r1, [r3, #0]
 80063c6:	b151      	cbz	r1, 80063de <_dtoa_r+0x5e>
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	604a      	str	r2, [r1, #4]
 80063cc:	2301      	movs	r3, #1
 80063ce:	4093      	lsls	r3, r2
 80063d0:	608b      	str	r3, [r1, #8]
 80063d2:	4620      	mov	r0, r4
 80063d4:	f000 fe12 	bl	8006ffc <_Bfree>
 80063d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063da:	2200      	movs	r2, #0
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	1e3b      	subs	r3, r7, #0
 80063e0:	bfaa      	itet	ge
 80063e2:	2300      	movge	r3, #0
 80063e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80063e8:	f8c8 3000 	strge.w	r3, [r8]
 80063ec:	4b9a      	ldr	r3, [pc, #616]	; (8006658 <_dtoa_r+0x2d8>)
 80063ee:	bfbc      	itt	lt
 80063f0:	2201      	movlt	r2, #1
 80063f2:	f8c8 2000 	strlt.w	r2, [r8]
 80063f6:	ea33 030b 	bics.w	r3, r3, fp
 80063fa:	d11b      	bne.n	8006434 <_dtoa_r+0xb4>
 80063fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8006402:	6013      	str	r3, [r2, #0]
 8006404:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006408:	4333      	orrs	r3, r6
 800640a:	f000 8592 	beq.w	8006f32 <_dtoa_r+0xbb2>
 800640e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006410:	b963      	cbnz	r3, 800642c <_dtoa_r+0xac>
 8006412:	4b92      	ldr	r3, [pc, #584]	; (800665c <_dtoa_r+0x2dc>)
 8006414:	e022      	b.n	800645c <_dtoa_r+0xdc>
 8006416:	4b92      	ldr	r3, [pc, #584]	; (8006660 <_dtoa_r+0x2e0>)
 8006418:	9301      	str	r3, [sp, #4]
 800641a:	3308      	adds	r3, #8
 800641c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800641e:	6013      	str	r3, [r2, #0]
 8006420:	9801      	ldr	r0, [sp, #4]
 8006422:	b013      	add	sp, #76	; 0x4c
 8006424:	ecbd 8b04 	vpop	{d8-d9}
 8006428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800642c:	4b8b      	ldr	r3, [pc, #556]	; (800665c <_dtoa_r+0x2dc>)
 800642e:	9301      	str	r3, [sp, #4]
 8006430:	3303      	adds	r3, #3
 8006432:	e7f3      	b.n	800641c <_dtoa_r+0x9c>
 8006434:	2200      	movs	r2, #0
 8006436:	2300      	movs	r3, #0
 8006438:	4650      	mov	r0, sl
 800643a:	4659      	mov	r1, fp
 800643c:	f7fa fb44 	bl	8000ac8 <__aeabi_dcmpeq>
 8006440:	ec4b ab19 	vmov	d9, sl, fp
 8006444:	4680      	mov	r8, r0
 8006446:	b158      	cbz	r0, 8006460 <_dtoa_r+0xe0>
 8006448:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800644a:	2301      	movs	r3, #1
 800644c:	6013      	str	r3, [r2, #0]
 800644e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 856b 	beq.w	8006f2c <_dtoa_r+0xbac>
 8006456:	4883      	ldr	r0, [pc, #524]	; (8006664 <_dtoa_r+0x2e4>)
 8006458:	6018      	str	r0, [r3, #0]
 800645a:	1e43      	subs	r3, r0, #1
 800645c:	9301      	str	r3, [sp, #4]
 800645e:	e7df      	b.n	8006420 <_dtoa_r+0xa0>
 8006460:	ec4b ab10 	vmov	d0, sl, fp
 8006464:	aa10      	add	r2, sp, #64	; 0x40
 8006466:	a911      	add	r1, sp, #68	; 0x44
 8006468:	4620      	mov	r0, r4
 800646a:	f001 f8af 	bl	80075cc <__d2b>
 800646e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006472:	ee08 0a10 	vmov	s16, r0
 8006476:	2d00      	cmp	r5, #0
 8006478:	f000 8084 	beq.w	8006584 <_dtoa_r+0x204>
 800647c:	ee19 3a90 	vmov	r3, s19
 8006480:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006484:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006488:	4656      	mov	r6, sl
 800648a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800648e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006492:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006496:	4b74      	ldr	r3, [pc, #464]	; (8006668 <_dtoa_r+0x2e8>)
 8006498:	2200      	movs	r2, #0
 800649a:	4630      	mov	r0, r6
 800649c:	4639      	mov	r1, r7
 800649e:	f7f9 fef3 	bl	8000288 <__aeabi_dsub>
 80064a2:	a365      	add	r3, pc, #404	; (adr r3, 8006638 <_dtoa_r+0x2b8>)
 80064a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a8:	f7fa f8a6 	bl	80005f8 <__aeabi_dmul>
 80064ac:	a364      	add	r3, pc, #400	; (adr r3, 8006640 <_dtoa_r+0x2c0>)
 80064ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b2:	f7f9 feeb 	bl	800028c <__adddf3>
 80064b6:	4606      	mov	r6, r0
 80064b8:	4628      	mov	r0, r5
 80064ba:	460f      	mov	r7, r1
 80064bc:	f7fa f832 	bl	8000524 <__aeabi_i2d>
 80064c0:	a361      	add	r3, pc, #388	; (adr r3, 8006648 <_dtoa_r+0x2c8>)
 80064c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c6:	f7fa f897 	bl	80005f8 <__aeabi_dmul>
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	4630      	mov	r0, r6
 80064d0:	4639      	mov	r1, r7
 80064d2:	f7f9 fedb 	bl	800028c <__adddf3>
 80064d6:	4606      	mov	r6, r0
 80064d8:	460f      	mov	r7, r1
 80064da:	f7fa fb3d 	bl	8000b58 <__aeabi_d2iz>
 80064de:	2200      	movs	r2, #0
 80064e0:	9000      	str	r0, [sp, #0]
 80064e2:	2300      	movs	r3, #0
 80064e4:	4630      	mov	r0, r6
 80064e6:	4639      	mov	r1, r7
 80064e8:	f7fa faf8 	bl	8000adc <__aeabi_dcmplt>
 80064ec:	b150      	cbz	r0, 8006504 <_dtoa_r+0x184>
 80064ee:	9800      	ldr	r0, [sp, #0]
 80064f0:	f7fa f818 	bl	8000524 <__aeabi_i2d>
 80064f4:	4632      	mov	r2, r6
 80064f6:	463b      	mov	r3, r7
 80064f8:	f7fa fae6 	bl	8000ac8 <__aeabi_dcmpeq>
 80064fc:	b910      	cbnz	r0, 8006504 <_dtoa_r+0x184>
 80064fe:	9b00      	ldr	r3, [sp, #0]
 8006500:	3b01      	subs	r3, #1
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	9b00      	ldr	r3, [sp, #0]
 8006506:	2b16      	cmp	r3, #22
 8006508:	d85a      	bhi.n	80065c0 <_dtoa_r+0x240>
 800650a:	9a00      	ldr	r2, [sp, #0]
 800650c:	4b57      	ldr	r3, [pc, #348]	; (800666c <_dtoa_r+0x2ec>)
 800650e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	ec51 0b19 	vmov	r0, r1, d9
 800651a:	f7fa fadf 	bl	8000adc <__aeabi_dcmplt>
 800651e:	2800      	cmp	r0, #0
 8006520:	d050      	beq.n	80065c4 <_dtoa_r+0x244>
 8006522:	9b00      	ldr	r3, [sp, #0]
 8006524:	3b01      	subs	r3, #1
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	2300      	movs	r3, #0
 800652a:	930b      	str	r3, [sp, #44]	; 0x2c
 800652c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800652e:	1b5d      	subs	r5, r3, r5
 8006530:	1e6b      	subs	r3, r5, #1
 8006532:	9305      	str	r3, [sp, #20]
 8006534:	bf45      	ittet	mi
 8006536:	f1c5 0301 	rsbmi	r3, r5, #1
 800653a:	9304      	strmi	r3, [sp, #16]
 800653c:	2300      	movpl	r3, #0
 800653e:	2300      	movmi	r3, #0
 8006540:	bf4c      	ite	mi
 8006542:	9305      	strmi	r3, [sp, #20]
 8006544:	9304      	strpl	r3, [sp, #16]
 8006546:	9b00      	ldr	r3, [sp, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	db3d      	blt.n	80065c8 <_dtoa_r+0x248>
 800654c:	9b05      	ldr	r3, [sp, #20]
 800654e:	9a00      	ldr	r2, [sp, #0]
 8006550:	920a      	str	r2, [sp, #40]	; 0x28
 8006552:	4413      	add	r3, r2
 8006554:	9305      	str	r3, [sp, #20]
 8006556:	2300      	movs	r3, #0
 8006558:	9307      	str	r3, [sp, #28]
 800655a:	9b06      	ldr	r3, [sp, #24]
 800655c:	2b09      	cmp	r3, #9
 800655e:	f200 8089 	bhi.w	8006674 <_dtoa_r+0x2f4>
 8006562:	2b05      	cmp	r3, #5
 8006564:	bfc4      	itt	gt
 8006566:	3b04      	subgt	r3, #4
 8006568:	9306      	strgt	r3, [sp, #24]
 800656a:	9b06      	ldr	r3, [sp, #24]
 800656c:	f1a3 0302 	sub.w	r3, r3, #2
 8006570:	bfcc      	ite	gt
 8006572:	2500      	movgt	r5, #0
 8006574:	2501      	movle	r5, #1
 8006576:	2b03      	cmp	r3, #3
 8006578:	f200 8087 	bhi.w	800668a <_dtoa_r+0x30a>
 800657c:	e8df f003 	tbb	[pc, r3]
 8006580:	59383a2d 	.word	0x59383a2d
 8006584:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006588:	441d      	add	r5, r3
 800658a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800658e:	2b20      	cmp	r3, #32
 8006590:	bfc1      	itttt	gt
 8006592:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006596:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800659a:	fa0b f303 	lslgt.w	r3, fp, r3
 800659e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80065a2:	bfda      	itte	le
 80065a4:	f1c3 0320 	rsble	r3, r3, #32
 80065a8:	fa06 f003 	lslle.w	r0, r6, r3
 80065ac:	4318      	orrgt	r0, r3
 80065ae:	f7f9 ffa9 	bl	8000504 <__aeabi_ui2d>
 80065b2:	2301      	movs	r3, #1
 80065b4:	4606      	mov	r6, r0
 80065b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80065ba:	3d01      	subs	r5, #1
 80065bc:	930e      	str	r3, [sp, #56]	; 0x38
 80065be:	e76a      	b.n	8006496 <_dtoa_r+0x116>
 80065c0:	2301      	movs	r3, #1
 80065c2:	e7b2      	b.n	800652a <_dtoa_r+0x1aa>
 80065c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80065c6:	e7b1      	b.n	800652c <_dtoa_r+0x1ac>
 80065c8:	9b04      	ldr	r3, [sp, #16]
 80065ca:	9a00      	ldr	r2, [sp, #0]
 80065cc:	1a9b      	subs	r3, r3, r2
 80065ce:	9304      	str	r3, [sp, #16]
 80065d0:	4253      	negs	r3, r2
 80065d2:	9307      	str	r3, [sp, #28]
 80065d4:	2300      	movs	r3, #0
 80065d6:	930a      	str	r3, [sp, #40]	; 0x28
 80065d8:	e7bf      	b.n	800655a <_dtoa_r+0x1da>
 80065da:	2300      	movs	r3, #0
 80065dc:	9308      	str	r3, [sp, #32]
 80065de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	dc55      	bgt.n	8006690 <_dtoa_r+0x310>
 80065e4:	2301      	movs	r3, #1
 80065e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80065ea:	461a      	mov	r2, r3
 80065ec:	9209      	str	r2, [sp, #36]	; 0x24
 80065ee:	e00c      	b.n	800660a <_dtoa_r+0x28a>
 80065f0:	2301      	movs	r3, #1
 80065f2:	e7f3      	b.n	80065dc <_dtoa_r+0x25c>
 80065f4:	2300      	movs	r3, #0
 80065f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065f8:	9308      	str	r3, [sp, #32]
 80065fa:	9b00      	ldr	r3, [sp, #0]
 80065fc:	4413      	add	r3, r2
 80065fe:	9302      	str	r3, [sp, #8]
 8006600:	3301      	adds	r3, #1
 8006602:	2b01      	cmp	r3, #1
 8006604:	9303      	str	r3, [sp, #12]
 8006606:	bfb8      	it	lt
 8006608:	2301      	movlt	r3, #1
 800660a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800660c:	2200      	movs	r2, #0
 800660e:	6042      	str	r2, [r0, #4]
 8006610:	2204      	movs	r2, #4
 8006612:	f102 0614 	add.w	r6, r2, #20
 8006616:	429e      	cmp	r6, r3
 8006618:	6841      	ldr	r1, [r0, #4]
 800661a:	d93d      	bls.n	8006698 <_dtoa_r+0x318>
 800661c:	4620      	mov	r0, r4
 800661e:	f000 fcad 	bl	8006f7c <_Balloc>
 8006622:	9001      	str	r0, [sp, #4]
 8006624:	2800      	cmp	r0, #0
 8006626:	d13b      	bne.n	80066a0 <_dtoa_r+0x320>
 8006628:	4b11      	ldr	r3, [pc, #68]	; (8006670 <_dtoa_r+0x2f0>)
 800662a:	4602      	mov	r2, r0
 800662c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006630:	e6c0      	b.n	80063b4 <_dtoa_r+0x34>
 8006632:	2301      	movs	r3, #1
 8006634:	e7df      	b.n	80065f6 <_dtoa_r+0x276>
 8006636:	bf00      	nop
 8006638:	636f4361 	.word	0x636f4361
 800663c:	3fd287a7 	.word	0x3fd287a7
 8006640:	8b60c8b3 	.word	0x8b60c8b3
 8006644:	3fc68a28 	.word	0x3fc68a28
 8006648:	509f79fb 	.word	0x509f79fb
 800664c:	3fd34413 	.word	0x3fd34413
 8006650:	08009a8c 	.word	0x08009a8c
 8006654:	08009aa3 	.word	0x08009aa3
 8006658:	7ff00000 	.word	0x7ff00000
 800665c:	08009a88 	.word	0x08009a88
 8006660:	08009a7f 	.word	0x08009a7f
 8006664:	0800922b 	.word	0x0800922b
 8006668:	3ff80000 	.word	0x3ff80000
 800666c:	08009b98 	.word	0x08009b98
 8006670:	08009afe 	.word	0x08009afe
 8006674:	2501      	movs	r5, #1
 8006676:	2300      	movs	r3, #0
 8006678:	9306      	str	r3, [sp, #24]
 800667a:	9508      	str	r5, [sp, #32]
 800667c:	f04f 33ff 	mov.w	r3, #4294967295
 8006680:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006684:	2200      	movs	r2, #0
 8006686:	2312      	movs	r3, #18
 8006688:	e7b0      	b.n	80065ec <_dtoa_r+0x26c>
 800668a:	2301      	movs	r3, #1
 800668c:	9308      	str	r3, [sp, #32]
 800668e:	e7f5      	b.n	800667c <_dtoa_r+0x2fc>
 8006690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006692:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006696:	e7b8      	b.n	800660a <_dtoa_r+0x28a>
 8006698:	3101      	adds	r1, #1
 800669a:	6041      	str	r1, [r0, #4]
 800669c:	0052      	lsls	r2, r2, #1
 800669e:	e7b8      	b.n	8006612 <_dtoa_r+0x292>
 80066a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066a2:	9a01      	ldr	r2, [sp, #4]
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	9b03      	ldr	r3, [sp, #12]
 80066a8:	2b0e      	cmp	r3, #14
 80066aa:	f200 809d 	bhi.w	80067e8 <_dtoa_r+0x468>
 80066ae:	2d00      	cmp	r5, #0
 80066b0:	f000 809a 	beq.w	80067e8 <_dtoa_r+0x468>
 80066b4:	9b00      	ldr	r3, [sp, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	dd32      	ble.n	8006720 <_dtoa_r+0x3a0>
 80066ba:	4ab7      	ldr	r2, [pc, #732]	; (8006998 <_dtoa_r+0x618>)
 80066bc:	f003 030f 	and.w	r3, r3, #15
 80066c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80066c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066c8:	9b00      	ldr	r3, [sp, #0]
 80066ca:	05d8      	lsls	r0, r3, #23
 80066cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80066d0:	d516      	bpl.n	8006700 <_dtoa_r+0x380>
 80066d2:	4bb2      	ldr	r3, [pc, #712]	; (800699c <_dtoa_r+0x61c>)
 80066d4:	ec51 0b19 	vmov	r0, r1, d9
 80066d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066dc:	f7fa f8b6 	bl	800084c <__aeabi_ddiv>
 80066e0:	f007 070f 	and.w	r7, r7, #15
 80066e4:	4682      	mov	sl, r0
 80066e6:	468b      	mov	fp, r1
 80066e8:	2503      	movs	r5, #3
 80066ea:	4eac      	ldr	r6, [pc, #688]	; (800699c <_dtoa_r+0x61c>)
 80066ec:	b957      	cbnz	r7, 8006704 <_dtoa_r+0x384>
 80066ee:	4642      	mov	r2, r8
 80066f0:	464b      	mov	r3, r9
 80066f2:	4650      	mov	r0, sl
 80066f4:	4659      	mov	r1, fp
 80066f6:	f7fa f8a9 	bl	800084c <__aeabi_ddiv>
 80066fa:	4682      	mov	sl, r0
 80066fc:	468b      	mov	fp, r1
 80066fe:	e028      	b.n	8006752 <_dtoa_r+0x3d2>
 8006700:	2502      	movs	r5, #2
 8006702:	e7f2      	b.n	80066ea <_dtoa_r+0x36a>
 8006704:	07f9      	lsls	r1, r7, #31
 8006706:	d508      	bpl.n	800671a <_dtoa_r+0x39a>
 8006708:	4640      	mov	r0, r8
 800670a:	4649      	mov	r1, r9
 800670c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006710:	f7f9 ff72 	bl	80005f8 <__aeabi_dmul>
 8006714:	3501      	adds	r5, #1
 8006716:	4680      	mov	r8, r0
 8006718:	4689      	mov	r9, r1
 800671a:	107f      	asrs	r7, r7, #1
 800671c:	3608      	adds	r6, #8
 800671e:	e7e5      	b.n	80066ec <_dtoa_r+0x36c>
 8006720:	f000 809b 	beq.w	800685a <_dtoa_r+0x4da>
 8006724:	9b00      	ldr	r3, [sp, #0]
 8006726:	4f9d      	ldr	r7, [pc, #628]	; (800699c <_dtoa_r+0x61c>)
 8006728:	425e      	negs	r6, r3
 800672a:	4b9b      	ldr	r3, [pc, #620]	; (8006998 <_dtoa_r+0x618>)
 800672c:	f006 020f 	and.w	r2, r6, #15
 8006730:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006738:	ec51 0b19 	vmov	r0, r1, d9
 800673c:	f7f9 ff5c 	bl	80005f8 <__aeabi_dmul>
 8006740:	1136      	asrs	r6, r6, #4
 8006742:	4682      	mov	sl, r0
 8006744:	468b      	mov	fp, r1
 8006746:	2300      	movs	r3, #0
 8006748:	2502      	movs	r5, #2
 800674a:	2e00      	cmp	r6, #0
 800674c:	d17a      	bne.n	8006844 <_dtoa_r+0x4c4>
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1d3      	bne.n	80066fa <_dtoa_r+0x37a>
 8006752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 8082 	beq.w	800685e <_dtoa_r+0x4de>
 800675a:	4b91      	ldr	r3, [pc, #580]	; (80069a0 <_dtoa_r+0x620>)
 800675c:	2200      	movs	r2, #0
 800675e:	4650      	mov	r0, sl
 8006760:	4659      	mov	r1, fp
 8006762:	f7fa f9bb 	bl	8000adc <__aeabi_dcmplt>
 8006766:	2800      	cmp	r0, #0
 8006768:	d079      	beq.n	800685e <_dtoa_r+0x4de>
 800676a:	9b03      	ldr	r3, [sp, #12]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d076      	beq.n	800685e <_dtoa_r+0x4de>
 8006770:	9b02      	ldr	r3, [sp, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	dd36      	ble.n	80067e4 <_dtoa_r+0x464>
 8006776:	9b00      	ldr	r3, [sp, #0]
 8006778:	4650      	mov	r0, sl
 800677a:	4659      	mov	r1, fp
 800677c:	1e5f      	subs	r7, r3, #1
 800677e:	2200      	movs	r2, #0
 8006780:	4b88      	ldr	r3, [pc, #544]	; (80069a4 <_dtoa_r+0x624>)
 8006782:	f7f9 ff39 	bl	80005f8 <__aeabi_dmul>
 8006786:	9e02      	ldr	r6, [sp, #8]
 8006788:	4682      	mov	sl, r0
 800678a:	468b      	mov	fp, r1
 800678c:	3501      	adds	r5, #1
 800678e:	4628      	mov	r0, r5
 8006790:	f7f9 fec8 	bl	8000524 <__aeabi_i2d>
 8006794:	4652      	mov	r2, sl
 8006796:	465b      	mov	r3, fp
 8006798:	f7f9 ff2e 	bl	80005f8 <__aeabi_dmul>
 800679c:	4b82      	ldr	r3, [pc, #520]	; (80069a8 <_dtoa_r+0x628>)
 800679e:	2200      	movs	r2, #0
 80067a0:	f7f9 fd74 	bl	800028c <__adddf3>
 80067a4:	46d0      	mov	r8, sl
 80067a6:	46d9      	mov	r9, fp
 80067a8:	4682      	mov	sl, r0
 80067aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80067ae:	2e00      	cmp	r6, #0
 80067b0:	d158      	bne.n	8006864 <_dtoa_r+0x4e4>
 80067b2:	4b7e      	ldr	r3, [pc, #504]	; (80069ac <_dtoa_r+0x62c>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	4640      	mov	r0, r8
 80067b8:	4649      	mov	r1, r9
 80067ba:	f7f9 fd65 	bl	8000288 <__aeabi_dsub>
 80067be:	4652      	mov	r2, sl
 80067c0:	465b      	mov	r3, fp
 80067c2:	4680      	mov	r8, r0
 80067c4:	4689      	mov	r9, r1
 80067c6:	f7fa f9a7 	bl	8000b18 <__aeabi_dcmpgt>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	f040 8295 	bne.w	8006cfa <_dtoa_r+0x97a>
 80067d0:	4652      	mov	r2, sl
 80067d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80067d6:	4640      	mov	r0, r8
 80067d8:	4649      	mov	r1, r9
 80067da:	f7fa f97f 	bl	8000adc <__aeabi_dcmplt>
 80067de:	2800      	cmp	r0, #0
 80067e0:	f040 8289 	bne.w	8006cf6 <_dtoa_r+0x976>
 80067e4:	ec5b ab19 	vmov	sl, fp, d9
 80067e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f2c0 8148 	blt.w	8006a80 <_dtoa_r+0x700>
 80067f0:	9a00      	ldr	r2, [sp, #0]
 80067f2:	2a0e      	cmp	r2, #14
 80067f4:	f300 8144 	bgt.w	8006a80 <_dtoa_r+0x700>
 80067f8:	4b67      	ldr	r3, [pc, #412]	; (8006998 <_dtoa_r+0x618>)
 80067fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006804:	2b00      	cmp	r3, #0
 8006806:	f280 80d5 	bge.w	80069b4 <_dtoa_r+0x634>
 800680a:	9b03      	ldr	r3, [sp, #12]
 800680c:	2b00      	cmp	r3, #0
 800680e:	f300 80d1 	bgt.w	80069b4 <_dtoa_r+0x634>
 8006812:	f040 826f 	bne.w	8006cf4 <_dtoa_r+0x974>
 8006816:	4b65      	ldr	r3, [pc, #404]	; (80069ac <_dtoa_r+0x62c>)
 8006818:	2200      	movs	r2, #0
 800681a:	4640      	mov	r0, r8
 800681c:	4649      	mov	r1, r9
 800681e:	f7f9 feeb 	bl	80005f8 <__aeabi_dmul>
 8006822:	4652      	mov	r2, sl
 8006824:	465b      	mov	r3, fp
 8006826:	f7fa f96d 	bl	8000b04 <__aeabi_dcmpge>
 800682a:	9e03      	ldr	r6, [sp, #12]
 800682c:	4637      	mov	r7, r6
 800682e:	2800      	cmp	r0, #0
 8006830:	f040 8245 	bne.w	8006cbe <_dtoa_r+0x93e>
 8006834:	9d01      	ldr	r5, [sp, #4]
 8006836:	2331      	movs	r3, #49	; 0x31
 8006838:	f805 3b01 	strb.w	r3, [r5], #1
 800683c:	9b00      	ldr	r3, [sp, #0]
 800683e:	3301      	adds	r3, #1
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	e240      	b.n	8006cc6 <_dtoa_r+0x946>
 8006844:	07f2      	lsls	r2, r6, #31
 8006846:	d505      	bpl.n	8006854 <_dtoa_r+0x4d4>
 8006848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800684c:	f7f9 fed4 	bl	80005f8 <__aeabi_dmul>
 8006850:	3501      	adds	r5, #1
 8006852:	2301      	movs	r3, #1
 8006854:	1076      	asrs	r6, r6, #1
 8006856:	3708      	adds	r7, #8
 8006858:	e777      	b.n	800674a <_dtoa_r+0x3ca>
 800685a:	2502      	movs	r5, #2
 800685c:	e779      	b.n	8006752 <_dtoa_r+0x3d2>
 800685e:	9f00      	ldr	r7, [sp, #0]
 8006860:	9e03      	ldr	r6, [sp, #12]
 8006862:	e794      	b.n	800678e <_dtoa_r+0x40e>
 8006864:	9901      	ldr	r1, [sp, #4]
 8006866:	4b4c      	ldr	r3, [pc, #304]	; (8006998 <_dtoa_r+0x618>)
 8006868:	4431      	add	r1, r6
 800686a:	910d      	str	r1, [sp, #52]	; 0x34
 800686c:	9908      	ldr	r1, [sp, #32]
 800686e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006872:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006876:	2900      	cmp	r1, #0
 8006878:	d043      	beq.n	8006902 <_dtoa_r+0x582>
 800687a:	494d      	ldr	r1, [pc, #308]	; (80069b0 <_dtoa_r+0x630>)
 800687c:	2000      	movs	r0, #0
 800687e:	f7f9 ffe5 	bl	800084c <__aeabi_ddiv>
 8006882:	4652      	mov	r2, sl
 8006884:	465b      	mov	r3, fp
 8006886:	f7f9 fcff 	bl	8000288 <__aeabi_dsub>
 800688a:	9d01      	ldr	r5, [sp, #4]
 800688c:	4682      	mov	sl, r0
 800688e:	468b      	mov	fp, r1
 8006890:	4649      	mov	r1, r9
 8006892:	4640      	mov	r0, r8
 8006894:	f7fa f960 	bl	8000b58 <__aeabi_d2iz>
 8006898:	4606      	mov	r6, r0
 800689a:	f7f9 fe43 	bl	8000524 <__aeabi_i2d>
 800689e:	4602      	mov	r2, r0
 80068a0:	460b      	mov	r3, r1
 80068a2:	4640      	mov	r0, r8
 80068a4:	4649      	mov	r1, r9
 80068a6:	f7f9 fcef 	bl	8000288 <__aeabi_dsub>
 80068aa:	3630      	adds	r6, #48	; 0x30
 80068ac:	f805 6b01 	strb.w	r6, [r5], #1
 80068b0:	4652      	mov	r2, sl
 80068b2:	465b      	mov	r3, fp
 80068b4:	4680      	mov	r8, r0
 80068b6:	4689      	mov	r9, r1
 80068b8:	f7fa f910 	bl	8000adc <__aeabi_dcmplt>
 80068bc:	2800      	cmp	r0, #0
 80068be:	d163      	bne.n	8006988 <_dtoa_r+0x608>
 80068c0:	4642      	mov	r2, r8
 80068c2:	464b      	mov	r3, r9
 80068c4:	4936      	ldr	r1, [pc, #216]	; (80069a0 <_dtoa_r+0x620>)
 80068c6:	2000      	movs	r0, #0
 80068c8:	f7f9 fcde 	bl	8000288 <__aeabi_dsub>
 80068cc:	4652      	mov	r2, sl
 80068ce:	465b      	mov	r3, fp
 80068d0:	f7fa f904 	bl	8000adc <__aeabi_dcmplt>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	f040 80b5 	bne.w	8006a44 <_dtoa_r+0x6c4>
 80068da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068dc:	429d      	cmp	r5, r3
 80068de:	d081      	beq.n	80067e4 <_dtoa_r+0x464>
 80068e0:	4b30      	ldr	r3, [pc, #192]	; (80069a4 <_dtoa_r+0x624>)
 80068e2:	2200      	movs	r2, #0
 80068e4:	4650      	mov	r0, sl
 80068e6:	4659      	mov	r1, fp
 80068e8:	f7f9 fe86 	bl	80005f8 <__aeabi_dmul>
 80068ec:	4b2d      	ldr	r3, [pc, #180]	; (80069a4 <_dtoa_r+0x624>)
 80068ee:	4682      	mov	sl, r0
 80068f0:	468b      	mov	fp, r1
 80068f2:	4640      	mov	r0, r8
 80068f4:	4649      	mov	r1, r9
 80068f6:	2200      	movs	r2, #0
 80068f8:	f7f9 fe7e 	bl	80005f8 <__aeabi_dmul>
 80068fc:	4680      	mov	r8, r0
 80068fe:	4689      	mov	r9, r1
 8006900:	e7c6      	b.n	8006890 <_dtoa_r+0x510>
 8006902:	4650      	mov	r0, sl
 8006904:	4659      	mov	r1, fp
 8006906:	f7f9 fe77 	bl	80005f8 <__aeabi_dmul>
 800690a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800690c:	9d01      	ldr	r5, [sp, #4]
 800690e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006910:	4682      	mov	sl, r0
 8006912:	468b      	mov	fp, r1
 8006914:	4649      	mov	r1, r9
 8006916:	4640      	mov	r0, r8
 8006918:	f7fa f91e 	bl	8000b58 <__aeabi_d2iz>
 800691c:	4606      	mov	r6, r0
 800691e:	f7f9 fe01 	bl	8000524 <__aeabi_i2d>
 8006922:	3630      	adds	r6, #48	; 0x30
 8006924:	4602      	mov	r2, r0
 8006926:	460b      	mov	r3, r1
 8006928:	4640      	mov	r0, r8
 800692a:	4649      	mov	r1, r9
 800692c:	f7f9 fcac 	bl	8000288 <__aeabi_dsub>
 8006930:	f805 6b01 	strb.w	r6, [r5], #1
 8006934:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006936:	429d      	cmp	r5, r3
 8006938:	4680      	mov	r8, r0
 800693a:	4689      	mov	r9, r1
 800693c:	f04f 0200 	mov.w	r2, #0
 8006940:	d124      	bne.n	800698c <_dtoa_r+0x60c>
 8006942:	4b1b      	ldr	r3, [pc, #108]	; (80069b0 <_dtoa_r+0x630>)
 8006944:	4650      	mov	r0, sl
 8006946:	4659      	mov	r1, fp
 8006948:	f7f9 fca0 	bl	800028c <__adddf3>
 800694c:	4602      	mov	r2, r0
 800694e:	460b      	mov	r3, r1
 8006950:	4640      	mov	r0, r8
 8006952:	4649      	mov	r1, r9
 8006954:	f7fa f8e0 	bl	8000b18 <__aeabi_dcmpgt>
 8006958:	2800      	cmp	r0, #0
 800695a:	d173      	bne.n	8006a44 <_dtoa_r+0x6c4>
 800695c:	4652      	mov	r2, sl
 800695e:	465b      	mov	r3, fp
 8006960:	4913      	ldr	r1, [pc, #76]	; (80069b0 <_dtoa_r+0x630>)
 8006962:	2000      	movs	r0, #0
 8006964:	f7f9 fc90 	bl	8000288 <__aeabi_dsub>
 8006968:	4602      	mov	r2, r0
 800696a:	460b      	mov	r3, r1
 800696c:	4640      	mov	r0, r8
 800696e:	4649      	mov	r1, r9
 8006970:	f7fa f8b4 	bl	8000adc <__aeabi_dcmplt>
 8006974:	2800      	cmp	r0, #0
 8006976:	f43f af35 	beq.w	80067e4 <_dtoa_r+0x464>
 800697a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800697c:	1e6b      	subs	r3, r5, #1
 800697e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006980:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006984:	2b30      	cmp	r3, #48	; 0x30
 8006986:	d0f8      	beq.n	800697a <_dtoa_r+0x5fa>
 8006988:	9700      	str	r7, [sp, #0]
 800698a:	e049      	b.n	8006a20 <_dtoa_r+0x6a0>
 800698c:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <_dtoa_r+0x624>)
 800698e:	f7f9 fe33 	bl	80005f8 <__aeabi_dmul>
 8006992:	4680      	mov	r8, r0
 8006994:	4689      	mov	r9, r1
 8006996:	e7bd      	b.n	8006914 <_dtoa_r+0x594>
 8006998:	08009b98 	.word	0x08009b98
 800699c:	08009b70 	.word	0x08009b70
 80069a0:	3ff00000 	.word	0x3ff00000
 80069a4:	40240000 	.word	0x40240000
 80069a8:	401c0000 	.word	0x401c0000
 80069ac:	40140000 	.word	0x40140000
 80069b0:	3fe00000 	.word	0x3fe00000
 80069b4:	9d01      	ldr	r5, [sp, #4]
 80069b6:	4656      	mov	r6, sl
 80069b8:	465f      	mov	r7, fp
 80069ba:	4642      	mov	r2, r8
 80069bc:	464b      	mov	r3, r9
 80069be:	4630      	mov	r0, r6
 80069c0:	4639      	mov	r1, r7
 80069c2:	f7f9 ff43 	bl	800084c <__aeabi_ddiv>
 80069c6:	f7fa f8c7 	bl	8000b58 <__aeabi_d2iz>
 80069ca:	4682      	mov	sl, r0
 80069cc:	f7f9 fdaa 	bl	8000524 <__aeabi_i2d>
 80069d0:	4642      	mov	r2, r8
 80069d2:	464b      	mov	r3, r9
 80069d4:	f7f9 fe10 	bl	80005f8 <__aeabi_dmul>
 80069d8:	4602      	mov	r2, r0
 80069da:	460b      	mov	r3, r1
 80069dc:	4630      	mov	r0, r6
 80069de:	4639      	mov	r1, r7
 80069e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80069e4:	f7f9 fc50 	bl	8000288 <__aeabi_dsub>
 80069e8:	f805 6b01 	strb.w	r6, [r5], #1
 80069ec:	9e01      	ldr	r6, [sp, #4]
 80069ee:	9f03      	ldr	r7, [sp, #12]
 80069f0:	1bae      	subs	r6, r5, r6
 80069f2:	42b7      	cmp	r7, r6
 80069f4:	4602      	mov	r2, r0
 80069f6:	460b      	mov	r3, r1
 80069f8:	d135      	bne.n	8006a66 <_dtoa_r+0x6e6>
 80069fa:	f7f9 fc47 	bl	800028c <__adddf3>
 80069fe:	4642      	mov	r2, r8
 8006a00:	464b      	mov	r3, r9
 8006a02:	4606      	mov	r6, r0
 8006a04:	460f      	mov	r7, r1
 8006a06:	f7fa f887 	bl	8000b18 <__aeabi_dcmpgt>
 8006a0a:	b9d0      	cbnz	r0, 8006a42 <_dtoa_r+0x6c2>
 8006a0c:	4642      	mov	r2, r8
 8006a0e:	464b      	mov	r3, r9
 8006a10:	4630      	mov	r0, r6
 8006a12:	4639      	mov	r1, r7
 8006a14:	f7fa f858 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a18:	b110      	cbz	r0, 8006a20 <_dtoa_r+0x6a0>
 8006a1a:	f01a 0f01 	tst.w	sl, #1
 8006a1e:	d110      	bne.n	8006a42 <_dtoa_r+0x6c2>
 8006a20:	4620      	mov	r0, r4
 8006a22:	ee18 1a10 	vmov	r1, s16
 8006a26:	f000 fae9 	bl	8006ffc <_Bfree>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	9800      	ldr	r0, [sp, #0]
 8006a2e:	702b      	strb	r3, [r5, #0]
 8006a30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a32:	3001      	adds	r0, #1
 8006a34:	6018      	str	r0, [r3, #0]
 8006a36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f43f acf1 	beq.w	8006420 <_dtoa_r+0xa0>
 8006a3e:	601d      	str	r5, [r3, #0]
 8006a40:	e4ee      	b.n	8006420 <_dtoa_r+0xa0>
 8006a42:	9f00      	ldr	r7, [sp, #0]
 8006a44:	462b      	mov	r3, r5
 8006a46:	461d      	mov	r5, r3
 8006a48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a4c:	2a39      	cmp	r2, #57	; 0x39
 8006a4e:	d106      	bne.n	8006a5e <_dtoa_r+0x6de>
 8006a50:	9a01      	ldr	r2, [sp, #4]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d1f7      	bne.n	8006a46 <_dtoa_r+0x6c6>
 8006a56:	9901      	ldr	r1, [sp, #4]
 8006a58:	2230      	movs	r2, #48	; 0x30
 8006a5a:	3701      	adds	r7, #1
 8006a5c:	700a      	strb	r2, [r1, #0]
 8006a5e:	781a      	ldrb	r2, [r3, #0]
 8006a60:	3201      	adds	r2, #1
 8006a62:	701a      	strb	r2, [r3, #0]
 8006a64:	e790      	b.n	8006988 <_dtoa_r+0x608>
 8006a66:	4ba6      	ldr	r3, [pc, #664]	; (8006d00 <_dtoa_r+0x980>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f7f9 fdc5 	bl	80005f8 <__aeabi_dmul>
 8006a6e:	2200      	movs	r2, #0
 8006a70:	2300      	movs	r3, #0
 8006a72:	4606      	mov	r6, r0
 8006a74:	460f      	mov	r7, r1
 8006a76:	f7fa f827 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	d09d      	beq.n	80069ba <_dtoa_r+0x63a>
 8006a7e:	e7cf      	b.n	8006a20 <_dtoa_r+0x6a0>
 8006a80:	9a08      	ldr	r2, [sp, #32]
 8006a82:	2a00      	cmp	r2, #0
 8006a84:	f000 80d7 	beq.w	8006c36 <_dtoa_r+0x8b6>
 8006a88:	9a06      	ldr	r2, [sp, #24]
 8006a8a:	2a01      	cmp	r2, #1
 8006a8c:	f300 80ba 	bgt.w	8006c04 <_dtoa_r+0x884>
 8006a90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a92:	2a00      	cmp	r2, #0
 8006a94:	f000 80b2 	beq.w	8006bfc <_dtoa_r+0x87c>
 8006a98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a9c:	9e07      	ldr	r6, [sp, #28]
 8006a9e:	9d04      	ldr	r5, [sp, #16]
 8006aa0:	9a04      	ldr	r2, [sp, #16]
 8006aa2:	441a      	add	r2, r3
 8006aa4:	9204      	str	r2, [sp, #16]
 8006aa6:	9a05      	ldr	r2, [sp, #20]
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	441a      	add	r2, r3
 8006aac:	4620      	mov	r0, r4
 8006aae:	9205      	str	r2, [sp, #20]
 8006ab0:	f000 fb5c 	bl	800716c <__i2b>
 8006ab4:	4607      	mov	r7, r0
 8006ab6:	2d00      	cmp	r5, #0
 8006ab8:	dd0c      	ble.n	8006ad4 <_dtoa_r+0x754>
 8006aba:	9b05      	ldr	r3, [sp, #20]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	dd09      	ble.n	8006ad4 <_dtoa_r+0x754>
 8006ac0:	42ab      	cmp	r3, r5
 8006ac2:	9a04      	ldr	r2, [sp, #16]
 8006ac4:	bfa8      	it	ge
 8006ac6:	462b      	movge	r3, r5
 8006ac8:	1ad2      	subs	r2, r2, r3
 8006aca:	9204      	str	r2, [sp, #16]
 8006acc:	9a05      	ldr	r2, [sp, #20]
 8006ace:	1aed      	subs	r5, r5, r3
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	9305      	str	r3, [sp, #20]
 8006ad4:	9b07      	ldr	r3, [sp, #28]
 8006ad6:	b31b      	cbz	r3, 8006b20 <_dtoa_r+0x7a0>
 8006ad8:	9b08      	ldr	r3, [sp, #32]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 80af 	beq.w	8006c3e <_dtoa_r+0x8be>
 8006ae0:	2e00      	cmp	r6, #0
 8006ae2:	dd13      	ble.n	8006b0c <_dtoa_r+0x78c>
 8006ae4:	4639      	mov	r1, r7
 8006ae6:	4632      	mov	r2, r6
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f000 fbff 	bl	80072ec <__pow5mult>
 8006aee:	ee18 2a10 	vmov	r2, s16
 8006af2:	4601      	mov	r1, r0
 8006af4:	4607      	mov	r7, r0
 8006af6:	4620      	mov	r0, r4
 8006af8:	f000 fb4e 	bl	8007198 <__multiply>
 8006afc:	ee18 1a10 	vmov	r1, s16
 8006b00:	4680      	mov	r8, r0
 8006b02:	4620      	mov	r0, r4
 8006b04:	f000 fa7a 	bl	8006ffc <_Bfree>
 8006b08:	ee08 8a10 	vmov	s16, r8
 8006b0c:	9b07      	ldr	r3, [sp, #28]
 8006b0e:	1b9a      	subs	r2, r3, r6
 8006b10:	d006      	beq.n	8006b20 <_dtoa_r+0x7a0>
 8006b12:	ee18 1a10 	vmov	r1, s16
 8006b16:	4620      	mov	r0, r4
 8006b18:	f000 fbe8 	bl	80072ec <__pow5mult>
 8006b1c:	ee08 0a10 	vmov	s16, r0
 8006b20:	2101      	movs	r1, #1
 8006b22:	4620      	mov	r0, r4
 8006b24:	f000 fb22 	bl	800716c <__i2b>
 8006b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	4606      	mov	r6, r0
 8006b2e:	f340 8088 	ble.w	8006c42 <_dtoa_r+0x8c2>
 8006b32:	461a      	mov	r2, r3
 8006b34:	4601      	mov	r1, r0
 8006b36:	4620      	mov	r0, r4
 8006b38:	f000 fbd8 	bl	80072ec <__pow5mult>
 8006b3c:	9b06      	ldr	r3, [sp, #24]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	4606      	mov	r6, r0
 8006b42:	f340 8081 	ble.w	8006c48 <_dtoa_r+0x8c8>
 8006b46:	f04f 0800 	mov.w	r8, #0
 8006b4a:	6933      	ldr	r3, [r6, #16]
 8006b4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006b50:	6918      	ldr	r0, [r3, #16]
 8006b52:	f000 fabb 	bl	80070cc <__hi0bits>
 8006b56:	f1c0 0020 	rsb	r0, r0, #32
 8006b5a:	9b05      	ldr	r3, [sp, #20]
 8006b5c:	4418      	add	r0, r3
 8006b5e:	f010 001f 	ands.w	r0, r0, #31
 8006b62:	f000 8092 	beq.w	8006c8a <_dtoa_r+0x90a>
 8006b66:	f1c0 0320 	rsb	r3, r0, #32
 8006b6a:	2b04      	cmp	r3, #4
 8006b6c:	f340 808a 	ble.w	8006c84 <_dtoa_r+0x904>
 8006b70:	f1c0 001c 	rsb	r0, r0, #28
 8006b74:	9b04      	ldr	r3, [sp, #16]
 8006b76:	4403      	add	r3, r0
 8006b78:	9304      	str	r3, [sp, #16]
 8006b7a:	9b05      	ldr	r3, [sp, #20]
 8006b7c:	4403      	add	r3, r0
 8006b7e:	4405      	add	r5, r0
 8006b80:	9305      	str	r3, [sp, #20]
 8006b82:	9b04      	ldr	r3, [sp, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	dd07      	ble.n	8006b98 <_dtoa_r+0x818>
 8006b88:	ee18 1a10 	vmov	r1, s16
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	4620      	mov	r0, r4
 8006b90:	f000 fc06 	bl	80073a0 <__lshift>
 8006b94:	ee08 0a10 	vmov	s16, r0
 8006b98:	9b05      	ldr	r3, [sp, #20]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	dd05      	ble.n	8006baa <_dtoa_r+0x82a>
 8006b9e:	4631      	mov	r1, r6
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f000 fbfc 	bl	80073a0 <__lshift>
 8006ba8:	4606      	mov	r6, r0
 8006baa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d06e      	beq.n	8006c8e <_dtoa_r+0x90e>
 8006bb0:	ee18 0a10 	vmov	r0, s16
 8006bb4:	4631      	mov	r1, r6
 8006bb6:	f000 fc63 	bl	8007480 <__mcmp>
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	da67      	bge.n	8006c8e <_dtoa_r+0x90e>
 8006bbe:	9b00      	ldr	r3, [sp, #0]
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	ee18 1a10 	vmov	r1, s16
 8006bc6:	9300      	str	r3, [sp, #0]
 8006bc8:	220a      	movs	r2, #10
 8006bca:	2300      	movs	r3, #0
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f000 fa37 	bl	8007040 <__multadd>
 8006bd2:	9b08      	ldr	r3, [sp, #32]
 8006bd4:	ee08 0a10 	vmov	s16, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f000 81b1 	beq.w	8006f40 <_dtoa_r+0xbc0>
 8006bde:	2300      	movs	r3, #0
 8006be0:	4639      	mov	r1, r7
 8006be2:	220a      	movs	r2, #10
 8006be4:	4620      	mov	r0, r4
 8006be6:	f000 fa2b 	bl	8007040 <__multadd>
 8006bea:	9b02      	ldr	r3, [sp, #8]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	4607      	mov	r7, r0
 8006bf0:	f300 808e 	bgt.w	8006d10 <_dtoa_r+0x990>
 8006bf4:	9b06      	ldr	r3, [sp, #24]
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	dc51      	bgt.n	8006c9e <_dtoa_r+0x91e>
 8006bfa:	e089      	b.n	8006d10 <_dtoa_r+0x990>
 8006bfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c02:	e74b      	b.n	8006a9c <_dtoa_r+0x71c>
 8006c04:	9b03      	ldr	r3, [sp, #12]
 8006c06:	1e5e      	subs	r6, r3, #1
 8006c08:	9b07      	ldr	r3, [sp, #28]
 8006c0a:	42b3      	cmp	r3, r6
 8006c0c:	bfbf      	itttt	lt
 8006c0e:	9b07      	ldrlt	r3, [sp, #28]
 8006c10:	9607      	strlt	r6, [sp, #28]
 8006c12:	1af2      	sublt	r2, r6, r3
 8006c14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006c16:	bfb6      	itet	lt
 8006c18:	189b      	addlt	r3, r3, r2
 8006c1a:	1b9e      	subge	r6, r3, r6
 8006c1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006c1e:	9b03      	ldr	r3, [sp, #12]
 8006c20:	bfb8      	it	lt
 8006c22:	2600      	movlt	r6, #0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	bfb7      	itett	lt
 8006c28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006c2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006c30:	1a9d      	sublt	r5, r3, r2
 8006c32:	2300      	movlt	r3, #0
 8006c34:	e734      	b.n	8006aa0 <_dtoa_r+0x720>
 8006c36:	9e07      	ldr	r6, [sp, #28]
 8006c38:	9d04      	ldr	r5, [sp, #16]
 8006c3a:	9f08      	ldr	r7, [sp, #32]
 8006c3c:	e73b      	b.n	8006ab6 <_dtoa_r+0x736>
 8006c3e:	9a07      	ldr	r2, [sp, #28]
 8006c40:	e767      	b.n	8006b12 <_dtoa_r+0x792>
 8006c42:	9b06      	ldr	r3, [sp, #24]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	dc18      	bgt.n	8006c7a <_dtoa_r+0x8fa>
 8006c48:	f1ba 0f00 	cmp.w	sl, #0
 8006c4c:	d115      	bne.n	8006c7a <_dtoa_r+0x8fa>
 8006c4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c52:	b993      	cbnz	r3, 8006c7a <_dtoa_r+0x8fa>
 8006c54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c58:	0d1b      	lsrs	r3, r3, #20
 8006c5a:	051b      	lsls	r3, r3, #20
 8006c5c:	b183      	cbz	r3, 8006c80 <_dtoa_r+0x900>
 8006c5e:	9b04      	ldr	r3, [sp, #16]
 8006c60:	3301      	adds	r3, #1
 8006c62:	9304      	str	r3, [sp, #16]
 8006c64:	9b05      	ldr	r3, [sp, #20]
 8006c66:	3301      	adds	r3, #1
 8006c68:	9305      	str	r3, [sp, #20]
 8006c6a:	f04f 0801 	mov.w	r8, #1
 8006c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f47f af6a 	bne.w	8006b4a <_dtoa_r+0x7ca>
 8006c76:	2001      	movs	r0, #1
 8006c78:	e76f      	b.n	8006b5a <_dtoa_r+0x7da>
 8006c7a:	f04f 0800 	mov.w	r8, #0
 8006c7e:	e7f6      	b.n	8006c6e <_dtoa_r+0x8ee>
 8006c80:	4698      	mov	r8, r3
 8006c82:	e7f4      	b.n	8006c6e <_dtoa_r+0x8ee>
 8006c84:	f43f af7d 	beq.w	8006b82 <_dtoa_r+0x802>
 8006c88:	4618      	mov	r0, r3
 8006c8a:	301c      	adds	r0, #28
 8006c8c:	e772      	b.n	8006b74 <_dtoa_r+0x7f4>
 8006c8e:	9b03      	ldr	r3, [sp, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	dc37      	bgt.n	8006d04 <_dtoa_r+0x984>
 8006c94:	9b06      	ldr	r3, [sp, #24]
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	dd34      	ble.n	8006d04 <_dtoa_r+0x984>
 8006c9a:	9b03      	ldr	r3, [sp, #12]
 8006c9c:	9302      	str	r3, [sp, #8]
 8006c9e:	9b02      	ldr	r3, [sp, #8]
 8006ca0:	b96b      	cbnz	r3, 8006cbe <_dtoa_r+0x93e>
 8006ca2:	4631      	mov	r1, r6
 8006ca4:	2205      	movs	r2, #5
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f000 f9ca 	bl	8007040 <__multadd>
 8006cac:	4601      	mov	r1, r0
 8006cae:	4606      	mov	r6, r0
 8006cb0:	ee18 0a10 	vmov	r0, s16
 8006cb4:	f000 fbe4 	bl	8007480 <__mcmp>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	f73f adbb 	bgt.w	8006834 <_dtoa_r+0x4b4>
 8006cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cc0:	9d01      	ldr	r5, [sp, #4]
 8006cc2:	43db      	mvns	r3, r3
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	f04f 0800 	mov.w	r8, #0
 8006cca:	4631      	mov	r1, r6
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f000 f995 	bl	8006ffc <_Bfree>
 8006cd2:	2f00      	cmp	r7, #0
 8006cd4:	f43f aea4 	beq.w	8006a20 <_dtoa_r+0x6a0>
 8006cd8:	f1b8 0f00 	cmp.w	r8, #0
 8006cdc:	d005      	beq.n	8006cea <_dtoa_r+0x96a>
 8006cde:	45b8      	cmp	r8, r7
 8006ce0:	d003      	beq.n	8006cea <_dtoa_r+0x96a>
 8006ce2:	4641      	mov	r1, r8
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	f000 f989 	bl	8006ffc <_Bfree>
 8006cea:	4639      	mov	r1, r7
 8006cec:	4620      	mov	r0, r4
 8006cee:	f000 f985 	bl	8006ffc <_Bfree>
 8006cf2:	e695      	b.n	8006a20 <_dtoa_r+0x6a0>
 8006cf4:	2600      	movs	r6, #0
 8006cf6:	4637      	mov	r7, r6
 8006cf8:	e7e1      	b.n	8006cbe <_dtoa_r+0x93e>
 8006cfa:	9700      	str	r7, [sp, #0]
 8006cfc:	4637      	mov	r7, r6
 8006cfe:	e599      	b.n	8006834 <_dtoa_r+0x4b4>
 8006d00:	40240000 	.word	0x40240000
 8006d04:	9b08      	ldr	r3, [sp, #32]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f000 80ca 	beq.w	8006ea0 <_dtoa_r+0xb20>
 8006d0c:	9b03      	ldr	r3, [sp, #12]
 8006d0e:	9302      	str	r3, [sp, #8]
 8006d10:	2d00      	cmp	r5, #0
 8006d12:	dd05      	ble.n	8006d20 <_dtoa_r+0x9a0>
 8006d14:	4639      	mov	r1, r7
 8006d16:	462a      	mov	r2, r5
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f000 fb41 	bl	80073a0 <__lshift>
 8006d1e:	4607      	mov	r7, r0
 8006d20:	f1b8 0f00 	cmp.w	r8, #0
 8006d24:	d05b      	beq.n	8006dde <_dtoa_r+0xa5e>
 8006d26:	6879      	ldr	r1, [r7, #4]
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f000 f927 	bl	8006f7c <_Balloc>
 8006d2e:	4605      	mov	r5, r0
 8006d30:	b928      	cbnz	r0, 8006d3e <_dtoa_r+0x9be>
 8006d32:	4b87      	ldr	r3, [pc, #540]	; (8006f50 <_dtoa_r+0xbd0>)
 8006d34:	4602      	mov	r2, r0
 8006d36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006d3a:	f7ff bb3b 	b.w	80063b4 <_dtoa_r+0x34>
 8006d3e:	693a      	ldr	r2, [r7, #16]
 8006d40:	3202      	adds	r2, #2
 8006d42:	0092      	lsls	r2, r2, #2
 8006d44:	f107 010c 	add.w	r1, r7, #12
 8006d48:	300c      	adds	r0, #12
 8006d4a:	f7fe fc2d 	bl	80055a8 <memcpy>
 8006d4e:	2201      	movs	r2, #1
 8006d50:	4629      	mov	r1, r5
 8006d52:	4620      	mov	r0, r4
 8006d54:	f000 fb24 	bl	80073a0 <__lshift>
 8006d58:	9b01      	ldr	r3, [sp, #4]
 8006d5a:	f103 0901 	add.w	r9, r3, #1
 8006d5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006d62:	4413      	add	r3, r2
 8006d64:	9305      	str	r3, [sp, #20]
 8006d66:	f00a 0301 	and.w	r3, sl, #1
 8006d6a:	46b8      	mov	r8, r7
 8006d6c:	9304      	str	r3, [sp, #16]
 8006d6e:	4607      	mov	r7, r0
 8006d70:	4631      	mov	r1, r6
 8006d72:	ee18 0a10 	vmov	r0, s16
 8006d76:	f7ff fa77 	bl	8006268 <quorem>
 8006d7a:	4641      	mov	r1, r8
 8006d7c:	9002      	str	r0, [sp, #8]
 8006d7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006d82:	ee18 0a10 	vmov	r0, s16
 8006d86:	f000 fb7b 	bl	8007480 <__mcmp>
 8006d8a:	463a      	mov	r2, r7
 8006d8c:	9003      	str	r0, [sp, #12]
 8006d8e:	4631      	mov	r1, r6
 8006d90:	4620      	mov	r0, r4
 8006d92:	f000 fb91 	bl	80074b8 <__mdiff>
 8006d96:	68c2      	ldr	r2, [r0, #12]
 8006d98:	f109 3bff 	add.w	fp, r9, #4294967295
 8006d9c:	4605      	mov	r5, r0
 8006d9e:	bb02      	cbnz	r2, 8006de2 <_dtoa_r+0xa62>
 8006da0:	4601      	mov	r1, r0
 8006da2:	ee18 0a10 	vmov	r0, s16
 8006da6:	f000 fb6b 	bl	8007480 <__mcmp>
 8006daa:	4602      	mov	r2, r0
 8006dac:	4629      	mov	r1, r5
 8006dae:	4620      	mov	r0, r4
 8006db0:	9207      	str	r2, [sp, #28]
 8006db2:	f000 f923 	bl	8006ffc <_Bfree>
 8006db6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006dba:	ea43 0102 	orr.w	r1, r3, r2
 8006dbe:	9b04      	ldr	r3, [sp, #16]
 8006dc0:	430b      	orrs	r3, r1
 8006dc2:	464d      	mov	r5, r9
 8006dc4:	d10f      	bne.n	8006de6 <_dtoa_r+0xa66>
 8006dc6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006dca:	d02a      	beq.n	8006e22 <_dtoa_r+0xaa2>
 8006dcc:	9b03      	ldr	r3, [sp, #12]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	dd02      	ble.n	8006dd8 <_dtoa_r+0xa58>
 8006dd2:	9b02      	ldr	r3, [sp, #8]
 8006dd4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006dd8:	f88b a000 	strb.w	sl, [fp]
 8006ddc:	e775      	b.n	8006cca <_dtoa_r+0x94a>
 8006dde:	4638      	mov	r0, r7
 8006de0:	e7ba      	b.n	8006d58 <_dtoa_r+0x9d8>
 8006de2:	2201      	movs	r2, #1
 8006de4:	e7e2      	b.n	8006dac <_dtoa_r+0xa2c>
 8006de6:	9b03      	ldr	r3, [sp, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	db04      	blt.n	8006df6 <_dtoa_r+0xa76>
 8006dec:	9906      	ldr	r1, [sp, #24]
 8006dee:	430b      	orrs	r3, r1
 8006df0:	9904      	ldr	r1, [sp, #16]
 8006df2:	430b      	orrs	r3, r1
 8006df4:	d122      	bne.n	8006e3c <_dtoa_r+0xabc>
 8006df6:	2a00      	cmp	r2, #0
 8006df8:	ddee      	ble.n	8006dd8 <_dtoa_r+0xa58>
 8006dfa:	ee18 1a10 	vmov	r1, s16
 8006dfe:	2201      	movs	r2, #1
 8006e00:	4620      	mov	r0, r4
 8006e02:	f000 facd 	bl	80073a0 <__lshift>
 8006e06:	4631      	mov	r1, r6
 8006e08:	ee08 0a10 	vmov	s16, r0
 8006e0c:	f000 fb38 	bl	8007480 <__mcmp>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	dc03      	bgt.n	8006e1c <_dtoa_r+0xa9c>
 8006e14:	d1e0      	bne.n	8006dd8 <_dtoa_r+0xa58>
 8006e16:	f01a 0f01 	tst.w	sl, #1
 8006e1a:	d0dd      	beq.n	8006dd8 <_dtoa_r+0xa58>
 8006e1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e20:	d1d7      	bne.n	8006dd2 <_dtoa_r+0xa52>
 8006e22:	2339      	movs	r3, #57	; 0x39
 8006e24:	f88b 3000 	strb.w	r3, [fp]
 8006e28:	462b      	mov	r3, r5
 8006e2a:	461d      	mov	r5, r3
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006e32:	2a39      	cmp	r2, #57	; 0x39
 8006e34:	d071      	beq.n	8006f1a <_dtoa_r+0xb9a>
 8006e36:	3201      	adds	r2, #1
 8006e38:	701a      	strb	r2, [r3, #0]
 8006e3a:	e746      	b.n	8006cca <_dtoa_r+0x94a>
 8006e3c:	2a00      	cmp	r2, #0
 8006e3e:	dd07      	ble.n	8006e50 <_dtoa_r+0xad0>
 8006e40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e44:	d0ed      	beq.n	8006e22 <_dtoa_r+0xaa2>
 8006e46:	f10a 0301 	add.w	r3, sl, #1
 8006e4a:	f88b 3000 	strb.w	r3, [fp]
 8006e4e:	e73c      	b.n	8006cca <_dtoa_r+0x94a>
 8006e50:	9b05      	ldr	r3, [sp, #20]
 8006e52:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006e56:	4599      	cmp	r9, r3
 8006e58:	d047      	beq.n	8006eea <_dtoa_r+0xb6a>
 8006e5a:	ee18 1a10 	vmov	r1, s16
 8006e5e:	2300      	movs	r3, #0
 8006e60:	220a      	movs	r2, #10
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 f8ec 	bl	8007040 <__multadd>
 8006e68:	45b8      	cmp	r8, r7
 8006e6a:	ee08 0a10 	vmov	s16, r0
 8006e6e:	f04f 0300 	mov.w	r3, #0
 8006e72:	f04f 020a 	mov.w	r2, #10
 8006e76:	4641      	mov	r1, r8
 8006e78:	4620      	mov	r0, r4
 8006e7a:	d106      	bne.n	8006e8a <_dtoa_r+0xb0a>
 8006e7c:	f000 f8e0 	bl	8007040 <__multadd>
 8006e80:	4680      	mov	r8, r0
 8006e82:	4607      	mov	r7, r0
 8006e84:	f109 0901 	add.w	r9, r9, #1
 8006e88:	e772      	b.n	8006d70 <_dtoa_r+0x9f0>
 8006e8a:	f000 f8d9 	bl	8007040 <__multadd>
 8006e8e:	4639      	mov	r1, r7
 8006e90:	4680      	mov	r8, r0
 8006e92:	2300      	movs	r3, #0
 8006e94:	220a      	movs	r2, #10
 8006e96:	4620      	mov	r0, r4
 8006e98:	f000 f8d2 	bl	8007040 <__multadd>
 8006e9c:	4607      	mov	r7, r0
 8006e9e:	e7f1      	b.n	8006e84 <_dtoa_r+0xb04>
 8006ea0:	9b03      	ldr	r3, [sp, #12]
 8006ea2:	9302      	str	r3, [sp, #8]
 8006ea4:	9d01      	ldr	r5, [sp, #4]
 8006ea6:	ee18 0a10 	vmov	r0, s16
 8006eaa:	4631      	mov	r1, r6
 8006eac:	f7ff f9dc 	bl	8006268 <quorem>
 8006eb0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006eb4:	9b01      	ldr	r3, [sp, #4]
 8006eb6:	f805 ab01 	strb.w	sl, [r5], #1
 8006eba:	1aea      	subs	r2, r5, r3
 8006ebc:	9b02      	ldr	r3, [sp, #8]
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	dd09      	ble.n	8006ed6 <_dtoa_r+0xb56>
 8006ec2:	ee18 1a10 	vmov	r1, s16
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	220a      	movs	r2, #10
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f000 f8b8 	bl	8007040 <__multadd>
 8006ed0:	ee08 0a10 	vmov	s16, r0
 8006ed4:	e7e7      	b.n	8006ea6 <_dtoa_r+0xb26>
 8006ed6:	9b02      	ldr	r3, [sp, #8]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	bfc8      	it	gt
 8006edc:	461d      	movgt	r5, r3
 8006ede:	9b01      	ldr	r3, [sp, #4]
 8006ee0:	bfd8      	it	le
 8006ee2:	2501      	movle	r5, #1
 8006ee4:	441d      	add	r5, r3
 8006ee6:	f04f 0800 	mov.w	r8, #0
 8006eea:	ee18 1a10 	vmov	r1, s16
 8006eee:	2201      	movs	r2, #1
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f000 fa55 	bl	80073a0 <__lshift>
 8006ef6:	4631      	mov	r1, r6
 8006ef8:	ee08 0a10 	vmov	s16, r0
 8006efc:	f000 fac0 	bl	8007480 <__mcmp>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	dc91      	bgt.n	8006e28 <_dtoa_r+0xaa8>
 8006f04:	d102      	bne.n	8006f0c <_dtoa_r+0xb8c>
 8006f06:	f01a 0f01 	tst.w	sl, #1
 8006f0a:	d18d      	bne.n	8006e28 <_dtoa_r+0xaa8>
 8006f0c:	462b      	mov	r3, r5
 8006f0e:	461d      	mov	r5, r3
 8006f10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f14:	2a30      	cmp	r2, #48	; 0x30
 8006f16:	d0fa      	beq.n	8006f0e <_dtoa_r+0xb8e>
 8006f18:	e6d7      	b.n	8006cca <_dtoa_r+0x94a>
 8006f1a:	9a01      	ldr	r2, [sp, #4]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d184      	bne.n	8006e2a <_dtoa_r+0xaaa>
 8006f20:	9b00      	ldr	r3, [sp, #0]
 8006f22:	3301      	adds	r3, #1
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	2331      	movs	r3, #49	; 0x31
 8006f28:	7013      	strb	r3, [r2, #0]
 8006f2a:	e6ce      	b.n	8006cca <_dtoa_r+0x94a>
 8006f2c:	4b09      	ldr	r3, [pc, #36]	; (8006f54 <_dtoa_r+0xbd4>)
 8006f2e:	f7ff ba95 	b.w	800645c <_dtoa_r+0xdc>
 8006f32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f47f aa6e 	bne.w	8006416 <_dtoa_r+0x96>
 8006f3a:	4b07      	ldr	r3, [pc, #28]	; (8006f58 <_dtoa_r+0xbd8>)
 8006f3c:	f7ff ba8e 	b.w	800645c <_dtoa_r+0xdc>
 8006f40:	9b02      	ldr	r3, [sp, #8]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	dcae      	bgt.n	8006ea4 <_dtoa_r+0xb24>
 8006f46:	9b06      	ldr	r3, [sp, #24]
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	f73f aea8 	bgt.w	8006c9e <_dtoa_r+0x91e>
 8006f4e:	e7a9      	b.n	8006ea4 <_dtoa_r+0xb24>
 8006f50:	08009afe 	.word	0x08009afe
 8006f54:	0800922a 	.word	0x0800922a
 8006f58:	08009a7f 	.word	0x08009a7f

08006f5c <_localeconv_r>:
 8006f5c:	4800      	ldr	r0, [pc, #0]	; (8006f60 <_localeconv_r+0x4>)
 8006f5e:	4770      	bx	lr
 8006f60:	20000174 	.word	0x20000174

08006f64 <__malloc_lock>:
 8006f64:	4801      	ldr	r0, [pc, #4]	; (8006f6c <__malloc_lock+0x8>)
 8006f66:	f000 bd1a 	b.w	800799e <__retarget_lock_acquire_recursive>
 8006f6a:	bf00      	nop
 8006f6c:	20000444 	.word	0x20000444

08006f70 <__malloc_unlock>:
 8006f70:	4801      	ldr	r0, [pc, #4]	; (8006f78 <__malloc_unlock+0x8>)
 8006f72:	f000 bd15 	b.w	80079a0 <__retarget_lock_release_recursive>
 8006f76:	bf00      	nop
 8006f78:	20000444 	.word	0x20000444

08006f7c <_Balloc>:
 8006f7c:	b570      	push	{r4, r5, r6, lr}
 8006f7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f80:	4604      	mov	r4, r0
 8006f82:	460d      	mov	r5, r1
 8006f84:	b976      	cbnz	r6, 8006fa4 <_Balloc+0x28>
 8006f86:	2010      	movs	r0, #16
 8006f88:	f7fe fafe 	bl	8005588 <malloc>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	6260      	str	r0, [r4, #36]	; 0x24
 8006f90:	b920      	cbnz	r0, 8006f9c <_Balloc+0x20>
 8006f92:	4b18      	ldr	r3, [pc, #96]	; (8006ff4 <_Balloc+0x78>)
 8006f94:	4818      	ldr	r0, [pc, #96]	; (8006ff8 <_Balloc+0x7c>)
 8006f96:	2166      	movs	r1, #102	; 0x66
 8006f98:	f000 fcd0 	bl	800793c <__assert_func>
 8006f9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fa0:	6006      	str	r6, [r0, #0]
 8006fa2:	60c6      	str	r6, [r0, #12]
 8006fa4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006fa6:	68f3      	ldr	r3, [r6, #12]
 8006fa8:	b183      	cbz	r3, 8006fcc <_Balloc+0x50>
 8006faa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006fb2:	b9b8      	cbnz	r0, 8006fe4 <_Balloc+0x68>
 8006fb4:	2101      	movs	r1, #1
 8006fb6:	fa01 f605 	lsl.w	r6, r1, r5
 8006fba:	1d72      	adds	r2, r6, #5
 8006fbc:	0092      	lsls	r2, r2, #2
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f7fe fb08 	bl	80055d4 <_calloc_r>
 8006fc4:	b160      	cbz	r0, 8006fe0 <_Balloc+0x64>
 8006fc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fca:	e00e      	b.n	8006fea <_Balloc+0x6e>
 8006fcc:	2221      	movs	r2, #33	; 0x21
 8006fce:	2104      	movs	r1, #4
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f7fe faff 	bl	80055d4 <_calloc_r>
 8006fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fd8:	60f0      	str	r0, [r6, #12]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1e4      	bne.n	8006faa <_Balloc+0x2e>
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	bd70      	pop	{r4, r5, r6, pc}
 8006fe4:	6802      	ldr	r2, [r0, #0]
 8006fe6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fea:	2300      	movs	r3, #0
 8006fec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ff0:	e7f7      	b.n	8006fe2 <_Balloc+0x66>
 8006ff2:	bf00      	nop
 8006ff4:	08009a8c 	.word	0x08009a8c
 8006ff8:	08009b0f 	.word	0x08009b0f

08006ffc <_Bfree>:
 8006ffc:	b570      	push	{r4, r5, r6, lr}
 8006ffe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007000:	4605      	mov	r5, r0
 8007002:	460c      	mov	r4, r1
 8007004:	b976      	cbnz	r6, 8007024 <_Bfree+0x28>
 8007006:	2010      	movs	r0, #16
 8007008:	f7fe fabe 	bl	8005588 <malloc>
 800700c:	4602      	mov	r2, r0
 800700e:	6268      	str	r0, [r5, #36]	; 0x24
 8007010:	b920      	cbnz	r0, 800701c <_Bfree+0x20>
 8007012:	4b09      	ldr	r3, [pc, #36]	; (8007038 <_Bfree+0x3c>)
 8007014:	4809      	ldr	r0, [pc, #36]	; (800703c <_Bfree+0x40>)
 8007016:	218a      	movs	r1, #138	; 0x8a
 8007018:	f000 fc90 	bl	800793c <__assert_func>
 800701c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007020:	6006      	str	r6, [r0, #0]
 8007022:	60c6      	str	r6, [r0, #12]
 8007024:	b13c      	cbz	r4, 8007036 <_Bfree+0x3a>
 8007026:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007028:	6862      	ldr	r2, [r4, #4]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007030:	6021      	str	r1, [r4, #0]
 8007032:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007036:	bd70      	pop	{r4, r5, r6, pc}
 8007038:	08009a8c 	.word	0x08009a8c
 800703c:	08009b0f 	.word	0x08009b0f

08007040 <__multadd>:
 8007040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007044:	690d      	ldr	r5, [r1, #16]
 8007046:	4607      	mov	r7, r0
 8007048:	460c      	mov	r4, r1
 800704a:	461e      	mov	r6, r3
 800704c:	f101 0c14 	add.w	ip, r1, #20
 8007050:	2000      	movs	r0, #0
 8007052:	f8dc 3000 	ldr.w	r3, [ip]
 8007056:	b299      	uxth	r1, r3
 8007058:	fb02 6101 	mla	r1, r2, r1, r6
 800705c:	0c1e      	lsrs	r6, r3, #16
 800705e:	0c0b      	lsrs	r3, r1, #16
 8007060:	fb02 3306 	mla	r3, r2, r6, r3
 8007064:	b289      	uxth	r1, r1
 8007066:	3001      	adds	r0, #1
 8007068:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800706c:	4285      	cmp	r5, r0
 800706e:	f84c 1b04 	str.w	r1, [ip], #4
 8007072:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007076:	dcec      	bgt.n	8007052 <__multadd+0x12>
 8007078:	b30e      	cbz	r6, 80070be <__multadd+0x7e>
 800707a:	68a3      	ldr	r3, [r4, #8]
 800707c:	42ab      	cmp	r3, r5
 800707e:	dc19      	bgt.n	80070b4 <__multadd+0x74>
 8007080:	6861      	ldr	r1, [r4, #4]
 8007082:	4638      	mov	r0, r7
 8007084:	3101      	adds	r1, #1
 8007086:	f7ff ff79 	bl	8006f7c <_Balloc>
 800708a:	4680      	mov	r8, r0
 800708c:	b928      	cbnz	r0, 800709a <__multadd+0x5a>
 800708e:	4602      	mov	r2, r0
 8007090:	4b0c      	ldr	r3, [pc, #48]	; (80070c4 <__multadd+0x84>)
 8007092:	480d      	ldr	r0, [pc, #52]	; (80070c8 <__multadd+0x88>)
 8007094:	21b5      	movs	r1, #181	; 0xb5
 8007096:	f000 fc51 	bl	800793c <__assert_func>
 800709a:	6922      	ldr	r2, [r4, #16]
 800709c:	3202      	adds	r2, #2
 800709e:	f104 010c 	add.w	r1, r4, #12
 80070a2:	0092      	lsls	r2, r2, #2
 80070a4:	300c      	adds	r0, #12
 80070a6:	f7fe fa7f 	bl	80055a8 <memcpy>
 80070aa:	4621      	mov	r1, r4
 80070ac:	4638      	mov	r0, r7
 80070ae:	f7ff ffa5 	bl	8006ffc <_Bfree>
 80070b2:	4644      	mov	r4, r8
 80070b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070b8:	3501      	adds	r5, #1
 80070ba:	615e      	str	r6, [r3, #20]
 80070bc:	6125      	str	r5, [r4, #16]
 80070be:	4620      	mov	r0, r4
 80070c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070c4:	08009afe 	.word	0x08009afe
 80070c8:	08009b0f 	.word	0x08009b0f

080070cc <__hi0bits>:
 80070cc:	0c03      	lsrs	r3, r0, #16
 80070ce:	041b      	lsls	r3, r3, #16
 80070d0:	b9d3      	cbnz	r3, 8007108 <__hi0bits+0x3c>
 80070d2:	0400      	lsls	r0, r0, #16
 80070d4:	2310      	movs	r3, #16
 80070d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80070da:	bf04      	itt	eq
 80070dc:	0200      	lsleq	r0, r0, #8
 80070de:	3308      	addeq	r3, #8
 80070e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80070e4:	bf04      	itt	eq
 80070e6:	0100      	lsleq	r0, r0, #4
 80070e8:	3304      	addeq	r3, #4
 80070ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80070ee:	bf04      	itt	eq
 80070f0:	0080      	lsleq	r0, r0, #2
 80070f2:	3302      	addeq	r3, #2
 80070f4:	2800      	cmp	r0, #0
 80070f6:	db05      	blt.n	8007104 <__hi0bits+0x38>
 80070f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80070fc:	f103 0301 	add.w	r3, r3, #1
 8007100:	bf08      	it	eq
 8007102:	2320      	moveq	r3, #32
 8007104:	4618      	mov	r0, r3
 8007106:	4770      	bx	lr
 8007108:	2300      	movs	r3, #0
 800710a:	e7e4      	b.n	80070d6 <__hi0bits+0xa>

0800710c <__lo0bits>:
 800710c:	6803      	ldr	r3, [r0, #0]
 800710e:	f013 0207 	ands.w	r2, r3, #7
 8007112:	4601      	mov	r1, r0
 8007114:	d00b      	beq.n	800712e <__lo0bits+0x22>
 8007116:	07da      	lsls	r2, r3, #31
 8007118:	d423      	bmi.n	8007162 <__lo0bits+0x56>
 800711a:	0798      	lsls	r0, r3, #30
 800711c:	bf49      	itett	mi
 800711e:	085b      	lsrmi	r3, r3, #1
 8007120:	089b      	lsrpl	r3, r3, #2
 8007122:	2001      	movmi	r0, #1
 8007124:	600b      	strmi	r3, [r1, #0]
 8007126:	bf5c      	itt	pl
 8007128:	600b      	strpl	r3, [r1, #0]
 800712a:	2002      	movpl	r0, #2
 800712c:	4770      	bx	lr
 800712e:	b298      	uxth	r0, r3
 8007130:	b9a8      	cbnz	r0, 800715e <__lo0bits+0x52>
 8007132:	0c1b      	lsrs	r3, r3, #16
 8007134:	2010      	movs	r0, #16
 8007136:	b2da      	uxtb	r2, r3
 8007138:	b90a      	cbnz	r2, 800713e <__lo0bits+0x32>
 800713a:	3008      	adds	r0, #8
 800713c:	0a1b      	lsrs	r3, r3, #8
 800713e:	071a      	lsls	r2, r3, #28
 8007140:	bf04      	itt	eq
 8007142:	091b      	lsreq	r3, r3, #4
 8007144:	3004      	addeq	r0, #4
 8007146:	079a      	lsls	r2, r3, #30
 8007148:	bf04      	itt	eq
 800714a:	089b      	lsreq	r3, r3, #2
 800714c:	3002      	addeq	r0, #2
 800714e:	07da      	lsls	r2, r3, #31
 8007150:	d403      	bmi.n	800715a <__lo0bits+0x4e>
 8007152:	085b      	lsrs	r3, r3, #1
 8007154:	f100 0001 	add.w	r0, r0, #1
 8007158:	d005      	beq.n	8007166 <__lo0bits+0x5a>
 800715a:	600b      	str	r3, [r1, #0]
 800715c:	4770      	bx	lr
 800715e:	4610      	mov	r0, r2
 8007160:	e7e9      	b.n	8007136 <__lo0bits+0x2a>
 8007162:	2000      	movs	r0, #0
 8007164:	4770      	bx	lr
 8007166:	2020      	movs	r0, #32
 8007168:	4770      	bx	lr
	...

0800716c <__i2b>:
 800716c:	b510      	push	{r4, lr}
 800716e:	460c      	mov	r4, r1
 8007170:	2101      	movs	r1, #1
 8007172:	f7ff ff03 	bl	8006f7c <_Balloc>
 8007176:	4602      	mov	r2, r0
 8007178:	b928      	cbnz	r0, 8007186 <__i2b+0x1a>
 800717a:	4b05      	ldr	r3, [pc, #20]	; (8007190 <__i2b+0x24>)
 800717c:	4805      	ldr	r0, [pc, #20]	; (8007194 <__i2b+0x28>)
 800717e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007182:	f000 fbdb 	bl	800793c <__assert_func>
 8007186:	2301      	movs	r3, #1
 8007188:	6144      	str	r4, [r0, #20]
 800718a:	6103      	str	r3, [r0, #16]
 800718c:	bd10      	pop	{r4, pc}
 800718e:	bf00      	nop
 8007190:	08009afe 	.word	0x08009afe
 8007194:	08009b0f 	.word	0x08009b0f

08007198 <__multiply>:
 8007198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719c:	4691      	mov	r9, r2
 800719e:	690a      	ldr	r2, [r1, #16]
 80071a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	bfb8      	it	lt
 80071a8:	460b      	movlt	r3, r1
 80071aa:	460c      	mov	r4, r1
 80071ac:	bfbc      	itt	lt
 80071ae:	464c      	movlt	r4, r9
 80071b0:	4699      	movlt	r9, r3
 80071b2:	6927      	ldr	r7, [r4, #16]
 80071b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80071b8:	68a3      	ldr	r3, [r4, #8]
 80071ba:	6861      	ldr	r1, [r4, #4]
 80071bc:	eb07 060a 	add.w	r6, r7, sl
 80071c0:	42b3      	cmp	r3, r6
 80071c2:	b085      	sub	sp, #20
 80071c4:	bfb8      	it	lt
 80071c6:	3101      	addlt	r1, #1
 80071c8:	f7ff fed8 	bl	8006f7c <_Balloc>
 80071cc:	b930      	cbnz	r0, 80071dc <__multiply+0x44>
 80071ce:	4602      	mov	r2, r0
 80071d0:	4b44      	ldr	r3, [pc, #272]	; (80072e4 <__multiply+0x14c>)
 80071d2:	4845      	ldr	r0, [pc, #276]	; (80072e8 <__multiply+0x150>)
 80071d4:	f240 115d 	movw	r1, #349	; 0x15d
 80071d8:	f000 fbb0 	bl	800793c <__assert_func>
 80071dc:	f100 0514 	add.w	r5, r0, #20
 80071e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071e4:	462b      	mov	r3, r5
 80071e6:	2200      	movs	r2, #0
 80071e8:	4543      	cmp	r3, r8
 80071ea:	d321      	bcc.n	8007230 <__multiply+0x98>
 80071ec:	f104 0314 	add.w	r3, r4, #20
 80071f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80071f4:	f109 0314 	add.w	r3, r9, #20
 80071f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80071fc:	9202      	str	r2, [sp, #8]
 80071fe:	1b3a      	subs	r2, r7, r4
 8007200:	3a15      	subs	r2, #21
 8007202:	f022 0203 	bic.w	r2, r2, #3
 8007206:	3204      	adds	r2, #4
 8007208:	f104 0115 	add.w	r1, r4, #21
 800720c:	428f      	cmp	r7, r1
 800720e:	bf38      	it	cc
 8007210:	2204      	movcc	r2, #4
 8007212:	9201      	str	r2, [sp, #4]
 8007214:	9a02      	ldr	r2, [sp, #8]
 8007216:	9303      	str	r3, [sp, #12]
 8007218:	429a      	cmp	r2, r3
 800721a:	d80c      	bhi.n	8007236 <__multiply+0x9e>
 800721c:	2e00      	cmp	r6, #0
 800721e:	dd03      	ble.n	8007228 <__multiply+0x90>
 8007220:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007224:	2b00      	cmp	r3, #0
 8007226:	d05a      	beq.n	80072de <__multiply+0x146>
 8007228:	6106      	str	r6, [r0, #16]
 800722a:	b005      	add	sp, #20
 800722c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007230:	f843 2b04 	str.w	r2, [r3], #4
 8007234:	e7d8      	b.n	80071e8 <__multiply+0x50>
 8007236:	f8b3 a000 	ldrh.w	sl, [r3]
 800723a:	f1ba 0f00 	cmp.w	sl, #0
 800723e:	d024      	beq.n	800728a <__multiply+0xf2>
 8007240:	f104 0e14 	add.w	lr, r4, #20
 8007244:	46a9      	mov	r9, r5
 8007246:	f04f 0c00 	mov.w	ip, #0
 800724a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800724e:	f8d9 1000 	ldr.w	r1, [r9]
 8007252:	fa1f fb82 	uxth.w	fp, r2
 8007256:	b289      	uxth	r1, r1
 8007258:	fb0a 110b 	mla	r1, sl, fp, r1
 800725c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007260:	f8d9 2000 	ldr.w	r2, [r9]
 8007264:	4461      	add	r1, ip
 8007266:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800726a:	fb0a c20b 	mla	r2, sl, fp, ip
 800726e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007272:	b289      	uxth	r1, r1
 8007274:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007278:	4577      	cmp	r7, lr
 800727a:	f849 1b04 	str.w	r1, [r9], #4
 800727e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007282:	d8e2      	bhi.n	800724a <__multiply+0xb2>
 8007284:	9a01      	ldr	r2, [sp, #4]
 8007286:	f845 c002 	str.w	ip, [r5, r2]
 800728a:	9a03      	ldr	r2, [sp, #12]
 800728c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007290:	3304      	adds	r3, #4
 8007292:	f1b9 0f00 	cmp.w	r9, #0
 8007296:	d020      	beq.n	80072da <__multiply+0x142>
 8007298:	6829      	ldr	r1, [r5, #0]
 800729a:	f104 0c14 	add.w	ip, r4, #20
 800729e:	46ae      	mov	lr, r5
 80072a0:	f04f 0a00 	mov.w	sl, #0
 80072a4:	f8bc b000 	ldrh.w	fp, [ip]
 80072a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80072ac:	fb09 220b 	mla	r2, r9, fp, r2
 80072b0:	4492      	add	sl, r2
 80072b2:	b289      	uxth	r1, r1
 80072b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80072b8:	f84e 1b04 	str.w	r1, [lr], #4
 80072bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80072c0:	f8be 1000 	ldrh.w	r1, [lr]
 80072c4:	0c12      	lsrs	r2, r2, #16
 80072c6:	fb09 1102 	mla	r1, r9, r2, r1
 80072ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80072ce:	4567      	cmp	r7, ip
 80072d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80072d4:	d8e6      	bhi.n	80072a4 <__multiply+0x10c>
 80072d6:	9a01      	ldr	r2, [sp, #4]
 80072d8:	50a9      	str	r1, [r5, r2]
 80072da:	3504      	adds	r5, #4
 80072dc:	e79a      	b.n	8007214 <__multiply+0x7c>
 80072de:	3e01      	subs	r6, #1
 80072e0:	e79c      	b.n	800721c <__multiply+0x84>
 80072e2:	bf00      	nop
 80072e4:	08009afe 	.word	0x08009afe
 80072e8:	08009b0f 	.word	0x08009b0f

080072ec <__pow5mult>:
 80072ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072f0:	4615      	mov	r5, r2
 80072f2:	f012 0203 	ands.w	r2, r2, #3
 80072f6:	4606      	mov	r6, r0
 80072f8:	460f      	mov	r7, r1
 80072fa:	d007      	beq.n	800730c <__pow5mult+0x20>
 80072fc:	4c25      	ldr	r4, [pc, #148]	; (8007394 <__pow5mult+0xa8>)
 80072fe:	3a01      	subs	r2, #1
 8007300:	2300      	movs	r3, #0
 8007302:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007306:	f7ff fe9b 	bl	8007040 <__multadd>
 800730a:	4607      	mov	r7, r0
 800730c:	10ad      	asrs	r5, r5, #2
 800730e:	d03d      	beq.n	800738c <__pow5mult+0xa0>
 8007310:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007312:	b97c      	cbnz	r4, 8007334 <__pow5mult+0x48>
 8007314:	2010      	movs	r0, #16
 8007316:	f7fe f937 	bl	8005588 <malloc>
 800731a:	4602      	mov	r2, r0
 800731c:	6270      	str	r0, [r6, #36]	; 0x24
 800731e:	b928      	cbnz	r0, 800732c <__pow5mult+0x40>
 8007320:	4b1d      	ldr	r3, [pc, #116]	; (8007398 <__pow5mult+0xac>)
 8007322:	481e      	ldr	r0, [pc, #120]	; (800739c <__pow5mult+0xb0>)
 8007324:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007328:	f000 fb08 	bl	800793c <__assert_func>
 800732c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007330:	6004      	str	r4, [r0, #0]
 8007332:	60c4      	str	r4, [r0, #12]
 8007334:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007338:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800733c:	b94c      	cbnz	r4, 8007352 <__pow5mult+0x66>
 800733e:	f240 2171 	movw	r1, #625	; 0x271
 8007342:	4630      	mov	r0, r6
 8007344:	f7ff ff12 	bl	800716c <__i2b>
 8007348:	2300      	movs	r3, #0
 800734a:	f8c8 0008 	str.w	r0, [r8, #8]
 800734e:	4604      	mov	r4, r0
 8007350:	6003      	str	r3, [r0, #0]
 8007352:	f04f 0900 	mov.w	r9, #0
 8007356:	07eb      	lsls	r3, r5, #31
 8007358:	d50a      	bpl.n	8007370 <__pow5mult+0x84>
 800735a:	4639      	mov	r1, r7
 800735c:	4622      	mov	r2, r4
 800735e:	4630      	mov	r0, r6
 8007360:	f7ff ff1a 	bl	8007198 <__multiply>
 8007364:	4639      	mov	r1, r7
 8007366:	4680      	mov	r8, r0
 8007368:	4630      	mov	r0, r6
 800736a:	f7ff fe47 	bl	8006ffc <_Bfree>
 800736e:	4647      	mov	r7, r8
 8007370:	106d      	asrs	r5, r5, #1
 8007372:	d00b      	beq.n	800738c <__pow5mult+0xa0>
 8007374:	6820      	ldr	r0, [r4, #0]
 8007376:	b938      	cbnz	r0, 8007388 <__pow5mult+0x9c>
 8007378:	4622      	mov	r2, r4
 800737a:	4621      	mov	r1, r4
 800737c:	4630      	mov	r0, r6
 800737e:	f7ff ff0b 	bl	8007198 <__multiply>
 8007382:	6020      	str	r0, [r4, #0]
 8007384:	f8c0 9000 	str.w	r9, [r0]
 8007388:	4604      	mov	r4, r0
 800738a:	e7e4      	b.n	8007356 <__pow5mult+0x6a>
 800738c:	4638      	mov	r0, r7
 800738e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007392:	bf00      	nop
 8007394:	08009c60 	.word	0x08009c60
 8007398:	08009a8c 	.word	0x08009a8c
 800739c:	08009b0f 	.word	0x08009b0f

080073a0 <__lshift>:
 80073a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073a4:	460c      	mov	r4, r1
 80073a6:	6849      	ldr	r1, [r1, #4]
 80073a8:	6923      	ldr	r3, [r4, #16]
 80073aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80073ae:	68a3      	ldr	r3, [r4, #8]
 80073b0:	4607      	mov	r7, r0
 80073b2:	4691      	mov	r9, r2
 80073b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80073b8:	f108 0601 	add.w	r6, r8, #1
 80073bc:	42b3      	cmp	r3, r6
 80073be:	db0b      	blt.n	80073d8 <__lshift+0x38>
 80073c0:	4638      	mov	r0, r7
 80073c2:	f7ff fddb 	bl	8006f7c <_Balloc>
 80073c6:	4605      	mov	r5, r0
 80073c8:	b948      	cbnz	r0, 80073de <__lshift+0x3e>
 80073ca:	4602      	mov	r2, r0
 80073cc:	4b2a      	ldr	r3, [pc, #168]	; (8007478 <__lshift+0xd8>)
 80073ce:	482b      	ldr	r0, [pc, #172]	; (800747c <__lshift+0xdc>)
 80073d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80073d4:	f000 fab2 	bl	800793c <__assert_func>
 80073d8:	3101      	adds	r1, #1
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	e7ee      	b.n	80073bc <__lshift+0x1c>
 80073de:	2300      	movs	r3, #0
 80073e0:	f100 0114 	add.w	r1, r0, #20
 80073e4:	f100 0210 	add.w	r2, r0, #16
 80073e8:	4618      	mov	r0, r3
 80073ea:	4553      	cmp	r3, sl
 80073ec:	db37      	blt.n	800745e <__lshift+0xbe>
 80073ee:	6920      	ldr	r0, [r4, #16]
 80073f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073f4:	f104 0314 	add.w	r3, r4, #20
 80073f8:	f019 091f 	ands.w	r9, r9, #31
 80073fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007400:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007404:	d02f      	beq.n	8007466 <__lshift+0xc6>
 8007406:	f1c9 0e20 	rsb	lr, r9, #32
 800740a:	468a      	mov	sl, r1
 800740c:	f04f 0c00 	mov.w	ip, #0
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	fa02 f209 	lsl.w	r2, r2, r9
 8007416:	ea42 020c 	orr.w	r2, r2, ip
 800741a:	f84a 2b04 	str.w	r2, [sl], #4
 800741e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007422:	4298      	cmp	r0, r3
 8007424:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007428:	d8f2      	bhi.n	8007410 <__lshift+0x70>
 800742a:	1b03      	subs	r3, r0, r4
 800742c:	3b15      	subs	r3, #21
 800742e:	f023 0303 	bic.w	r3, r3, #3
 8007432:	3304      	adds	r3, #4
 8007434:	f104 0215 	add.w	r2, r4, #21
 8007438:	4290      	cmp	r0, r2
 800743a:	bf38      	it	cc
 800743c:	2304      	movcc	r3, #4
 800743e:	f841 c003 	str.w	ip, [r1, r3]
 8007442:	f1bc 0f00 	cmp.w	ip, #0
 8007446:	d001      	beq.n	800744c <__lshift+0xac>
 8007448:	f108 0602 	add.w	r6, r8, #2
 800744c:	3e01      	subs	r6, #1
 800744e:	4638      	mov	r0, r7
 8007450:	612e      	str	r6, [r5, #16]
 8007452:	4621      	mov	r1, r4
 8007454:	f7ff fdd2 	bl	8006ffc <_Bfree>
 8007458:	4628      	mov	r0, r5
 800745a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800745e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007462:	3301      	adds	r3, #1
 8007464:	e7c1      	b.n	80073ea <__lshift+0x4a>
 8007466:	3904      	subs	r1, #4
 8007468:	f853 2b04 	ldr.w	r2, [r3], #4
 800746c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007470:	4298      	cmp	r0, r3
 8007472:	d8f9      	bhi.n	8007468 <__lshift+0xc8>
 8007474:	e7ea      	b.n	800744c <__lshift+0xac>
 8007476:	bf00      	nop
 8007478:	08009afe 	.word	0x08009afe
 800747c:	08009b0f 	.word	0x08009b0f

08007480 <__mcmp>:
 8007480:	b530      	push	{r4, r5, lr}
 8007482:	6902      	ldr	r2, [r0, #16]
 8007484:	690c      	ldr	r4, [r1, #16]
 8007486:	1b12      	subs	r2, r2, r4
 8007488:	d10e      	bne.n	80074a8 <__mcmp+0x28>
 800748a:	f100 0314 	add.w	r3, r0, #20
 800748e:	3114      	adds	r1, #20
 8007490:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007494:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007498:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800749c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80074a0:	42a5      	cmp	r5, r4
 80074a2:	d003      	beq.n	80074ac <__mcmp+0x2c>
 80074a4:	d305      	bcc.n	80074b2 <__mcmp+0x32>
 80074a6:	2201      	movs	r2, #1
 80074a8:	4610      	mov	r0, r2
 80074aa:	bd30      	pop	{r4, r5, pc}
 80074ac:	4283      	cmp	r3, r0
 80074ae:	d3f3      	bcc.n	8007498 <__mcmp+0x18>
 80074b0:	e7fa      	b.n	80074a8 <__mcmp+0x28>
 80074b2:	f04f 32ff 	mov.w	r2, #4294967295
 80074b6:	e7f7      	b.n	80074a8 <__mcmp+0x28>

080074b8 <__mdiff>:
 80074b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074bc:	460c      	mov	r4, r1
 80074be:	4606      	mov	r6, r0
 80074c0:	4611      	mov	r1, r2
 80074c2:	4620      	mov	r0, r4
 80074c4:	4690      	mov	r8, r2
 80074c6:	f7ff ffdb 	bl	8007480 <__mcmp>
 80074ca:	1e05      	subs	r5, r0, #0
 80074cc:	d110      	bne.n	80074f0 <__mdiff+0x38>
 80074ce:	4629      	mov	r1, r5
 80074d0:	4630      	mov	r0, r6
 80074d2:	f7ff fd53 	bl	8006f7c <_Balloc>
 80074d6:	b930      	cbnz	r0, 80074e6 <__mdiff+0x2e>
 80074d8:	4b3a      	ldr	r3, [pc, #232]	; (80075c4 <__mdiff+0x10c>)
 80074da:	4602      	mov	r2, r0
 80074dc:	f240 2132 	movw	r1, #562	; 0x232
 80074e0:	4839      	ldr	r0, [pc, #228]	; (80075c8 <__mdiff+0x110>)
 80074e2:	f000 fa2b 	bl	800793c <__assert_func>
 80074e6:	2301      	movs	r3, #1
 80074e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80074ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f0:	bfa4      	itt	ge
 80074f2:	4643      	movge	r3, r8
 80074f4:	46a0      	movge	r8, r4
 80074f6:	4630      	mov	r0, r6
 80074f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80074fc:	bfa6      	itte	ge
 80074fe:	461c      	movge	r4, r3
 8007500:	2500      	movge	r5, #0
 8007502:	2501      	movlt	r5, #1
 8007504:	f7ff fd3a 	bl	8006f7c <_Balloc>
 8007508:	b920      	cbnz	r0, 8007514 <__mdiff+0x5c>
 800750a:	4b2e      	ldr	r3, [pc, #184]	; (80075c4 <__mdiff+0x10c>)
 800750c:	4602      	mov	r2, r0
 800750e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007512:	e7e5      	b.n	80074e0 <__mdiff+0x28>
 8007514:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007518:	6926      	ldr	r6, [r4, #16]
 800751a:	60c5      	str	r5, [r0, #12]
 800751c:	f104 0914 	add.w	r9, r4, #20
 8007520:	f108 0514 	add.w	r5, r8, #20
 8007524:	f100 0e14 	add.w	lr, r0, #20
 8007528:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800752c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007530:	f108 0210 	add.w	r2, r8, #16
 8007534:	46f2      	mov	sl, lr
 8007536:	2100      	movs	r1, #0
 8007538:	f859 3b04 	ldr.w	r3, [r9], #4
 800753c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007540:	fa1f f883 	uxth.w	r8, r3
 8007544:	fa11 f18b 	uxtah	r1, r1, fp
 8007548:	0c1b      	lsrs	r3, r3, #16
 800754a:	eba1 0808 	sub.w	r8, r1, r8
 800754e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007552:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007556:	fa1f f888 	uxth.w	r8, r8
 800755a:	1419      	asrs	r1, r3, #16
 800755c:	454e      	cmp	r6, r9
 800755e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007562:	f84a 3b04 	str.w	r3, [sl], #4
 8007566:	d8e7      	bhi.n	8007538 <__mdiff+0x80>
 8007568:	1b33      	subs	r3, r6, r4
 800756a:	3b15      	subs	r3, #21
 800756c:	f023 0303 	bic.w	r3, r3, #3
 8007570:	3304      	adds	r3, #4
 8007572:	3415      	adds	r4, #21
 8007574:	42a6      	cmp	r6, r4
 8007576:	bf38      	it	cc
 8007578:	2304      	movcc	r3, #4
 800757a:	441d      	add	r5, r3
 800757c:	4473      	add	r3, lr
 800757e:	469e      	mov	lr, r3
 8007580:	462e      	mov	r6, r5
 8007582:	4566      	cmp	r6, ip
 8007584:	d30e      	bcc.n	80075a4 <__mdiff+0xec>
 8007586:	f10c 0203 	add.w	r2, ip, #3
 800758a:	1b52      	subs	r2, r2, r5
 800758c:	f022 0203 	bic.w	r2, r2, #3
 8007590:	3d03      	subs	r5, #3
 8007592:	45ac      	cmp	ip, r5
 8007594:	bf38      	it	cc
 8007596:	2200      	movcc	r2, #0
 8007598:	441a      	add	r2, r3
 800759a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800759e:	b17b      	cbz	r3, 80075c0 <__mdiff+0x108>
 80075a0:	6107      	str	r7, [r0, #16]
 80075a2:	e7a3      	b.n	80074ec <__mdiff+0x34>
 80075a4:	f856 8b04 	ldr.w	r8, [r6], #4
 80075a8:	fa11 f288 	uxtah	r2, r1, r8
 80075ac:	1414      	asrs	r4, r2, #16
 80075ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80075b2:	b292      	uxth	r2, r2
 80075b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80075b8:	f84e 2b04 	str.w	r2, [lr], #4
 80075bc:	1421      	asrs	r1, r4, #16
 80075be:	e7e0      	b.n	8007582 <__mdiff+0xca>
 80075c0:	3f01      	subs	r7, #1
 80075c2:	e7ea      	b.n	800759a <__mdiff+0xe2>
 80075c4:	08009afe 	.word	0x08009afe
 80075c8:	08009b0f 	.word	0x08009b0f

080075cc <__d2b>:
 80075cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80075d0:	4689      	mov	r9, r1
 80075d2:	2101      	movs	r1, #1
 80075d4:	ec57 6b10 	vmov	r6, r7, d0
 80075d8:	4690      	mov	r8, r2
 80075da:	f7ff fccf 	bl	8006f7c <_Balloc>
 80075de:	4604      	mov	r4, r0
 80075e0:	b930      	cbnz	r0, 80075f0 <__d2b+0x24>
 80075e2:	4602      	mov	r2, r0
 80075e4:	4b25      	ldr	r3, [pc, #148]	; (800767c <__d2b+0xb0>)
 80075e6:	4826      	ldr	r0, [pc, #152]	; (8007680 <__d2b+0xb4>)
 80075e8:	f240 310a 	movw	r1, #778	; 0x30a
 80075ec:	f000 f9a6 	bl	800793c <__assert_func>
 80075f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80075f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075f8:	bb35      	cbnz	r5, 8007648 <__d2b+0x7c>
 80075fa:	2e00      	cmp	r6, #0
 80075fc:	9301      	str	r3, [sp, #4]
 80075fe:	d028      	beq.n	8007652 <__d2b+0x86>
 8007600:	4668      	mov	r0, sp
 8007602:	9600      	str	r6, [sp, #0]
 8007604:	f7ff fd82 	bl	800710c <__lo0bits>
 8007608:	9900      	ldr	r1, [sp, #0]
 800760a:	b300      	cbz	r0, 800764e <__d2b+0x82>
 800760c:	9a01      	ldr	r2, [sp, #4]
 800760e:	f1c0 0320 	rsb	r3, r0, #32
 8007612:	fa02 f303 	lsl.w	r3, r2, r3
 8007616:	430b      	orrs	r3, r1
 8007618:	40c2      	lsrs	r2, r0
 800761a:	6163      	str	r3, [r4, #20]
 800761c:	9201      	str	r2, [sp, #4]
 800761e:	9b01      	ldr	r3, [sp, #4]
 8007620:	61a3      	str	r3, [r4, #24]
 8007622:	2b00      	cmp	r3, #0
 8007624:	bf14      	ite	ne
 8007626:	2202      	movne	r2, #2
 8007628:	2201      	moveq	r2, #1
 800762a:	6122      	str	r2, [r4, #16]
 800762c:	b1d5      	cbz	r5, 8007664 <__d2b+0x98>
 800762e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007632:	4405      	add	r5, r0
 8007634:	f8c9 5000 	str.w	r5, [r9]
 8007638:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800763c:	f8c8 0000 	str.w	r0, [r8]
 8007640:	4620      	mov	r0, r4
 8007642:	b003      	add	sp, #12
 8007644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800764c:	e7d5      	b.n	80075fa <__d2b+0x2e>
 800764e:	6161      	str	r1, [r4, #20]
 8007650:	e7e5      	b.n	800761e <__d2b+0x52>
 8007652:	a801      	add	r0, sp, #4
 8007654:	f7ff fd5a 	bl	800710c <__lo0bits>
 8007658:	9b01      	ldr	r3, [sp, #4]
 800765a:	6163      	str	r3, [r4, #20]
 800765c:	2201      	movs	r2, #1
 800765e:	6122      	str	r2, [r4, #16]
 8007660:	3020      	adds	r0, #32
 8007662:	e7e3      	b.n	800762c <__d2b+0x60>
 8007664:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007668:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800766c:	f8c9 0000 	str.w	r0, [r9]
 8007670:	6918      	ldr	r0, [r3, #16]
 8007672:	f7ff fd2b 	bl	80070cc <__hi0bits>
 8007676:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800767a:	e7df      	b.n	800763c <__d2b+0x70>
 800767c:	08009afe 	.word	0x08009afe
 8007680:	08009b0f 	.word	0x08009b0f

08007684 <__ssputs_r>:
 8007684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007688:	688e      	ldr	r6, [r1, #8]
 800768a:	429e      	cmp	r6, r3
 800768c:	4682      	mov	sl, r0
 800768e:	460c      	mov	r4, r1
 8007690:	4690      	mov	r8, r2
 8007692:	461f      	mov	r7, r3
 8007694:	d838      	bhi.n	8007708 <__ssputs_r+0x84>
 8007696:	898a      	ldrh	r2, [r1, #12]
 8007698:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800769c:	d032      	beq.n	8007704 <__ssputs_r+0x80>
 800769e:	6825      	ldr	r5, [r4, #0]
 80076a0:	6909      	ldr	r1, [r1, #16]
 80076a2:	eba5 0901 	sub.w	r9, r5, r1
 80076a6:	6965      	ldr	r5, [r4, #20]
 80076a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076b0:	3301      	adds	r3, #1
 80076b2:	444b      	add	r3, r9
 80076b4:	106d      	asrs	r5, r5, #1
 80076b6:	429d      	cmp	r5, r3
 80076b8:	bf38      	it	cc
 80076ba:	461d      	movcc	r5, r3
 80076bc:	0553      	lsls	r3, r2, #21
 80076be:	d531      	bpl.n	8007724 <__ssputs_r+0xa0>
 80076c0:	4629      	mov	r1, r5
 80076c2:	f7fe f809 	bl	80056d8 <_malloc_r>
 80076c6:	4606      	mov	r6, r0
 80076c8:	b950      	cbnz	r0, 80076e0 <__ssputs_r+0x5c>
 80076ca:	230c      	movs	r3, #12
 80076cc:	f8ca 3000 	str.w	r3, [sl]
 80076d0:	89a3      	ldrh	r3, [r4, #12]
 80076d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076d6:	81a3      	strh	r3, [r4, #12]
 80076d8:	f04f 30ff 	mov.w	r0, #4294967295
 80076dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076e0:	6921      	ldr	r1, [r4, #16]
 80076e2:	464a      	mov	r2, r9
 80076e4:	f7fd ff60 	bl	80055a8 <memcpy>
 80076e8:	89a3      	ldrh	r3, [r4, #12]
 80076ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f2:	81a3      	strh	r3, [r4, #12]
 80076f4:	6126      	str	r6, [r4, #16]
 80076f6:	6165      	str	r5, [r4, #20]
 80076f8:	444e      	add	r6, r9
 80076fa:	eba5 0509 	sub.w	r5, r5, r9
 80076fe:	6026      	str	r6, [r4, #0]
 8007700:	60a5      	str	r5, [r4, #8]
 8007702:	463e      	mov	r6, r7
 8007704:	42be      	cmp	r6, r7
 8007706:	d900      	bls.n	800770a <__ssputs_r+0x86>
 8007708:	463e      	mov	r6, r7
 800770a:	6820      	ldr	r0, [r4, #0]
 800770c:	4632      	mov	r2, r6
 800770e:	4641      	mov	r1, r8
 8007710:	f000 f959 	bl	80079c6 <memmove>
 8007714:	68a3      	ldr	r3, [r4, #8]
 8007716:	1b9b      	subs	r3, r3, r6
 8007718:	60a3      	str	r3, [r4, #8]
 800771a:	6823      	ldr	r3, [r4, #0]
 800771c:	4433      	add	r3, r6
 800771e:	6023      	str	r3, [r4, #0]
 8007720:	2000      	movs	r0, #0
 8007722:	e7db      	b.n	80076dc <__ssputs_r+0x58>
 8007724:	462a      	mov	r2, r5
 8007726:	f000 f968 	bl	80079fa <_realloc_r>
 800772a:	4606      	mov	r6, r0
 800772c:	2800      	cmp	r0, #0
 800772e:	d1e1      	bne.n	80076f4 <__ssputs_r+0x70>
 8007730:	6921      	ldr	r1, [r4, #16]
 8007732:	4650      	mov	r0, sl
 8007734:	f7fd ff64 	bl	8005600 <_free_r>
 8007738:	e7c7      	b.n	80076ca <__ssputs_r+0x46>
	...

0800773c <_svfiprintf_r>:
 800773c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007740:	4698      	mov	r8, r3
 8007742:	898b      	ldrh	r3, [r1, #12]
 8007744:	061b      	lsls	r3, r3, #24
 8007746:	b09d      	sub	sp, #116	; 0x74
 8007748:	4607      	mov	r7, r0
 800774a:	460d      	mov	r5, r1
 800774c:	4614      	mov	r4, r2
 800774e:	d50e      	bpl.n	800776e <_svfiprintf_r+0x32>
 8007750:	690b      	ldr	r3, [r1, #16]
 8007752:	b963      	cbnz	r3, 800776e <_svfiprintf_r+0x32>
 8007754:	2140      	movs	r1, #64	; 0x40
 8007756:	f7fd ffbf 	bl	80056d8 <_malloc_r>
 800775a:	6028      	str	r0, [r5, #0]
 800775c:	6128      	str	r0, [r5, #16]
 800775e:	b920      	cbnz	r0, 800776a <_svfiprintf_r+0x2e>
 8007760:	230c      	movs	r3, #12
 8007762:	603b      	str	r3, [r7, #0]
 8007764:	f04f 30ff 	mov.w	r0, #4294967295
 8007768:	e0d1      	b.n	800790e <_svfiprintf_r+0x1d2>
 800776a:	2340      	movs	r3, #64	; 0x40
 800776c:	616b      	str	r3, [r5, #20]
 800776e:	2300      	movs	r3, #0
 8007770:	9309      	str	r3, [sp, #36]	; 0x24
 8007772:	2320      	movs	r3, #32
 8007774:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007778:	f8cd 800c 	str.w	r8, [sp, #12]
 800777c:	2330      	movs	r3, #48	; 0x30
 800777e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007928 <_svfiprintf_r+0x1ec>
 8007782:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007786:	f04f 0901 	mov.w	r9, #1
 800778a:	4623      	mov	r3, r4
 800778c:	469a      	mov	sl, r3
 800778e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007792:	b10a      	cbz	r2, 8007798 <_svfiprintf_r+0x5c>
 8007794:	2a25      	cmp	r2, #37	; 0x25
 8007796:	d1f9      	bne.n	800778c <_svfiprintf_r+0x50>
 8007798:	ebba 0b04 	subs.w	fp, sl, r4
 800779c:	d00b      	beq.n	80077b6 <_svfiprintf_r+0x7a>
 800779e:	465b      	mov	r3, fp
 80077a0:	4622      	mov	r2, r4
 80077a2:	4629      	mov	r1, r5
 80077a4:	4638      	mov	r0, r7
 80077a6:	f7ff ff6d 	bl	8007684 <__ssputs_r>
 80077aa:	3001      	adds	r0, #1
 80077ac:	f000 80aa 	beq.w	8007904 <_svfiprintf_r+0x1c8>
 80077b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077b2:	445a      	add	r2, fp
 80077b4:	9209      	str	r2, [sp, #36]	; 0x24
 80077b6:	f89a 3000 	ldrb.w	r3, [sl]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f000 80a2 	beq.w	8007904 <_svfiprintf_r+0x1c8>
 80077c0:	2300      	movs	r3, #0
 80077c2:	f04f 32ff 	mov.w	r2, #4294967295
 80077c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077ca:	f10a 0a01 	add.w	sl, sl, #1
 80077ce:	9304      	str	r3, [sp, #16]
 80077d0:	9307      	str	r3, [sp, #28]
 80077d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077d6:	931a      	str	r3, [sp, #104]	; 0x68
 80077d8:	4654      	mov	r4, sl
 80077da:	2205      	movs	r2, #5
 80077dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077e0:	4851      	ldr	r0, [pc, #324]	; (8007928 <_svfiprintf_r+0x1ec>)
 80077e2:	f7f8 fcfd 	bl	80001e0 <memchr>
 80077e6:	9a04      	ldr	r2, [sp, #16]
 80077e8:	b9d8      	cbnz	r0, 8007822 <_svfiprintf_r+0xe6>
 80077ea:	06d0      	lsls	r0, r2, #27
 80077ec:	bf44      	itt	mi
 80077ee:	2320      	movmi	r3, #32
 80077f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077f4:	0711      	lsls	r1, r2, #28
 80077f6:	bf44      	itt	mi
 80077f8:	232b      	movmi	r3, #43	; 0x2b
 80077fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007802:	2b2a      	cmp	r3, #42	; 0x2a
 8007804:	d015      	beq.n	8007832 <_svfiprintf_r+0xf6>
 8007806:	9a07      	ldr	r2, [sp, #28]
 8007808:	4654      	mov	r4, sl
 800780a:	2000      	movs	r0, #0
 800780c:	f04f 0c0a 	mov.w	ip, #10
 8007810:	4621      	mov	r1, r4
 8007812:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007816:	3b30      	subs	r3, #48	; 0x30
 8007818:	2b09      	cmp	r3, #9
 800781a:	d94e      	bls.n	80078ba <_svfiprintf_r+0x17e>
 800781c:	b1b0      	cbz	r0, 800784c <_svfiprintf_r+0x110>
 800781e:	9207      	str	r2, [sp, #28]
 8007820:	e014      	b.n	800784c <_svfiprintf_r+0x110>
 8007822:	eba0 0308 	sub.w	r3, r0, r8
 8007826:	fa09 f303 	lsl.w	r3, r9, r3
 800782a:	4313      	orrs	r3, r2
 800782c:	9304      	str	r3, [sp, #16]
 800782e:	46a2      	mov	sl, r4
 8007830:	e7d2      	b.n	80077d8 <_svfiprintf_r+0x9c>
 8007832:	9b03      	ldr	r3, [sp, #12]
 8007834:	1d19      	adds	r1, r3, #4
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	9103      	str	r1, [sp, #12]
 800783a:	2b00      	cmp	r3, #0
 800783c:	bfbb      	ittet	lt
 800783e:	425b      	neglt	r3, r3
 8007840:	f042 0202 	orrlt.w	r2, r2, #2
 8007844:	9307      	strge	r3, [sp, #28]
 8007846:	9307      	strlt	r3, [sp, #28]
 8007848:	bfb8      	it	lt
 800784a:	9204      	strlt	r2, [sp, #16]
 800784c:	7823      	ldrb	r3, [r4, #0]
 800784e:	2b2e      	cmp	r3, #46	; 0x2e
 8007850:	d10c      	bne.n	800786c <_svfiprintf_r+0x130>
 8007852:	7863      	ldrb	r3, [r4, #1]
 8007854:	2b2a      	cmp	r3, #42	; 0x2a
 8007856:	d135      	bne.n	80078c4 <_svfiprintf_r+0x188>
 8007858:	9b03      	ldr	r3, [sp, #12]
 800785a:	1d1a      	adds	r2, r3, #4
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	9203      	str	r2, [sp, #12]
 8007860:	2b00      	cmp	r3, #0
 8007862:	bfb8      	it	lt
 8007864:	f04f 33ff 	movlt.w	r3, #4294967295
 8007868:	3402      	adds	r4, #2
 800786a:	9305      	str	r3, [sp, #20]
 800786c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007938 <_svfiprintf_r+0x1fc>
 8007870:	7821      	ldrb	r1, [r4, #0]
 8007872:	2203      	movs	r2, #3
 8007874:	4650      	mov	r0, sl
 8007876:	f7f8 fcb3 	bl	80001e0 <memchr>
 800787a:	b140      	cbz	r0, 800788e <_svfiprintf_r+0x152>
 800787c:	2340      	movs	r3, #64	; 0x40
 800787e:	eba0 000a 	sub.w	r0, r0, sl
 8007882:	fa03 f000 	lsl.w	r0, r3, r0
 8007886:	9b04      	ldr	r3, [sp, #16]
 8007888:	4303      	orrs	r3, r0
 800788a:	3401      	adds	r4, #1
 800788c:	9304      	str	r3, [sp, #16]
 800788e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007892:	4826      	ldr	r0, [pc, #152]	; (800792c <_svfiprintf_r+0x1f0>)
 8007894:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007898:	2206      	movs	r2, #6
 800789a:	f7f8 fca1 	bl	80001e0 <memchr>
 800789e:	2800      	cmp	r0, #0
 80078a0:	d038      	beq.n	8007914 <_svfiprintf_r+0x1d8>
 80078a2:	4b23      	ldr	r3, [pc, #140]	; (8007930 <_svfiprintf_r+0x1f4>)
 80078a4:	bb1b      	cbnz	r3, 80078ee <_svfiprintf_r+0x1b2>
 80078a6:	9b03      	ldr	r3, [sp, #12]
 80078a8:	3307      	adds	r3, #7
 80078aa:	f023 0307 	bic.w	r3, r3, #7
 80078ae:	3308      	adds	r3, #8
 80078b0:	9303      	str	r3, [sp, #12]
 80078b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078b4:	4433      	add	r3, r6
 80078b6:	9309      	str	r3, [sp, #36]	; 0x24
 80078b8:	e767      	b.n	800778a <_svfiprintf_r+0x4e>
 80078ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80078be:	460c      	mov	r4, r1
 80078c0:	2001      	movs	r0, #1
 80078c2:	e7a5      	b.n	8007810 <_svfiprintf_r+0xd4>
 80078c4:	2300      	movs	r3, #0
 80078c6:	3401      	adds	r4, #1
 80078c8:	9305      	str	r3, [sp, #20]
 80078ca:	4619      	mov	r1, r3
 80078cc:	f04f 0c0a 	mov.w	ip, #10
 80078d0:	4620      	mov	r0, r4
 80078d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078d6:	3a30      	subs	r2, #48	; 0x30
 80078d8:	2a09      	cmp	r2, #9
 80078da:	d903      	bls.n	80078e4 <_svfiprintf_r+0x1a8>
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d0c5      	beq.n	800786c <_svfiprintf_r+0x130>
 80078e0:	9105      	str	r1, [sp, #20]
 80078e2:	e7c3      	b.n	800786c <_svfiprintf_r+0x130>
 80078e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80078e8:	4604      	mov	r4, r0
 80078ea:	2301      	movs	r3, #1
 80078ec:	e7f0      	b.n	80078d0 <_svfiprintf_r+0x194>
 80078ee:	ab03      	add	r3, sp, #12
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	462a      	mov	r2, r5
 80078f4:	4b0f      	ldr	r3, [pc, #60]	; (8007934 <_svfiprintf_r+0x1f8>)
 80078f6:	a904      	add	r1, sp, #16
 80078f8:	4638      	mov	r0, r7
 80078fa:	f7fe f801 	bl	8005900 <_printf_float>
 80078fe:	1c42      	adds	r2, r0, #1
 8007900:	4606      	mov	r6, r0
 8007902:	d1d6      	bne.n	80078b2 <_svfiprintf_r+0x176>
 8007904:	89ab      	ldrh	r3, [r5, #12]
 8007906:	065b      	lsls	r3, r3, #25
 8007908:	f53f af2c 	bmi.w	8007764 <_svfiprintf_r+0x28>
 800790c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800790e:	b01d      	add	sp, #116	; 0x74
 8007910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007914:	ab03      	add	r3, sp, #12
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	462a      	mov	r2, r5
 800791a:	4b06      	ldr	r3, [pc, #24]	; (8007934 <_svfiprintf_r+0x1f8>)
 800791c:	a904      	add	r1, sp, #16
 800791e:	4638      	mov	r0, r7
 8007920:	f7fe fa92 	bl	8005e48 <_printf_i>
 8007924:	e7eb      	b.n	80078fe <_svfiprintf_r+0x1c2>
 8007926:	bf00      	nop
 8007928:	08009c6c 	.word	0x08009c6c
 800792c:	08009c76 	.word	0x08009c76
 8007930:	08005901 	.word	0x08005901
 8007934:	08007685 	.word	0x08007685
 8007938:	08009c72 	.word	0x08009c72

0800793c <__assert_func>:
 800793c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800793e:	4614      	mov	r4, r2
 8007940:	461a      	mov	r2, r3
 8007942:	4b09      	ldr	r3, [pc, #36]	; (8007968 <__assert_func+0x2c>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4605      	mov	r5, r0
 8007948:	68d8      	ldr	r0, [r3, #12]
 800794a:	b14c      	cbz	r4, 8007960 <__assert_func+0x24>
 800794c:	4b07      	ldr	r3, [pc, #28]	; (800796c <__assert_func+0x30>)
 800794e:	9100      	str	r1, [sp, #0]
 8007950:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007954:	4906      	ldr	r1, [pc, #24]	; (8007970 <__assert_func+0x34>)
 8007956:	462b      	mov	r3, r5
 8007958:	f000 f80e 	bl	8007978 <fiprintf>
 800795c:	f000 faa4 	bl	8007ea8 <abort>
 8007960:	4b04      	ldr	r3, [pc, #16]	; (8007974 <__assert_func+0x38>)
 8007962:	461c      	mov	r4, r3
 8007964:	e7f3      	b.n	800794e <__assert_func+0x12>
 8007966:	bf00      	nop
 8007968:	20000020 	.word	0x20000020
 800796c:	08009c7d 	.word	0x08009c7d
 8007970:	08009c8a 	.word	0x08009c8a
 8007974:	08008981 	.word	0x08008981

08007978 <fiprintf>:
 8007978:	b40e      	push	{r1, r2, r3}
 800797a:	b503      	push	{r0, r1, lr}
 800797c:	4601      	mov	r1, r0
 800797e:	ab03      	add	r3, sp, #12
 8007980:	4805      	ldr	r0, [pc, #20]	; (8007998 <fiprintf+0x20>)
 8007982:	f853 2b04 	ldr.w	r2, [r3], #4
 8007986:	6800      	ldr	r0, [r0, #0]
 8007988:	9301      	str	r3, [sp, #4]
 800798a:	f000 f88f 	bl	8007aac <_vfiprintf_r>
 800798e:	b002      	add	sp, #8
 8007990:	f85d eb04 	ldr.w	lr, [sp], #4
 8007994:	b003      	add	sp, #12
 8007996:	4770      	bx	lr
 8007998:	20000020 	.word	0x20000020

0800799c <__retarget_lock_init_recursive>:
 800799c:	4770      	bx	lr

0800799e <__retarget_lock_acquire_recursive>:
 800799e:	4770      	bx	lr

080079a0 <__retarget_lock_release_recursive>:
 80079a0:	4770      	bx	lr

080079a2 <__ascii_mbtowc>:
 80079a2:	b082      	sub	sp, #8
 80079a4:	b901      	cbnz	r1, 80079a8 <__ascii_mbtowc+0x6>
 80079a6:	a901      	add	r1, sp, #4
 80079a8:	b142      	cbz	r2, 80079bc <__ascii_mbtowc+0x1a>
 80079aa:	b14b      	cbz	r3, 80079c0 <__ascii_mbtowc+0x1e>
 80079ac:	7813      	ldrb	r3, [r2, #0]
 80079ae:	600b      	str	r3, [r1, #0]
 80079b0:	7812      	ldrb	r2, [r2, #0]
 80079b2:	1e10      	subs	r0, r2, #0
 80079b4:	bf18      	it	ne
 80079b6:	2001      	movne	r0, #1
 80079b8:	b002      	add	sp, #8
 80079ba:	4770      	bx	lr
 80079bc:	4610      	mov	r0, r2
 80079be:	e7fb      	b.n	80079b8 <__ascii_mbtowc+0x16>
 80079c0:	f06f 0001 	mvn.w	r0, #1
 80079c4:	e7f8      	b.n	80079b8 <__ascii_mbtowc+0x16>

080079c6 <memmove>:
 80079c6:	4288      	cmp	r0, r1
 80079c8:	b510      	push	{r4, lr}
 80079ca:	eb01 0402 	add.w	r4, r1, r2
 80079ce:	d902      	bls.n	80079d6 <memmove+0x10>
 80079d0:	4284      	cmp	r4, r0
 80079d2:	4623      	mov	r3, r4
 80079d4:	d807      	bhi.n	80079e6 <memmove+0x20>
 80079d6:	1e43      	subs	r3, r0, #1
 80079d8:	42a1      	cmp	r1, r4
 80079da:	d008      	beq.n	80079ee <memmove+0x28>
 80079dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079e4:	e7f8      	b.n	80079d8 <memmove+0x12>
 80079e6:	4402      	add	r2, r0
 80079e8:	4601      	mov	r1, r0
 80079ea:	428a      	cmp	r2, r1
 80079ec:	d100      	bne.n	80079f0 <memmove+0x2a>
 80079ee:	bd10      	pop	{r4, pc}
 80079f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079f4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079f8:	e7f7      	b.n	80079ea <memmove+0x24>

080079fa <_realloc_r>:
 80079fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079fe:	4680      	mov	r8, r0
 8007a00:	4614      	mov	r4, r2
 8007a02:	460e      	mov	r6, r1
 8007a04:	b921      	cbnz	r1, 8007a10 <_realloc_r+0x16>
 8007a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a0a:	4611      	mov	r1, r2
 8007a0c:	f7fd be64 	b.w	80056d8 <_malloc_r>
 8007a10:	b92a      	cbnz	r2, 8007a1e <_realloc_r+0x24>
 8007a12:	f7fd fdf5 	bl	8005600 <_free_r>
 8007a16:	4625      	mov	r5, r4
 8007a18:	4628      	mov	r0, r5
 8007a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a1e:	f000 fc67 	bl	80082f0 <_malloc_usable_size_r>
 8007a22:	4284      	cmp	r4, r0
 8007a24:	4607      	mov	r7, r0
 8007a26:	d802      	bhi.n	8007a2e <_realloc_r+0x34>
 8007a28:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007a2c:	d812      	bhi.n	8007a54 <_realloc_r+0x5a>
 8007a2e:	4621      	mov	r1, r4
 8007a30:	4640      	mov	r0, r8
 8007a32:	f7fd fe51 	bl	80056d8 <_malloc_r>
 8007a36:	4605      	mov	r5, r0
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	d0ed      	beq.n	8007a18 <_realloc_r+0x1e>
 8007a3c:	42bc      	cmp	r4, r7
 8007a3e:	4622      	mov	r2, r4
 8007a40:	4631      	mov	r1, r6
 8007a42:	bf28      	it	cs
 8007a44:	463a      	movcs	r2, r7
 8007a46:	f7fd fdaf 	bl	80055a8 <memcpy>
 8007a4a:	4631      	mov	r1, r6
 8007a4c:	4640      	mov	r0, r8
 8007a4e:	f7fd fdd7 	bl	8005600 <_free_r>
 8007a52:	e7e1      	b.n	8007a18 <_realloc_r+0x1e>
 8007a54:	4635      	mov	r5, r6
 8007a56:	e7df      	b.n	8007a18 <_realloc_r+0x1e>

08007a58 <__sfputc_r>:
 8007a58:	6893      	ldr	r3, [r2, #8]
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	b410      	push	{r4}
 8007a60:	6093      	str	r3, [r2, #8]
 8007a62:	da08      	bge.n	8007a76 <__sfputc_r+0x1e>
 8007a64:	6994      	ldr	r4, [r2, #24]
 8007a66:	42a3      	cmp	r3, r4
 8007a68:	db01      	blt.n	8007a6e <__sfputc_r+0x16>
 8007a6a:	290a      	cmp	r1, #10
 8007a6c:	d103      	bne.n	8007a76 <__sfputc_r+0x1e>
 8007a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a72:	f000 b94b 	b.w	8007d0c <__swbuf_r>
 8007a76:	6813      	ldr	r3, [r2, #0]
 8007a78:	1c58      	adds	r0, r3, #1
 8007a7a:	6010      	str	r0, [r2, #0]
 8007a7c:	7019      	strb	r1, [r3, #0]
 8007a7e:	4608      	mov	r0, r1
 8007a80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <__sfputs_r>:
 8007a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a88:	4606      	mov	r6, r0
 8007a8a:	460f      	mov	r7, r1
 8007a8c:	4614      	mov	r4, r2
 8007a8e:	18d5      	adds	r5, r2, r3
 8007a90:	42ac      	cmp	r4, r5
 8007a92:	d101      	bne.n	8007a98 <__sfputs_r+0x12>
 8007a94:	2000      	movs	r0, #0
 8007a96:	e007      	b.n	8007aa8 <__sfputs_r+0x22>
 8007a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a9c:	463a      	mov	r2, r7
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	f7ff ffda 	bl	8007a58 <__sfputc_r>
 8007aa4:	1c43      	adds	r3, r0, #1
 8007aa6:	d1f3      	bne.n	8007a90 <__sfputs_r+0xa>
 8007aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007aac <_vfiprintf_r>:
 8007aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab0:	460d      	mov	r5, r1
 8007ab2:	b09d      	sub	sp, #116	; 0x74
 8007ab4:	4614      	mov	r4, r2
 8007ab6:	4698      	mov	r8, r3
 8007ab8:	4606      	mov	r6, r0
 8007aba:	b118      	cbz	r0, 8007ac4 <_vfiprintf_r+0x18>
 8007abc:	6983      	ldr	r3, [r0, #24]
 8007abe:	b90b      	cbnz	r3, 8007ac4 <_vfiprintf_r+0x18>
 8007ac0:	f000 fb14 	bl	80080ec <__sinit>
 8007ac4:	4b89      	ldr	r3, [pc, #548]	; (8007cec <_vfiprintf_r+0x240>)
 8007ac6:	429d      	cmp	r5, r3
 8007ac8:	d11b      	bne.n	8007b02 <_vfiprintf_r+0x56>
 8007aca:	6875      	ldr	r5, [r6, #4]
 8007acc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ace:	07d9      	lsls	r1, r3, #31
 8007ad0:	d405      	bmi.n	8007ade <_vfiprintf_r+0x32>
 8007ad2:	89ab      	ldrh	r3, [r5, #12]
 8007ad4:	059a      	lsls	r2, r3, #22
 8007ad6:	d402      	bmi.n	8007ade <_vfiprintf_r+0x32>
 8007ad8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ada:	f7ff ff60 	bl	800799e <__retarget_lock_acquire_recursive>
 8007ade:	89ab      	ldrh	r3, [r5, #12]
 8007ae0:	071b      	lsls	r3, r3, #28
 8007ae2:	d501      	bpl.n	8007ae8 <_vfiprintf_r+0x3c>
 8007ae4:	692b      	ldr	r3, [r5, #16]
 8007ae6:	b9eb      	cbnz	r3, 8007b24 <_vfiprintf_r+0x78>
 8007ae8:	4629      	mov	r1, r5
 8007aea:	4630      	mov	r0, r6
 8007aec:	f000 f96e 	bl	8007dcc <__swsetup_r>
 8007af0:	b1c0      	cbz	r0, 8007b24 <_vfiprintf_r+0x78>
 8007af2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007af4:	07dc      	lsls	r4, r3, #31
 8007af6:	d50e      	bpl.n	8007b16 <_vfiprintf_r+0x6a>
 8007af8:	f04f 30ff 	mov.w	r0, #4294967295
 8007afc:	b01d      	add	sp, #116	; 0x74
 8007afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b02:	4b7b      	ldr	r3, [pc, #492]	; (8007cf0 <_vfiprintf_r+0x244>)
 8007b04:	429d      	cmp	r5, r3
 8007b06:	d101      	bne.n	8007b0c <_vfiprintf_r+0x60>
 8007b08:	68b5      	ldr	r5, [r6, #8]
 8007b0a:	e7df      	b.n	8007acc <_vfiprintf_r+0x20>
 8007b0c:	4b79      	ldr	r3, [pc, #484]	; (8007cf4 <_vfiprintf_r+0x248>)
 8007b0e:	429d      	cmp	r5, r3
 8007b10:	bf08      	it	eq
 8007b12:	68f5      	ldreq	r5, [r6, #12]
 8007b14:	e7da      	b.n	8007acc <_vfiprintf_r+0x20>
 8007b16:	89ab      	ldrh	r3, [r5, #12]
 8007b18:	0598      	lsls	r0, r3, #22
 8007b1a:	d4ed      	bmi.n	8007af8 <_vfiprintf_r+0x4c>
 8007b1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b1e:	f7ff ff3f 	bl	80079a0 <__retarget_lock_release_recursive>
 8007b22:	e7e9      	b.n	8007af8 <_vfiprintf_r+0x4c>
 8007b24:	2300      	movs	r3, #0
 8007b26:	9309      	str	r3, [sp, #36]	; 0x24
 8007b28:	2320      	movs	r3, #32
 8007b2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b32:	2330      	movs	r3, #48	; 0x30
 8007b34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007cf8 <_vfiprintf_r+0x24c>
 8007b38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b3c:	f04f 0901 	mov.w	r9, #1
 8007b40:	4623      	mov	r3, r4
 8007b42:	469a      	mov	sl, r3
 8007b44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b48:	b10a      	cbz	r2, 8007b4e <_vfiprintf_r+0xa2>
 8007b4a:	2a25      	cmp	r2, #37	; 0x25
 8007b4c:	d1f9      	bne.n	8007b42 <_vfiprintf_r+0x96>
 8007b4e:	ebba 0b04 	subs.w	fp, sl, r4
 8007b52:	d00b      	beq.n	8007b6c <_vfiprintf_r+0xc0>
 8007b54:	465b      	mov	r3, fp
 8007b56:	4622      	mov	r2, r4
 8007b58:	4629      	mov	r1, r5
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	f7ff ff93 	bl	8007a86 <__sfputs_r>
 8007b60:	3001      	adds	r0, #1
 8007b62:	f000 80aa 	beq.w	8007cba <_vfiprintf_r+0x20e>
 8007b66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b68:	445a      	add	r2, fp
 8007b6a:	9209      	str	r2, [sp, #36]	; 0x24
 8007b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 80a2 	beq.w	8007cba <_vfiprintf_r+0x20e>
 8007b76:	2300      	movs	r3, #0
 8007b78:	f04f 32ff 	mov.w	r2, #4294967295
 8007b7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b80:	f10a 0a01 	add.w	sl, sl, #1
 8007b84:	9304      	str	r3, [sp, #16]
 8007b86:	9307      	str	r3, [sp, #28]
 8007b88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b8c:	931a      	str	r3, [sp, #104]	; 0x68
 8007b8e:	4654      	mov	r4, sl
 8007b90:	2205      	movs	r2, #5
 8007b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b96:	4858      	ldr	r0, [pc, #352]	; (8007cf8 <_vfiprintf_r+0x24c>)
 8007b98:	f7f8 fb22 	bl	80001e0 <memchr>
 8007b9c:	9a04      	ldr	r2, [sp, #16]
 8007b9e:	b9d8      	cbnz	r0, 8007bd8 <_vfiprintf_r+0x12c>
 8007ba0:	06d1      	lsls	r1, r2, #27
 8007ba2:	bf44      	itt	mi
 8007ba4:	2320      	movmi	r3, #32
 8007ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007baa:	0713      	lsls	r3, r2, #28
 8007bac:	bf44      	itt	mi
 8007bae:	232b      	movmi	r3, #43	; 0x2b
 8007bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8007bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8007bba:	d015      	beq.n	8007be8 <_vfiprintf_r+0x13c>
 8007bbc:	9a07      	ldr	r2, [sp, #28]
 8007bbe:	4654      	mov	r4, sl
 8007bc0:	2000      	movs	r0, #0
 8007bc2:	f04f 0c0a 	mov.w	ip, #10
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bcc:	3b30      	subs	r3, #48	; 0x30
 8007bce:	2b09      	cmp	r3, #9
 8007bd0:	d94e      	bls.n	8007c70 <_vfiprintf_r+0x1c4>
 8007bd2:	b1b0      	cbz	r0, 8007c02 <_vfiprintf_r+0x156>
 8007bd4:	9207      	str	r2, [sp, #28]
 8007bd6:	e014      	b.n	8007c02 <_vfiprintf_r+0x156>
 8007bd8:	eba0 0308 	sub.w	r3, r0, r8
 8007bdc:	fa09 f303 	lsl.w	r3, r9, r3
 8007be0:	4313      	orrs	r3, r2
 8007be2:	9304      	str	r3, [sp, #16]
 8007be4:	46a2      	mov	sl, r4
 8007be6:	e7d2      	b.n	8007b8e <_vfiprintf_r+0xe2>
 8007be8:	9b03      	ldr	r3, [sp, #12]
 8007bea:	1d19      	adds	r1, r3, #4
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	9103      	str	r1, [sp, #12]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	bfbb      	ittet	lt
 8007bf4:	425b      	neglt	r3, r3
 8007bf6:	f042 0202 	orrlt.w	r2, r2, #2
 8007bfa:	9307      	strge	r3, [sp, #28]
 8007bfc:	9307      	strlt	r3, [sp, #28]
 8007bfe:	bfb8      	it	lt
 8007c00:	9204      	strlt	r2, [sp, #16]
 8007c02:	7823      	ldrb	r3, [r4, #0]
 8007c04:	2b2e      	cmp	r3, #46	; 0x2e
 8007c06:	d10c      	bne.n	8007c22 <_vfiprintf_r+0x176>
 8007c08:	7863      	ldrb	r3, [r4, #1]
 8007c0a:	2b2a      	cmp	r3, #42	; 0x2a
 8007c0c:	d135      	bne.n	8007c7a <_vfiprintf_r+0x1ce>
 8007c0e:	9b03      	ldr	r3, [sp, #12]
 8007c10:	1d1a      	adds	r2, r3, #4
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	9203      	str	r2, [sp, #12]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	bfb8      	it	lt
 8007c1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c1e:	3402      	adds	r4, #2
 8007c20:	9305      	str	r3, [sp, #20]
 8007c22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007d08 <_vfiprintf_r+0x25c>
 8007c26:	7821      	ldrb	r1, [r4, #0]
 8007c28:	2203      	movs	r2, #3
 8007c2a:	4650      	mov	r0, sl
 8007c2c:	f7f8 fad8 	bl	80001e0 <memchr>
 8007c30:	b140      	cbz	r0, 8007c44 <_vfiprintf_r+0x198>
 8007c32:	2340      	movs	r3, #64	; 0x40
 8007c34:	eba0 000a 	sub.w	r0, r0, sl
 8007c38:	fa03 f000 	lsl.w	r0, r3, r0
 8007c3c:	9b04      	ldr	r3, [sp, #16]
 8007c3e:	4303      	orrs	r3, r0
 8007c40:	3401      	adds	r4, #1
 8007c42:	9304      	str	r3, [sp, #16]
 8007c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c48:	482c      	ldr	r0, [pc, #176]	; (8007cfc <_vfiprintf_r+0x250>)
 8007c4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c4e:	2206      	movs	r2, #6
 8007c50:	f7f8 fac6 	bl	80001e0 <memchr>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d03f      	beq.n	8007cd8 <_vfiprintf_r+0x22c>
 8007c58:	4b29      	ldr	r3, [pc, #164]	; (8007d00 <_vfiprintf_r+0x254>)
 8007c5a:	bb1b      	cbnz	r3, 8007ca4 <_vfiprintf_r+0x1f8>
 8007c5c:	9b03      	ldr	r3, [sp, #12]
 8007c5e:	3307      	adds	r3, #7
 8007c60:	f023 0307 	bic.w	r3, r3, #7
 8007c64:	3308      	adds	r3, #8
 8007c66:	9303      	str	r3, [sp, #12]
 8007c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c6a:	443b      	add	r3, r7
 8007c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c6e:	e767      	b.n	8007b40 <_vfiprintf_r+0x94>
 8007c70:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c74:	460c      	mov	r4, r1
 8007c76:	2001      	movs	r0, #1
 8007c78:	e7a5      	b.n	8007bc6 <_vfiprintf_r+0x11a>
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	3401      	adds	r4, #1
 8007c7e:	9305      	str	r3, [sp, #20]
 8007c80:	4619      	mov	r1, r3
 8007c82:	f04f 0c0a 	mov.w	ip, #10
 8007c86:	4620      	mov	r0, r4
 8007c88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c8c:	3a30      	subs	r2, #48	; 0x30
 8007c8e:	2a09      	cmp	r2, #9
 8007c90:	d903      	bls.n	8007c9a <_vfiprintf_r+0x1ee>
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d0c5      	beq.n	8007c22 <_vfiprintf_r+0x176>
 8007c96:	9105      	str	r1, [sp, #20]
 8007c98:	e7c3      	b.n	8007c22 <_vfiprintf_r+0x176>
 8007c9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e7f0      	b.n	8007c86 <_vfiprintf_r+0x1da>
 8007ca4:	ab03      	add	r3, sp, #12
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	462a      	mov	r2, r5
 8007caa:	4b16      	ldr	r3, [pc, #88]	; (8007d04 <_vfiprintf_r+0x258>)
 8007cac:	a904      	add	r1, sp, #16
 8007cae:	4630      	mov	r0, r6
 8007cb0:	f7fd fe26 	bl	8005900 <_printf_float>
 8007cb4:	4607      	mov	r7, r0
 8007cb6:	1c78      	adds	r0, r7, #1
 8007cb8:	d1d6      	bne.n	8007c68 <_vfiprintf_r+0x1bc>
 8007cba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cbc:	07d9      	lsls	r1, r3, #31
 8007cbe:	d405      	bmi.n	8007ccc <_vfiprintf_r+0x220>
 8007cc0:	89ab      	ldrh	r3, [r5, #12]
 8007cc2:	059a      	lsls	r2, r3, #22
 8007cc4:	d402      	bmi.n	8007ccc <_vfiprintf_r+0x220>
 8007cc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cc8:	f7ff fe6a 	bl	80079a0 <__retarget_lock_release_recursive>
 8007ccc:	89ab      	ldrh	r3, [r5, #12]
 8007cce:	065b      	lsls	r3, r3, #25
 8007cd0:	f53f af12 	bmi.w	8007af8 <_vfiprintf_r+0x4c>
 8007cd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007cd6:	e711      	b.n	8007afc <_vfiprintf_r+0x50>
 8007cd8:	ab03      	add	r3, sp, #12
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	462a      	mov	r2, r5
 8007cde:	4b09      	ldr	r3, [pc, #36]	; (8007d04 <_vfiprintf_r+0x258>)
 8007ce0:	a904      	add	r1, sp, #16
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	f7fe f8b0 	bl	8005e48 <_printf_i>
 8007ce8:	e7e4      	b.n	8007cb4 <_vfiprintf_r+0x208>
 8007cea:	bf00      	nop
 8007cec:	08009ce4 	.word	0x08009ce4
 8007cf0:	08009d04 	.word	0x08009d04
 8007cf4:	08009cc4 	.word	0x08009cc4
 8007cf8:	08009c6c 	.word	0x08009c6c
 8007cfc:	08009c76 	.word	0x08009c76
 8007d00:	08005901 	.word	0x08005901
 8007d04:	08007a87 	.word	0x08007a87
 8007d08:	08009c72 	.word	0x08009c72

08007d0c <__swbuf_r>:
 8007d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0e:	460e      	mov	r6, r1
 8007d10:	4614      	mov	r4, r2
 8007d12:	4605      	mov	r5, r0
 8007d14:	b118      	cbz	r0, 8007d1e <__swbuf_r+0x12>
 8007d16:	6983      	ldr	r3, [r0, #24]
 8007d18:	b90b      	cbnz	r3, 8007d1e <__swbuf_r+0x12>
 8007d1a:	f000 f9e7 	bl	80080ec <__sinit>
 8007d1e:	4b21      	ldr	r3, [pc, #132]	; (8007da4 <__swbuf_r+0x98>)
 8007d20:	429c      	cmp	r4, r3
 8007d22:	d12b      	bne.n	8007d7c <__swbuf_r+0x70>
 8007d24:	686c      	ldr	r4, [r5, #4]
 8007d26:	69a3      	ldr	r3, [r4, #24]
 8007d28:	60a3      	str	r3, [r4, #8]
 8007d2a:	89a3      	ldrh	r3, [r4, #12]
 8007d2c:	071a      	lsls	r2, r3, #28
 8007d2e:	d52f      	bpl.n	8007d90 <__swbuf_r+0x84>
 8007d30:	6923      	ldr	r3, [r4, #16]
 8007d32:	b36b      	cbz	r3, 8007d90 <__swbuf_r+0x84>
 8007d34:	6923      	ldr	r3, [r4, #16]
 8007d36:	6820      	ldr	r0, [r4, #0]
 8007d38:	1ac0      	subs	r0, r0, r3
 8007d3a:	6963      	ldr	r3, [r4, #20]
 8007d3c:	b2f6      	uxtb	r6, r6
 8007d3e:	4283      	cmp	r3, r0
 8007d40:	4637      	mov	r7, r6
 8007d42:	dc04      	bgt.n	8007d4e <__swbuf_r+0x42>
 8007d44:	4621      	mov	r1, r4
 8007d46:	4628      	mov	r0, r5
 8007d48:	f000 f93c 	bl	8007fc4 <_fflush_r>
 8007d4c:	bb30      	cbnz	r0, 8007d9c <__swbuf_r+0x90>
 8007d4e:	68a3      	ldr	r3, [r4, #8]
 8007d50:	3b01      	subs	r3, #1
 8007d52:	60a3      	str	r3, [r4, #8]
 8007d54:	6823      	ldr	r3, [r4, #0]
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	6022      	str	r2, [r4, #0]
 8007d5a:	701e      	strb	r6, [r3, #0]
 8007d5c:	6963      	ldr	r3, [r4, #20]
 8007d5e:	3001      	adds	r0, #1
 8007d60:	4283      	cmp	r3, r0
 8007d62:	d004      	beq.n	8007d6e <__swbuf_r+0x62>
 8007d64:	89a3      	ldrh	r3, [r4, #12]
 8007d66:	07db      	lsls	r3, r3, #31
 8007d68:	d506      	bpl.n	8007d78 <__swbuf_r+0x6c>
 8007d6a:	2e0a      	cmp	r6, #10
 8007d6c:	d104      	bne.n	8007d78 <__swbuf_r+0x6c>
 8007d6e:	4621      	mov	r1, r4
 8007d70:	4628      	mov	r0, r5
 8007d72:	f000 f927 	bl	8007fc4 <_fflush_r>
 8007d76:	b988      	cbnz	r0, 8007d9c <__swbuf_r+0x90>
 8007d78:	4638      	mov	r0, r7
 8007d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d7c:	4b0a      	ldr	r3, [pc, #40]	; (8007da8 <__swbuf_r+0x9c>)
 8007d7e:	429c      	cmp	r4, r3
 8007d80:	d101      	bne.n	8007d86 <__swbuf_r+0x7a>
 8007d82:	68ac      	ldr	r4, [r5, #8]
 8007d84:	e7cf      	b.n	8007d26 <__swbuf_r+0x1a>
 8007d86:	4b09      	ldr	r3, [pc, #36]	; (8007dac <__swbuf_r+0xa0>)
 8007d88:	429c      	cmp	r4, r3
 8007d8a:	bf08      	it	eq
 8007d8c:	68ec      	ldreq	r4, [r5, #12]
 8007d8e:	e7ca      	b.n	8007d26 <__swbuf_r+0x1a>
 8007d90:	4621      	mov	r1, r4
 8007d92:	4628      	mov	r0, r5
 8007d94:	f000 f81a 	bl	8007dcc <__swsetup_r>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d0cb      	beq.n	8007d34 <__swbuf_r+0x28>
 8007d9c:	f04f 37ff 	mov.w	r7, #4294967295
 8007da0:	e7ea      	b.n	8007d78 <__swbuf_r+0x6c>
 8007da2:	bf00      	nop
 8007da4:	08009ce4 	.word	0x08009ce4
 8007da8:	08009d04 	.word	0x08009d04
 8007dac:	08009cc4 	.word	0x08009cc4

08007db0 <__ascii_wctomb>:
 8007db0:	b149      	cbz	r1, 8007dc6 <__ascii_wctomb+0x16>
 8007db2:	2aff      	cmp	r2, #255	; 0xff
 8007db4:	bf85      	ittet	hi
 8007db6:	238a      	movhi	r3, #138	; 0x8a
 8007db8:	6003      	strhi	r3, [r0, #0]
 8007dba:	700a      	strbls	r2, [r1, #0]
 8007dbc:	f04f 30ff 	movhi.w	r0, #4294967295
 8007dc0:	bf98      	it	ls
 8007dc2:	2001      	movls	r0, #1
 8007dc4:	4770      	bx	lr
 8007dc6:	4608      	mov	r0, r1
 8007dc8:	4770      	bx	lr
	...

08007dcc <__swsetup_r>:
 8007dcc:	4b32      	ldr	r3, [pc, #200]	; (8007e98 <__swsetup_r+0xcc>)
 8007dce:	b570      	push	{r4, r5, r6, lr}
 8007dd0:	681d      	ldr	r5, [r3, #0]
 8007dd2:	4606      	mov	r6, r0
 8007dd4:	460c      	mov	r4, r1
 8007dd6:	b125      	cbz	r5, 8007de2 <__swsetup_r+0x16>
 8007dd8:	69ab      	ldr	r3, [r5, #24]
 8007dda:	b913      	cbnz	r3, 8007de2 <__swsetup_r+0x16>
 8007ddc:	4628      	mov	r0, r5
 8007dde:	f000 f985 	bl	80080ec <__sinit>
 8007de2:	4b2e      	ldr	r3, [pc, #184]	; (8007e9c <__swsetup_r+0xd0>)
 8007de4:	429c      	cmp	r4, r3
 8007de6:	d10f      	bne.n	8007e08 <__swsetup_r+0x3c>
 8007de8:	686c      	ldr	r4, [r5, #4]
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007df0:	0719      	lsls	r1, r3, #28
 8007df2:	d42c      	bmi.n	8007e4e <__swsetup_r+0x82>
 8007df4:	06dd      	lsls	r5, r3, #27
 8007df6:	d411      	bmi.n	8007e1c <__swsetup_r+0x50>
 8007df8:	2309      	movs	r3, #9
 8007dfa:	6033      	str	r3, [r6, #0]
 8007dfc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e00:	81a3      	strh	r3, [r4, #12]
 8007e02:	f04f 30ff 	mov.w	r0, #4294967295
 8007e06:	e03e      	b.n	8007e86 <__swsetup_r+0xba>
 8007e08:	4b25      	ldr	r3, [pc, #148]	; (8007ea0 <__swsetup_r+0xd4>)
 8007e0a:	429c      	cmp	r4, r3
 8007e0c:	d101      	bne.n	8007e12 <__swsetup_r+0x46>
 8007e0e:	68ac      	ldr	r4, [r5, #8]
 8007e10:	e7eb      	b.n	8007dea <__swsetup_r+0x1e>
 8007e12:	4b24      	ldr	r3, [pc, #144]	; (8007ea4 <__swsetup_r+0xd8>)
 8007e14:	429c      	cmp	r4, r3
 8007e16:	bf08      	it	eq
 8007e18:	68ec      	ldreq	r4, [r5, #12]
 8007e1a:	e7e6      	b.n	8007dea <__swsetup_r+0x1e>
 8007e1c:	0758      	lsls	r0, r3, #29
 8007e1e:	d512      	bpl.n	8007e46 <__swsetup_r+0x7a>
 8007e20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e22:	b141      	cbz	r1, 8007e36 <__swsetup_r+0x6a>
 8007e24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e28:	4299      	cmp	r1, r3
 8007e2a:	d002      	beq.n	8007e32 <__swsetup_r+0x66>
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	f7fd fbe7 	bl	8005600 <_free_r>
 8007e32:	2300      	movs	r3, #0
 8007e34:	6363      	str	r3, [r4, #52]	; 0x34
 8007e36:	89a3      	ldrh	r3, [r4, #12]
 8007e38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e3c:	81a3      	strh	r3, [r4, #12]
 8007e3e:	2300      	movs	r3, #0
 8007e40:	6063      	str	r3, [r4, #4]
 8007e42:	6923      	ldr	r3, [r4, #16]
 8007e44:	6023      	str	r3, [r4, #0]
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	f043 0308 	orr.w	r3, r3, #8
 8007e4c:	81a3      	strh	r3, [r4, #12]
 8007e4e:	6923      	ldr	r3, [r4, #16]
 8007e50:	b94b      	cbnz	r3, 8007e66 <__swsetup_r+0x9a>
 8007e52:	89a3      	ldrh	r3, [r4, #12]
 8007e54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e5c:	d003      	beq.n	8007e66 <__swsetup_r+0x9a>
 8007e5e:	4621      	mov	r1, r4
 8007e60:	4630      	mov	r0, r6
 8007e62:	f000 fa05 	bl	8008270 <__smakebuf_r>
 8007e66:	89a0      	ldrh	r0, [r4, #12]
 8007e68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e6c:	f010 0301 	ands.w	r3, r0, #1
 8007e70:	d00a      	beq.n	8007e88 <__swsetup_r+0xbc>
 8007e72:	2300      	movs	r3, #0
 8007e74:	60a3      	str	r3, [r4, #8]
 8007e76:	6963      	ldr	r3, [r4, #20]
 8007e78:	425b      	negs	r3, r3
 8007e7a:	61a3      	str	r3, [r4, #24]
 8007e7c:	6923      	ldr	r3, [r4, #16]
 8007e7e:	b943      	cbnz	r3, 8007e92 <__swsetup_r+0xc6>
 8007e80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e84:	d1ba      	bne.n	8007dfc <__swsetup_r+0x30>
 8007e86:	bd70      	pop	{r4, r5, r6, pc}
 8007e88:	0781      	lsls	r1, r0, #30
 8007e8a:	bf58      	it	pl
 8007e8c:	6963      	ldrpl	r3, [r4, #20]
 8007e8e:	60a3      	str	r3, [r4, #8]
 8007e90:	e7f4      	b.n	8007e7c <__swsetup_r+0xb0>
 8007e92:	2000      	movs	r0, #0
 8007e94:	e7f7      	b.n	8007e86 <__swsetup_r+0xba>
 8007e96:	bf00      	nop
 8007e98:	20000020 	.word	0x20000020
 8007e9c:	08009ce4 	.word	0x08009ce4
 8007ea0:	08009d04 	.word	0x08009d04
 8007ea4:	08009cc4 	.word	0x08009cc4

08007ea8 <abort>:
 8007ea8:	b508      	push	{r3, lr}
 8007eaa:	2006      	movs	r0, #6
 8007eac:	f000 fa50 	bl	8008350 <raise>
 8007eb0:	2001      	movs	r0, #1
 8007eb2:	f7f9 fc1f 	bl	80016f4 <_exit>
	...

08007eb8 <__sflush_r>:
 8007eb8:	898a      	ldrh	r2, [r1, #12]
 8007eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ebe:	4605      	mov	r5, r0
 8007ec0:	0710      	lsls	r0, r2, #28
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	d458      	bmi.n	8007f78 <__sflush_r+0xc0>
 8007ec6:	684b      	ldr	r3, [r1, #4]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	dc05      	bgt.n	8007ed8 <__sflush_r+0x20>
 8007ecc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	dc02      	bgt.n	8007ed8 <__sflush_r+0x20>
 8007ed2:	2000      	movs	r0, #0
 8007ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ed8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007eda:	2e00      	cmp	r6, #0
 8007edc:	d0f9      	beq.n	8007ed2 <__sflush_r+0x1a>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ee4:	682f      	ldr	r7, [r5, #0]
 8007ee6:	602b      	str	r3, [r5, #0]
 8007ee8:	d032      	beq.n	8007f50 <__sflush_r+0x98>
 8007eea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007eec:	89a3      	ldrh	r3, [r4, #12]
 8007eee:	075a      	lsls	r2, r3, #29
 8007ef0:	d505      	bpl.n	8007efe <__sflush_r+0x46>
 8007ef2:	6863      	ldr	r3, [r4, #4]
 8007ef4:	1ac0      	subs	r0, r0, r3
 8007ef6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ef8:	b10b      	cbz	r3, 8007efe <__sflush_r+0x46>
 8007efa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007efc:	1ac0      	subs	r0, r0, r3
 8007efe:	2300      	movs	r3, #0
 8007f00:	4602      	mov	r2, r0
 8007f02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f04:	6a21      	ldr	r1, [r4, #32]
 8007f06:	4628      	mov	r0, r5
 8007f08:	47b0      	blx	r6
 8007f0a:	1c43      	adds	r3, r0, #1
 8007f0c:	89a3      	ldrh	r3, [r4, #12]
 8007f0e:	d106      	bne.n	8007f1e <__sflush_r+0x66>
 8007f10:	6829      	ldr	r1, [r5, #0]
 8007f12:	291d      	cmp	r1, #29
 8007f14:	d82c      	bhi.n	8007f70 <__sflush_r+0xb8>
 8007f16:	4a2a      	ldr	r2, [pc, #168]	; (8007fc0 <__sflush_r+0x108>)
 8007f18:	40ca      	lsrs	r2, r1
 8007f1a:	07d6      	lsls	r6, r2, #31
 8007f1c:	d528      	bpl.n	8007f70 <__sflush_r+0xb8>
 8007f1e:	2200      	movs	r2, #0
 8007f20:	6062      	str	r2, [r4, #4]
 8007f22:	04d9      	lsls	r1, r3, #19
 8007f24:	6922      	ldr	r2, [r4, #16]
 8007f26:	6022      	str	r2, [r4, #0]
 8007f28:	d504      	bpl.n	8007f34 <__sflush_r+0x7c>
 8007f2a:	1c42      	adds	r2, r0, #1
 8007f2c:	d101      	bne.n	8007f32 <__sflush_r+0x7a>
 8007f2e:	682b      	ldr	r3, [r5, #0]
 8007f30:	b903      	cbnz	r3, 8007f34 <__sflush_r+0x7c>
 8007f32:	6560      	str	r0, [r4, #84]	; 0x54
 8007f34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f36:	602f      	str	r7, [r5, #0]
 8007f38:	2900      	cmp	r1, #0
 8007f3a:	d0ca      	beq.n	8007ed2 <__sflush_r+0x1a>
 8007f3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f40:	4299      	cmp	r1, r3
 8007f42:	d002      	beq.n	8007f4a <__sflush_r+0x92>
 8007f44:	4628      	mov	r0, r5
 8007f46:	f7fd fb5b 	bl	8005600 <_free_r>
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	6360      	str	r0, [r4, #52]	; 0x34
 8007f4e:	e7c1      	b.n	8007ed4 <__sflush_r+0x1c>
 8007f50:	6a21      	ldr	r1, [r4, #32]
 8007f52:	2301      	movs	r3, #1
 8007f54:	4628      	mov	r0, r5
 8007f56:	47b0      	blx	r6
 8007f58:	1c41      	adds	r1, r0, #1
 8007f5a:	d1c7      	bne.n	8007eec <__sflush_r+0x34>
 8007f5c:	682b      	ldr	r3, [r5, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d0c4      	beq.n	8007eec <__sflush_r+0x34>
 8007f62:	2b1d      	cmp	r3, #29
 8007f64:	d001      	beq.n	8007f6a <__sflush_r+0xb2>
 8007f66:	2b16      	cmp	r3, #22
 8007f68:	d101      	bne.n	8007f6e <__sflush_r+0xb6>
 8007f6a:	602f      	str	r7, [r5, #0]
 8007f6c:	e7b1      	b.n	8007ed2 <__sflush_r+0x1a>
 8007f6e:	89a3      	ldrh	r3, [r4, #12]
 8007f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f74:	81a3      	strh	r3, [r4, #12]
 8007f76:	e7ad      	b.n	8007ed4 <__sflush_r+0x1c>
 8007f78:	690f      	ldr	r7, [r1, #16]
 8007f7a:	2f00      	cmp	r7, #0
 8007f7c:	d0a9      	beq.n	8007ed2 <__sflush_r+0x1a>
 8007f7e:	0793      	lsls	r3, r2, #30
 8007f80:	680e      	ldr	r6, [r1, #0]
 8007f82:	bf08      	it	eq
 8007f84:	694b      	ldreq	r3, [r1, #20]
 8007f86:	600f      	str	r7, [r1, #0]
 8007f88:	bf18      	it	ne
 8007f8a:	2300      	movne	r3, #0
 8007f8c:	eba6 0807 	sub.w	r8, r6, r7
 8007f90:	608b      	str	r3, [r1, #8]
 8007f92:	f1b8 0f00 	cmp.w	r8, #0
 8007f96:	dd9c      	ble.n	8007ed2 <__sflush_r+0x1a>
 8007f98:	6a21      	ldr	r1, [r4, #32]
 8007f9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f9c:	4643      	mov	r3, r8
 8007f9e:	463a      	mov	r2, r7
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	47b0      	blx	r6
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	dc06      	bgt.n	8007fb6 <__sflush_r+0xfe>
 8007fa8:	89a3      	ldrh	r3, [r4, #12]
 8007faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fae:	81a3      	strh	r3, [r4, #12]
 8007fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb4:	e78e      	b.n	8007ed4 <__sflush_r+0x1c>
 8007fb6:	4407      	add	r7, r0
 8007fb8:	eba8 0800 	sub.w	r8, r8, r0
 8007fbc:	e7e9      	b.n	8007f92 <__sflush_r+0xda>
 8007fbe:	bf00      	nop
 8007fc0:	20400001 	.word	0x20400001

08007fc4 <_fflush_r>:
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	690b      	ldr	r3, [r1, #16]
 8007fc8:	4605      	mov	r5, r0
 8007fca:	460c      	mov	r4, r1
 8007fcc:	b913      	cbnz	r3, 8007fd4 <_fflush_r+0x10>
 8007fce:	2500      	movs	r5, #0
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	bd38      	pop	{r3, r4, r5, pc}
 8007fd4:	b118      	cbz	r0, 8007fde <_fflush_r+0x1a>
 8007fd6:	6983      	ldr	r3, [r0, #24]
 8007fd8:	b90b      	cbnz	r3, 8007fde <_fflush_r+0x1a>
 8007fda:	f000 f887 	bl	80080ec <__sinit>
 8007fde:	4b14      	ldr	r3, [pc, #80]	; (8008030 <_fflush_r+0x6c>)
 8007fe0:	429c      	cmp	r4, r3
 8007fe2:	d11b      	bne.n	800801c <_fflush_r+0x58>
 8007fe4:	686c      	ldr	r4, [r5, #4]
 8007fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d0ef      	beq.n	8007fce <_fflush_r+0xa>
 8007fee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ff0:	07d0      	lsls	r0, r2, #31
 8007ff2:	d404      	bmi.n	8007ffe <_fflush_r+0x3a>
 8007ff4:	0599      	lsls	r1, r3, #22
 8007ff6:	d402      	bmi.n	8007ffe <_fflush_r+0x3a>
 8007ff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ffa:	f7ff fcd0 	bl	800799e <__retarget_lock_acquire_recursive>
 8007ffe:	4628      	mov	r0, r5
 8008000:	4621      	mov	r1, r4
 8008002:	f7ff ff59 	bl	8007eb8 <__sflush_r>
 8008006:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008008:	07da      	lsls	r2, r3, #31
 800800a:	4605      	mov	r5, r0
 800800c:	d4e0      	bmi.n	8007fd0 <_fflush_r+0xc>
 800800e:	89a3      	ldrh	r3, [r4, #12]
 8008010:	059b      	lsls	r3, r3, #22
 8008012:	d4dd      	bmi.n	8007fd0 <_fflush_r+0xc>
 8008014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008016:	f7ff fcc3 	bl	80079a0 <__retarget_lock_release_recursive>
 800801a:	e7d9      	b.n	8007fd0 <_fflush_r+0xc>
 800801c:	4b05      	ldr	r3, [pc, #20]	; (8008034 <_fflush_r+0x70>)
 800801e:	429c      	cmp	r4, r3
 8008020:	d101      	bne.n	8008026 <_fflush_r+0x62>
 8008022:	68ac      	ldr	r4, [r5, #8]
 8008024:	e7df      	b.n	8007fe6 <_fflush_r+0x22>
 8008026:	4b04      	ldr	r3, [pc, #16]	; (8008038 <_fflush_r+0x74>)
 8008028:	429c      	cmp	r4, r3
 800802a:	bf08      	it	eq
 800802c:	68ec      	ldreq	r4, [r5, #12]
 800802e:	e7da      	b.n	8007fe6 <_fflush_r+0x22>
 8008030:	08009ce4 	.word	0x08009ce4
 8008034:	08009d04 	.word	0x08009d04
 8008038:	08009cc4 	.word	0x08009cc4

0800803c <std>:
 800803c:	2300      	movs	r3, #0
 800803e:	b510      	push	{r4, lr}
 8008040:	4604      	mov	r4, r0
 8008042:	e9c0 3300 	strd	r3, r3, [r0]
 8008046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800804a:	6083      	str	r3, [r0, #8]
 800804c:	8181      	strh	r1, [r0, #12]
 800804e:	6643      	str	r3, [r0, #100]	; 0x64
 8008050:	81c2      	strh	r2, [r0, #14]
 8008052:	6183      	str	r3, [r0, #24]
 8008054:	4619      	mov	r1, r3
 8008056:	2208      	movs	r2, #8
 8008058:	305c      	adds	r0, #92	; 0x5c
 800805a:	f7fd fab3 	bl	80055c4 <memset>
 800805e:	4b05      	ldr	r3, [pc, #20]	; (8008074 <std+0x38>)
 8008060:	6263      	str	r3, [r4, #36]	; 0x24
 8008062:	4b05      	ldr	r3, [pc, #20]	; (8008078 <std+0x3c>)
 8008064:	62a3      	str	r3, [r4, #40]	; 0x28
 8008066:	4b05      	ldr	r3, [pc, #20]	; (800807c <std+0x40>)
 8008068:	62e3      	str	r3, [r4, #44]	; 0x2c
 800806a:	4b05      	ldr	r3, [pc, #20]	; (8008080 <std+0x44>)
 800806c:	6224      	str	r4, [r4, #32]
 800806e:	6323      	str	r3, [r4, #48]	; 0x30
 8008070:	bd10      	pop	{r4, pc}
 8008072:	bf00      	nop
 8008074:	08008389 	.word	0x08008389
 8008078:	080083ab 	.word	0x080083ab
 800807c:	080083e3 	.word	0x080083e3
 8008080:	08008407 	.word	0x08008407

08008084 <_cleanup_r>:
 8008084:	4901      	ldr	r1, [pc, #4]	; (800808c <_cleanup_r+0x8>)
 8008086:	f000 b8af 	b.w	80081e8 <_fwalk_reent>
 800808a:	bf00      	nop
 800808c:	08007fc5 	.word	0x08007fc5

08008090 <__sfmoreglue>:
 8008090:	b570      	push	{r4, r5, r6, lr}
 8008092:	2268      	movs	r2, #104	; 0x68
 8008094:	1e4d      	subs	r5, r1, #1
 8008096:	4355      	muls	r5, r2
 8008098:	460e      	mov	r6, r1
 800809a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800809e:	f7fd fb1b 	bl	80056d8 <_malloc_r>
 80080a2:	4604      	mov	r4, r0
 80080a4:	b140      	cbz	r0, 80080b8 <__sfmoreglue+0x28>
 80080a6:	2100      	movs	r1, #0
 80080a8:	e9c0 1600 	strd	r1, r6, [r0]
 80080ac:	300c      	adds	r0, #12
 80080ae:	60a0      	str	r0, [r4, #8]
 80080b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80080b4:	f7fd fa86 	bl	80055c4 <memset>
 80080b8:	4620      	mov	r0, r4
 80080ba:	bd70      	pop	{r4, r5, r6, pc}

080080bc <__sfp_lock_acquire>:
 80080bc:	4801      	ldr	r0, [pc, #4]	; (80080c4 <__sfp_lock_acquire+0x8>)
 80080be:	f7ff bc6e 	b.w	800799e <__retarget_lock_acquire_recursive>
 80080c2:	bf00      	nop
 80080c4:	20000445 	.word	0x20000445

080080c8 <__sfp_lock_release>:
 80080c8:	4801      	ldr	r0, [pc, #4]	; (80080d0 <__sfp_lock_release+0x8>)
 80080ca:	f7ff bc69 	b.w	80079a0 <__retarget_lock_release_recursive>
 80080ce:	bf00      	nop
 80080d0:	20000445 	.word	0x20000445

080080d4 <__sinit_lock_acquire>:
 80080d4:	4801      	ldr	r0, [pc, #4]	; (80080dc <__sinit_lock_acquire+0x8>)
 80080d6:	f7ff bc62 	b.w	800799e <__retarget_lock_acquire_recursive>
 80080da:	bf00      	nop
 80080dc:	20000446 	.word	0x20000446

080080e0 <__sinit_lock_release>:
 80080e0:	4801      	ldr	r0, [pc, #4]	; (80080e8 <__sinit_lock_release+0x8>)
 80080e2:	f7ff bc5d 	b.w	80079a0 <__retarget_lock_release_recursive>
 80080e6:	bf00      	nop
 80080e8:	20000446 	.word	0x20000446

080080ec <__sinit>:
 80080ec:	b510      	push	{r4, lr}
 80080ee:	4604      	mov	r4, r0
 80080f0:	f7ff fff0 	bl	80080d4 <__sinit_lock_acquire>
 80080f4:	69a3      	ldr	r3, [r4, #24]
 80080f6:	b11b      	cbz	r3, 8008100 <__sinit+0x14>
 80080f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080fc:	f7ff bff0 	b.w	80080e0 <__sinit_lock_release>
 8008100:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008104:	6523      	str	r3, [r4, #80]	; 0x50
 8008106:	4b13      	ldr	r3, [pc, #76]	; (8008154 <__sinit+0x68>)
 8008108:	4a13      	ldr	r2, [pc, #76]	; (8008158 <__sinit+0x6c>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	62a2      	str	r2, [r4, #40]	; 0x28
 800810e:	42a3      	cmp	r3, r4
 8008110:	bf04      	itt	eq
 8008112:	2301      	moveq	r3, #1
 8008114:	61a3      	streq	r3, [r4, #24]
 8008116:	4620      	mov	r0, r4
 8008118:	f000 f820 	bl	800815c <__sfp>
 800811c:	6060      	str	r0, [r4, #4]
 800811e:	4620      	mov	r0, r4
 8008120:	f000 f81c 	bl	800815c <__sfp>
 8008124:	60a0      	str	r0, [r4, #8]
 8008126:	4620      	mov	r0, r4
 8008128:	f000 f818 	bl	800815c <__sfp>
 800812c:	2200      	movs	r2, #0
 800812e:	60e0      	str	r0, [r4, #12]
 8008130:	2104      	movs	r1, #4
 8008132:	6860      	ldr	r0, [r4, #4]
 8008134:	f7ff ff82 	bl	800803c <std>
 8008138:	68a0      	ldr	r0, [r4, #8]
 800813a:	2201      	movs	r2, #1
 800813c:	2109      	movs	r1, #9
 800813e:	f7ff ff7d 	bl	800803c <std>
 8008142:	68e0      	ldr	r0, [r4, #12]
 8008144:	2202      	movs	r2, #2
 8008146:	2112      	movs	r1, #18
 8008148:	f7ff ff78 	bl	800803c <std>
 800814c:	2301      	movs	r3, #1
 800814e:	61a3      	str	r3, [r4, #24]
 8008150:	e7d2      	b.n	80080f8 <__sinit+0xc>
 8008152:	bf00      	nop
 8008154:	08009948 	.word	0x08009948
 8008158:	08008085 	.word	0x08008085

0800815c <__sfp>:
 800815c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815e:	4607      	mov	r7, r0
 8008160:	f7ff ffac 	bl	80080bc <__sfp_lock_acquire>
 8008164:	4b1e      	ldr	r3, [pc, #120]	; (80081e0 <__sfp+0x84>)
 8008166:	681e      	ldr	r6, [r3, #0]
 8008168:	69b3      	ldr	r3, [r6, #24]
 800816a:	b913      	cbnz	r3, 8008172 <__sfp+0x16>
 800816c:	4630      	mov	r0, r6
 800816e:	f7ff ffbd 	bl	80080ec <__sinit>
 8008172:	3648      	adds	r6, #72	; 0x48
 8008174:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008178:	3b01      	subs	r3, #1
 800817a:	d503      	bpl.n	8008184 <__sfp+0x28>
 800817c:	6833      	ldr	r3, [r6, #0]
 800817e:	b30b      	cbz	r3, 80081c4 <__sfp+0x68>
 8008180:	6836      	ldr	r6, [r6, #0]
 8008182:	e7f7      	b.n	8008174 <__sfp+0x18>
 8008184:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008188:	b9d5      	cbnz	r5, 80081c0 <__sfp+0x64>
 800818a:	4b16      	ldr	r3, [pc, #88]	; (80081e4 <__sfp+0x88>)
 800818c:	60e3      	str	r3, [r4, #12]
 800818e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008192:	6665      	str	r5, [r4, #100]	; 0x64
 8008194:	f7ff fc02 	bl	800799c <__retarget_lock_init_recursive>
 8008198:	f7ff ff96 	bl	80080c8 <__sfp_lock_release>
 800819c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80081a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80081a4:	6025      	str	r5, [r4, #0]
 80081a6:	61a5      	str	r5, [r4, #24]
 80081a8:	2208      	movs	r2, #8
 80081aa:	4629      	mov	r1, r5
 80081ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80081b0:	f7fd fa08 	bl	80055c4 <memset>
 80081b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80081b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80081bc:	4620      	mov	r0, r4
 80081be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081c0:	3468      	adds	r4, #104	; 0x68
 80081c2:	e7d9      	b.n	8008178 <__sfp+0x1c>
 80081c4:	2104      	movs	r1, #4
 80081c6:	4638      	mov	r0, r7
 80081c8:	f7ff ff62 	bl	8008090 <__sfmoreglue>
 80081cc:	4604      	mov	r4, r0
 80081ce:	6030      	str	r0, [r6, #0]
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d1d5      	bne.n	8008180 <__sfp+0x24>
 80081d4:	f7ff ff78 	bl	80080c8 <__sfp_lock_release>
 80081d8:	230c      	movs	r3, #12
 80081da:	603b      	str	r3, [r7, #0]
 80081dc:	e7ee      	b.n	80081bc <__sfp+0x60>
 80081de:	bf00      	nop
 80081e0:	08009948 	.word	0x08009948
 80081e4:	ffff0001 	.word	0xffff0001

080081e8 <_fwalk_reent>:
 80081e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081ec:	4606      	mov	r6, r0
 80081ee:	4688      	mov	r8, r1
 80081f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80081f4:	2700      	movs	r7, #0
 80081f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081fa:	f1b9 0901 	subs.w	r9, r9, #1
 80081fe:	d505      	bpl.n	800820c <_fwalk_reent+0x24>
 8008200:	6824      	ldr	r4, [r4, #0]
 8008202:	2c00      	cmp	r4, #0
 8008204:	d1f7      	bne.n	80081f6 <_fwalk_reent+0xe>
 8008206:	4638      	mov	r0, r7
 8008208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800820c:	89ab      	ldrh	r3, [r5, #12]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d907      	bls.n	8008222 <_fwalk_reent+0x3a>
 8008212:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008216:	3301      	adds	r3, #1
 8008218:	d003      	beq.n	8008222 <_fwalk_reent+0x3a>
 800821a:	4629      	mov	r1, r5
 800821c:	4630      	mov	r0, r6
 800821e:	47c0      	blx	r8
 8008220:	4307      	orrs	r7, r0
 8008222:	3568      	adds	r5, #104	; 0x68
 8008224:	e7e9      	b.n	80081fa <_fwalk_reent+0x12>

08008226 <__swhatbuf_r>:
 8008226:	b570      	push	{r4, r5, r6, lr}
 8008228:	460e      	mov	r6, r1
 800822a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800822e:	2900      	cmp	r1, #0
 8008230:	b096      	sub	sp, #88	; 0x58
 8008232:	4614      	mov	r4, r2
 8008234:	461d      	mov	r5, r3
 8008236:	da08      	bge.n	800824a <__swhatbuf_r+0x24>
 8008238:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800823c:	2200      	movs	r2, #0
 800823e:	602a      	str	r2, [r5, #0]
 8008240:	061a      	lsls	r2, r3, #24
 8008242:	d410      	bmi.n	8008266 <__swhatbuf_r+0x40>
 8008244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008248:	e00e      	b.n	8008268 <__swhatbuf_r+0x42>
 800824a:	466a      	mov	r2, sp
 800824c:	f000 f902 	bl	8008454 <_fstat_r>
 8008250:	2800      	cmp	r0, #0
 8008252:	dbf1      	blt.n	8008238 <__swhatbuf_r+0x12>
 8008254:	9a01      	ldr	r2, [sp, #4]
 8008256:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800825a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800825e:	425a      	negs	r2, r3
 8008260:	415a      	adcs	r2, r3
 8008262:	602a      	str	r2, [r5, #0]
 8008264:	e7ee      	b.n	8008244 <__swhatbuf_r+0x1e>
 8008266:	2340      	movs	r3, #64	; 0x40
 8008268:	2000      	movs	r0, #0
 800826a:	6023      	str	r3, [r4, #0]
 800826c:	b016      	add	sp, #88	; 0x58
 800826e:	bd70      	pop	{r4, r5, r6, pc}

08008270 <__smakebuf_r>:
 8008270:	898b      	ldrh	r3, [r1, #12]
 8008272:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008274:	079d      	lsls	r5, r3, #30
 8008276:	4606      	mov	r6, r0
 8008278:	460c      	mov	r4, r1
 800827a:	d507      	bpl.n	800828c <__smakebuf_r+0x1c>
 800827c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	6123      	str	r3, [r4, #16]
 8008284:	2301      	movs	r3, #1
 8008286:	6163      	str	r3, [r4, #20]
 8008288:	b002      	add	sp, #8
 800828a:	bd70      	pop	{r4, r5, r6, pc}
 800828c:	ab01      	add	r3, sp, #4
 800828e:	466a      	mov	r2, sp
 8008290:	f7ff ffc9 	bl	8008226 <__swhatbuf_r>
 8008294:	9900      	ldr	r1, [sp, #0]
 8008296:	4605      	mov	r5, r0
 8008298:	4630      	mov	r0, r6
 800829a:	f7fd fa1d 	bl	80056d8 <_malloc_r>
 800829e:	b948      	cbnz	r0, 80082b4 <__smakebuf_r+0x44>
 80082a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082a4:	059a      	lsls	r2, r3, #22
 80082a6:	d4ef      	bmi.n	8008288 <__smakebuf_r+0x18>
 80082a8:	f023 0303 	bic.w	r3, r3, #3
 80082ac:	f043 0302 	orr.w	r3, r3, #2
 80082b0:	81a3      	strh	r3, [r4, #12]
 80082b2:	e7e3      	b.n	800827c <__smakebuf_r+0xc>
 80082b4:	4b0d      	ldr	r3, [pc, #52]	; (80082ec <__smakebuf_r+0x7c>)
 80082b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80082b8:	89a3      	ldrh	r3, [r4, #12]
 80082ba:	6020      	str	r0, [r4, #0]
 80082bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082c0:	81a3      	strh	r3, [r4, #12]
 80082c2:	9b00      	ldr	r3, [sp, #0]
 80082c4:	6163      	str	r3, [r4, #20]
 80082c6:	9b01      	ldr	r3, [sp, #4]
 80082c8:	6120      	str	r0, [r4, #16]
 80082ca:	b15b      	cbz	r3, 80082e4 <__smakebuf_r+0x74>
 80082cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082d0:	4630      	mov	r0, r6
 80082d2:	f000 f8d1 	bl	8008478 <_isatty_r>
 80082d6:	b128      	cbz	r0, 80082e4 <__smakebuf_r+0x74>
 80082d8:	89a3      	ldrh	r3, [r4, #12]
 80082da:	f023 0303 	bic.w	r3, r3, #3
 80082de:	f043 0301 	orr.w	r3, r3, #1
 80082e2:	81a3      	strh	r3, [r4, #12]
 80082e4:	89a0      	ldrh	r0, [r4, #12]
 80082e6:	4305      	orrs	r5, r0
 80082e8:	81a5      	strh	r5, [r4, #12]
 80082ea:	e7cd      	b.n	8008288 <__smakebuf_r+0x18>
 80082ec:	08008085 	.word	0x08008085

080082f0 <_malloc_usable_size_r>:
 80082f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082f4:	1f18      	subs	r0, r3, #4
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	bfbc      	itt	lt
 80082fa:	580b      	ldrlt	r3, [r1, r0]
 80082fc:	18c0      	addlt	r0, r0, r3
 80082fe:	4770      	bx	lr

08008300 <_raise_r>:
 8008300:	291f      	cmp	r1, #31
 8008302:	b538      	push	{r3, r4, r5, lr}
 8008304:	4604      	mov	r4, r0
 8008306:	460d      	mov	r5, r1
 8008308:	d904      	bls.n	8008314 <_raise_r+0x14>
 800830a:	2316      	movs	r3, #22
 800830c:	6003      	str	r3, [r0, #0]
 800830e:	f04f 30ff 	mov.w	r0, #4294967295
 8008312:	bd38      	pop	{r3, r4, r5, pc}
 8008314:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008316:	b112      	cbz	r2, 800831e <_raise_r+0x1e>
 8008318:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800831c:	b94b      	cbnz	r3, 8008332 <_raise_r+0x32>
 800831e:	4620      	mov	r0, r4
 8008320:	f000 f830 	bl	8008384 <_getpid_r>
 8008324:	462a      	mov	r2, r5
 8008326:	4601      	mov	r1, r0
 8008328:	4620      	mov	r0, r4
 800832a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800832e:	f000 b817 	b.w	8008360 <_kill_r>
 8008332:	2b01      	cmp	r3, #1
 8008334:	d00a      	beq.n	800834c <_raise_r+0x4c>
 8008336:	1c59      	adds	r1, r3, #1
 8008338:	d103      	bne.n	8008342 <_raise_r+0x42>
 800833a:	2316      	movs	r3, #22
 800833c:	6003      	str	r3, [r0, #0]
 800833e:	2001      	movs	r0, #1
 8008340:	e7e7      	b.n	8008312 <_raise_r+0x12>
 8008342:	2400      	movs	r4, #0
 8008344:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008348:	4628      	mov	r0, r5
 800834a:	4798      	blx	r3
 800834c:	2000      	movs	r0, #0
 800834e:	e7e0      	b.n	8008312 <_raise_r+0x12>

08008350 <raise>:
 8008350:	4b02      	ldr	r3, [pc, #8]	; (800835c <raise+0xc>)
 8008352:	4601      	mov	r1, r0
 8008354:	6818      	ldr	r0, [r3, #0]
 8008356:	f7ff bfd3 	b.w	8008300 <_raise_r>
 800835a:	bf00      	nop
 800835c:	20000020 	.word	0x20000020

08008360 <_kill_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4d07      	ldr	r5, [pc, #28]	; (8008380 <_kill_r+0x20>)
 8008364:	2300      	movs	r3, #0
 8008366:	4604      	mov	r4, r0
 8008368:	4608      	mov	r0, r1
 800836a:	4611      	mov	r1, r2
 800836c:	602b      	str	r3, [r5, #0]
 800836e:	f7f9 f9b9 	bl	80016e4 <_kill>
 8008372:	1c43      	adds	r3, r0, #1
 8008374:	d102      	bne.n	800837c <_kill_r+0x1c>
 8008376:	682b      	ldr	r3, [r5, #0]
 8008378:	b103      	cbz	r3, 800837c <_kill_r+0x1c>
 800837a:	6023      	str	r3, [r4, #0]
 800837c:	bd38      	pop	{r3, r4, r5, pc}
 800837e:	bf00      	nop
 8008380:	20000440 	.word	0x20000440

08008384 <_getpid_r>:
 8008384:	f7f9 b9ac 	b.w	80016e0 <_getpid>

08008388 <__sread>:
 8008388:	b510      	push	{r4, lr}
 800838a:	460c      	mov	r4, r1
 800838c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008390:	f000 f894 	bl	80084bc <_read_r>
 8008394:	2800      	cmp	r0, #0
 8008396:	bfab      	itete	ge
 8008398:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800839a:	89a3      	ldrhlt	r3, [r4, #12]
 800839c:	181b      	addge	r3, r3, r0
 800839e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80083a2:	bfac      	ite	ge
 80083a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80083a6:	81a3      	strhlt	r3, [r4, #12]
 80083a8:	bd10      	pop	{r4, pc}

080083aa <__swrite>:
 80083aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ae:	461f      	mov	r7, r3
 80083b0:	898b      	ldrh	r3, [r1, #12]
 80083b2:	05db      	lsls	r3, r3, #23
 80083b4:	4605      	mov	r5, r0
 80083b6:	460c      	mov	r4, r1
 80083b8:	4616      	mov	r6, r2
 80083ba:	d505      	bpl.n	80083c8 <__swrite+0x1e>
 80083bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c0:	2302      	movs	r3, #2
 80083c2:	2200      	movs	r2, #0
 80083c4:	f000 f868 	bl	8008498 <_lseek_r>
 80083c8:	89a3      	ldrh	r3, [r4, #12]
 80083ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083d2:	81a3      	strh	r3, [r4, #12]
 80083d4:	4632      	mov	r2, r6
 80083d6:	463b      	mov	r3, r7
 80083d8:	4628      	mov	r0, r5
 80083da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083de:	f000 b817 	b.w	8008410 <_write_r>

080083e2 <__sseek>:
 80083e2:	b510      	push	{r4, lr}
 80083e4:	460c      	mov	r4, r1
 80083e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ea:	f000 f855 	bl	8008498 <_lseek_r>
 80083ee:	1c43      	adds	r3, r0, #1
 80083f0:	89a3      	ldrh	r3, [r4, #12]
 80083f2:	bf15      	itete	ne
 80083f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80083f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083fe:	81a3      	strheq	r3, [r4, #12]
 8008400:	bf18      	it	ne
 8008402:	81a3      	strhne	r3, [r4, #12]
 8008404:	bd10      	pop	{r4, pc}

08008406 <__sclose>:
 8008406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800840a:	f000 b813 	b.w	8008434 <_close_r>
	...

08008410 <_write_r>:
 8008410:	b538      	push	{r3, r4, r5, lr}
 8008412:	4d07      	ldr	r5, [pc, #28]	; (8008430 <_write_r+0x20>)
 8008414:	4604      	mov	r4, r0
 8008416:	4608      	mov	r0, r1
 8008418:	4611      	mov	r1, r2
 800841a:	2200      	movs	r2, #0
 800841c:	602a      	str	r2, [r5, #0]
 800841e:	461a      	mov	r2, r3
 8008420:	f7f9 f97c 	bl	800171c <_write>
 8008424:	1c43      	adds	r3, r0, #1
 8008426:	d102      	bne.n	800842e <_write_r+0x1e>
 8008428:	682b      	ldr	r3, [r5, #0]
 800842a:	b103      	cbz	r3, 800842e <_write_r+0x1e>
 800842c:	6023      	str	r3, [r4, #0]
 800842e:	bd38      	pop	{r3, r4, r5, pc}
 8008430:	20000440 	.word	0x20000440

08008434 <_close_r>:
 8008434:	b538      	push	{r3, r4, r5, lr}
 8008436:	4d06      	ldr	r5, [pc, #24]	; (8008450 <_close_r+0x1c>)
 8008438:	2300      	movs	r3, #0
 800843a:	4604      	mov	r4, r0
 800843c:	4608      	mov	r0, r1
 800843e:	602b      	str	r3, [r5, #0]
 8008440:	f7f9 f97a 	bl	8001738 <_close>
 8008444:	1c43      	adds	r3, r0, #1
 8008446:	d102      	bne.n	800844e <_close_r+0x1a>
 8008448:	682b      	ldr	r3, [r5, #0]
 800844a:	b103      	cbz	r3, 800844e <_close_r+0x1a>
 800844c:	6023      	str	r3, [r4, #0]
 800844e:	bd38      	pop	{r3, r4, r5, pc}
 8008450:	20000440 	.word	0x20000440

08008454 <_fstat_r>:
 8008454:	b538      	push	{r3, r4, r5, lr}
 8008456:	4d07      	ldr	r5, [pc, #28]	; (8008474 <_fstat_r+0x20>)
 8008458:	2300      	movs	r3, #0
 800845a:	4604      	mov	r4, r0
 800845c:	4608      	mov	r0, r1
 800845e:	4611      	mov	r1, r2
 8008460:	602b      	str	r3, [r5, #0]
 8008462:	f7f9 f96c 	bl	800173e <_fstat>
 8008466:	1c43      	adds	r3, r0, #1
 8008468:	d102      	bne.n	8008470 <_fstat_r+0x1c>
 800846a:	682b      	ldr	r3, [r5, #0]
 800846c:	b103      	cbz	r3, 8008470 <_fstat_r+0x1c>
 800846e:	6023      	str	r3, [r4, #0]
 8008470:	bd38      	pop	{r3, r4, r5, pc}
 8008472:	bf00      	nop
 8008474:	20000440 	.word	0x20000440

08008478 <_isatty_r>:
 8008478:	b538      	push	{r3, r4, r5, lr}
 800847a:	4d06      	ldr	r5, [pc, #24]	; (8008494 <_isatty_r+0x1c>)
 800847c:	2300      	movs	r3, #0
 800847e:	4604      	mov	r4, r0
 8008480:	4608      	mov	r0, r1
 8008482:	602b      	str	r3, [r5, #0]
 8008484:	f7f9 f960 	bl	8001748 <_isatty>
 8008488:	1c43      	adds	r3, r0, #1
 800848a:	d102      	bne.n	8008492 <_isatty_r+0x1a>
 800848c:	682b      	ldr	r3, [r5, #0]
 800848e:	b103      	cbz	r3, 8008492 <_isatty_r+0x1a>
 8008490:	6023      	str	r3, [r4, #0]
 8008492:	bd38      	pop	{r3, r4, r5, pc}
 8008494:	20000440 	.word	0x20000440

08008498 <_lseek_r>:
 8008498:	b538      	push	{r3, r4, r5, lr}
 800849a:	4d07      	ldr	r5, [pc, #28]	; (80084b8 <_lseek_r+0x20>)
 800849c:	4604      	mov	r4, r0
 800849e:	4608      	mov	r0, r1
 80084a0:	4611      	mov	r1, r2
 80084a2:	2200      	movs	r2, #0
 80084a4:	602a      	str	r2, [r5, #0]
 80084a6:	461a      	mov	r2, r3
 80084a8:	f7f9 f950 	bl	800174c <_lseek>
 80084ac:	1c43      	adds	r3, r0, #1
 80084ae:	d102      	bne.n	80084b6 <_lseek_r+0x1e>
 80084b0:	682b      	ldr	r3, [r5, #0]
 80084b2:	b103      	cbz	r3, 80084b6 <_lseek_r+0x1e>
 80084b4:	6023      	str	r3, [r4, #0]
 80084b6:	bd38      	pop	{r3, r4, r5, pc}
 80084b8:	20000440 	.word	0x20000440

080084bc <_read_r>:
 80084bc:	b538      	push	{r3, r4, r5, lr}
 80084be:	4d07      	ldr	r5, [pc, #28]	; (80084dc <_read_r+0x20>)
 80084c0:	4604      	mov	r4, r0
 80084c2:	4608      	mov	r0, r1
 80084c4:	4611      	mov	r1, r2
 80084c6:	2200      	movs	r2, #0
 80084c8:	602a      	str	r2, [r5, #0]
 80084ca:	461a      	mov	r2, r3
 80084cc:	f7f9 f918 	bl	8001700 <_read>
 80084d0:	1c43      	adds	r3, r0, #1
 80084d2:	d102      	bne.n	80084da <_read_r+0x1e>
 80084d4:	682b      	ldr	r3, [r5, #0]
 80084d6:	b103      	cbz	r3, 80084da <_read_r+0x1e>
 80084d8:	6023      	str	r3, [r4, #0]
 80084da:	bd38      	pop	{r3, r4, r5, pc}
 80084dc:	20000440 	.word	0x20000440

080084e0 <ceil>:
 80084e0:	ec51 0b10 	vmov	r0, r1, d0
 80084e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80084ec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80084f0:	2e13      	cmp	r6, #19
 80084f2:	ee10 5a10 	vmov	r5, s0
 80084f6:	ee10 8a10 	vmov	r8, s0
 80084fa:	460c      	mov	r4, r1
 80084fc:	dc30      	bgt.n	8008560 <ceil+0x80>
 80084fe:	2e00      	cmp	r6, #0
 8008500:	da12      	bge.n	8008528 <ceil+0x48>
 8008502:	a335      	add	r3, pc, #212	; (adr r3, 80085d8 <ceil+0xf8>)
 8008504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008508:	f7f7 fec0 	bl	800028c <__adddf3>
 800850c:	2200      	movs	r2, #0
 800850e:	2300      	movs	r3, #0
 8008510:	f7f8 fb02 	bl	8000b18 <__aeabi_dcmpgt>
 8008514:	b128      	cbz	r0, 8008522 <ceil+0x42>
 8008516:	2c00      	cmp	r4, #0
 8008518:	db55      	blt.n	80085c6 <ceil+0xe6>
 800851a:	432c      	orrs	r4, r5
 800851c:	d057      	beq.n	80085ce <ceil+0xee>
 800851e:	4c30      	ldr	r4, [pc, #192]	; (80085e0 <ceil+0x100>)
 8008520:	2500      	movs	r5, #0
 8008522:	4621      	mov	r1, r4
 8008524:	4628      	mov	r0, r5
 8008526:	e025      	b.n	8008574 <ceil+0x94>
 8008528:	4f2e      	ldr	r7, [pc, #184]	; (80085e4 <ceil+0x104>)
 800852a:	4137      	asrs	r7, r6
 800852c:	ea01 0307 	and.w	r3, r1, r7
 8008530:	4303      	orrs	r3, r0
 8008532:	d01f      	beq.n	8008574 <ceil+0x94>
 8008534:	a328      	add	r3, pc, #160	; (adr r3, 80085d8 <ceil+0xf8>)
 8008536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853a:	f7f7 fea7 	bl	800028c <__adddf3>
 800853e:	2200      	movs	r2, #0
 8008540:	2300      	movs	r3, #0
 8008542:	f7f8 fae9 	bl	8000b18 <__aeabi_dcmpgt>
 8008546:	2800      	cmp	r0, #0
 8008548:	d0eb      	beq.n	8008522 <ceil+0x42>
 800854a:	2c00      	cmp	r4, #0
 800854c:	bfc2      	ittt	gt
 800854e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8008552:	fa43 f606 	asrgt.w	r6, r3, r6
 8008556:	19a4      	addgt	r4, r4, r6
 8008558:	ea24 0407 	bic.w	r4, r4, r7
 800855c:	2500      	movs	r5, #0
 800855e:	e7e0      	b.n	8008522 <ceil+0x42>
 8008560:	2e33      	cmp	r6, #51	; 0x33
 8008562:	dd0b      	ble.n	800857c <ceil+0x9c>
 8008564:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008568:	d104      	bne.n	8008574 <ceil+0x94>
 800856a:	ee10 2a10 	vmov	r2, s0
 800856e:	460b      	mov	r3, r1
 8008570:	f7f7 fe8c 	bl	800028c <__adddf3>
 8008574:	ec41 0b10 	vmov	d0, r0, r1
 8008578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800857c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008580:	f04f 33ff 	mov.w	r3, #4294967295
 8008584:	fa23 f707 	lsr.w	r7, r3, r7
 8008588:	4207      	tst	r7, r0
 800858a:	d0f3      	beq.n	8008574 <ceil+0x94>
 800858c:	a312      	add	r3, pc, #72	; (adr r3, 80085d8 <ceil+0xf8>)
 800858e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008592:	f7f7 fe7b 	bl	800028c <__adddf3>
 8008596:	2200      	movs	r2, #0
 8008598:	2300      	movs	r3, #0
 800859a:	f7f8 fabd 	bl	8000b18 <__aeabi_dcmpgt>
 800859e:	2800      	cmp	r0, #0
 80085a0:	d0bf      	beq.n	8008522 <ceil+0x42>
 80085a2:	2c00      	cmp	r4, #0
 80085a4:	dd02      	ble.n	80085ac <ceil+0xcc>
 80085a6:	2e14      	cmp	r6, #20
 80085a8:	d103      	bne.n	80085b2 <ceil+0xd2>
 80085aa:	3401      	adds	r4, #1
 80085ac:	ea25 0507 	bic.w	r5, r5, r7
 80085b0:	e7b7      	b.n	8008522 <ceil+0x42>
 80085b2:	2301      	movs	r3, #1
 80085b4:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80085b8:	fa03 f606 	lsl.w	r6, r3, r6
 80085bc:	4435      	add	r5, r6
 80085be:	4545      	cmp	r5, r8
 80085c0:	bf38      	it	cc
 80085c2:	18e4      	addcc	r4, r4, r3
 80085c4:	e7f2      	b.n	80085ac <ceil+0xcc>
 80085c6:	2500      	movs	r5, #0
 80085c8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80085cc:	e7a9      	b.n	8008522 <ceil+0x42>
 80085ce:	4625      	mov	r5, r4
 80085d0:	e7a7      	b.n	8008522 <ceil+0x42>
 80085d2:	bf00      	nop
 80085d4:	f3af 8000 	nop.w
 80085d8:	8800759c 	.word	0x8800759c
 80085dc:	7e37e43c 	.word	0x7e37e43c
 80085e0:	3ff00000 	.word	0x3ff00000
 80085e4:	000fffff 	.word	0x000fffff

080085e8 <_init>:
 80085e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ea:	bf00      	nop
 80085ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ee:	bc08      	pop	{r3}
 80085f0:	469e      	mov	lr, r3
 80085f2:	4770      	bx	lr

080085f4 <_fini>:
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f6:	bf00      	nop
 80085f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fa:	bc08      	pop	{r3}
 80085fc:	469e      	mov	lr, r3
 80085fe:	4770      	bx	lr
